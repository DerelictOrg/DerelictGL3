/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.arb.core_40;

import derelict.opengl.types,
       derelict.opengl.arb.internal;

// ARB_draw_indirect
enum ARB_draw_indirect = "GL_ARB_draw_indirect";
enum arbDrawIndirectDecls =
q{
enum : uint
{
    GL_DRAW_INDIRECT_BUFFER           = 0x8F3F,
    GL_DRAW_INDIRECT_BUFFER_BINDING   = 0x8F43,
}
extern(System) @nogc nothrow {
    alias da_glDrawArraysIndirect = void function(GLenum, const(GLvoid)*);
    alias da_glDrawElementsIndirect = void function(GLenum, GLenum, const(GLvoid)*);
}};

enum arbDrawIndirectFuncs =
q{
    da_glDrawArraysIndirect glDrawArraysIndirect;
    da_glDrawElementsIndirect glDrawElementsIndirect;
};

enum arbDrawIndirectLoaderImpl =
q{
    bindGLFunc(cast(void**)&glDrawArraysIndirect, "glDrawArraysIndirect");
    bindGLFunc(cast(void**)&glDrawElementsIndirect, "glDrawElementsIndirect");
};

enum arbDrawIndirectLoader = makeLoader(ARB_draw_indirect, arbDrawIndirectLoaderImpl, "gl40");
enum arbDrawIndirect = arbDrawIndirectDecls ~ arbDrawIndirectFuncs.makeGShared() ~ arbDrawIndirectLoader;

// ARB_gpu_shader_fp64
enum ARB_gpu_shader_fp64 = "GL_ARB_gpu_shader_fp64";
enum arbGPUShaderFP64Decls =
q{
enum : uint
{
    GL_DOUBLE_VEC2                    = 0x8FFC,
    GL_DOUBLE_VEC3                    = 0x8FFD,
    GL_DOUBLE_VEC4                    = 0x8FFE,
    GL_DOUBLE_MAT2                    = 0x8F46,
    GL_DOUBLE_MAT3                    = 0x8F47,
    GL_DOUBLE_MAT4                    = 0x8F48,
    GL_DOUBLE_MAT2x3                  = 0x8F49,
    GL_DOUBLE_MAT2x4                  = 0x8F4A,
    GL_DOUBLE_MAT3x2                  = 0x8F4B,
    GL_DOUBLE_MAT3x4                  = 0x8F4C,
    GL_DOUBLE_MAT4x2                  = 0x8F4D,
    GL_DOUBLE_MAT4x3                  = 0x8F4E,
}
extern(System) @nogc nothrow {
    alias da_glUniform1d = void function(GLint, GLdouble);
    alias da_glUniform2d = void function(GLint, GLdouble, GLdouble);
    alias da_glUniform3d = void function(GLint, GLdouble, GLdouble, GLdouble);
    alias da_glUniform4d = void function(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    alias da_glUniform1dv = void function(GLint, GLsizei, const(GLdouble)*);
    alias da_glUniform2dv = void function(GLint, GLsizei, const(GLdouble)*);
    alias da_glUniform3dv = void function(GLint, GLsizei, const(GLdouble)*);
    alias da_glUniform4dv = void function(GLint, GLsizei, const(GLdouble)*);
    alias da_glUniformMatrix2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix2x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix2x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix3x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix3x4dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix4x2dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glUniformMatrix4x3dv = void function(GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glGetUniformdv = void function(GLuint, GLint, GLdouble*);
}};

enum arbGPUShaderFP64Funcs =
q{
    da_glUniform1d glUniform1d;
    da_glUniform2d glUniform2d;
    da_glUniform3d glUniform3d;
    da_glUniform4d glUniform4d;
    da_glUniform1dv glUniform1dv;
    da_glUniform2dv glUniform2dv;
    da_glUniform3dv glUniform3dv;
    da_glUniform4dv glUniform4dv;
    da_glUniformMatrix2dv glUniformMatrix2dv;
    da_glUniformMatrix3dv glUniformMatrix3dv;
    da_glUniformMatrix4dv glUniformMatrix4dv;
    da_glUniformMatrix2x3dv glUniformMatrix2x3dv;
    da_glUniformMatrix2x4dv glUniformMatrix2x4dv;
    da_glUniformMatrix3x2dv glUniformMatrix3x2dv;
    da_glUniformMatrix3x4dv glUniformMatrix3x4dv;
    da_glUniformMatrix4x2dv glUniformMatrix4x2dv;
    da_glUniformMatrix4x3dv glUniformMatrix4x3dv;
    da_glGetUniformdv glGetUniformdv;
};

enum arbGPUShaderFP64LoaderImpl =
q{
    bindGLFunc(cast(void**)&glUniform1d, "glUniform1d");
    bindGLFunc(cast(void**)&glUniform2d, "glUniform2d");
    bindGLFunc(cast(void**)&glUniform3d, "glUniform3d");
    bindGLFunc(cast(void**)&glUniform4d, "glUniform4d");
    bindGLFunc(cast(void**)&glUniform1dv, "glUniform1dv");
    bindGLFunc(cast(void**)&glUniform2dv, "glUniform2dv");
    bindGLFunc(cast(void**)&glUniform3dv, "glUniform3dv");
    bindGLFunc(cast(void**)&glUniform4dv, "glUniform4dv");
    bindGLFunc(cast(void**)&glUniformMatrix2dv, "glUniformMatrix2dv");
    bindGLFunc(cast(void**)&glUniformMatrix3dv, "glUniformMatrix3dv");
    bindGLFunc(cast(void**)&glUniformMatrix4dv, "glUniformMatrix4dv");
    bindGLFunc(cast(void**)&glUniformMatrix2x3dv, "glUniformMatrix2x3dv");
    bindGLFunc(cast(void**)&glUniformMatrix2x4dv, "glUniformMatrix2x4dv");
    bindGLFunc(cast(void**)&glUniformMatrix3x2dv, "glUniformMatrix3x2dv");
    bindGLFunc(cast(void**)&glUniformMatrix3x4dv, "glUniformMatrix3x4dv");
    bindGLFunc(cast(void**)&glUniformMatrix4x2dv, "glUniformMatrix4x2dv");
    bindGLFunc(cast(void**)&glUniformMatrix4x3dv, "glUniformMatrix4x3dv");
};

enum arbGPUShaderFP64Loader = makeLoader(ARB_gpu_shader_fp64, arbGPUShaderFP64LoaderImpl, "gl40");
enum arbGPUShaderFP64 = arbGPUShaderFP64Decls ~ arbGPUShaderFP64Funcs.makeGShared() ~ arbGPUShaderFP64Loader;

// ARB_shader_subroutine
enum ARB_shader_subroutine = "GL_ARB_shader_subroutine";
enum arbShaderSubroutineDecls =
q{
enum : uint
{
    GL_ACTIVE_SUBROUTINES             = 0x8DE5,
    GL_ACTIVE_SUBROUTINE_UNIFORMS     = 0x8DE6,
    GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
    GL_ACTIVE_SUBROUTINE_MAX_LENGTH   = 0x8E48,
    GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
    GL_MAX_SUBROUTINES                = 0x8DE7,
    GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
    GL_NUM_COMPATIBLE_SUBROUTINES     = 0x8E4A,
    GL_COMPATIBLE_SUBROUTINES         = 0x8E4B,
}
extern(System) @nogc nothrow {
    alias da_glGetSubroutineUniformLocation = GLint function(GLuint, GLenum, const(GLchar)*);
    alias da_glGetSubroutineIndex = GLuint function(GLuint, GLenum, const(GLchar)*);
    alias da_glGetActiveSubroutineUniformiv = void function(GLuint, GLenum, GLuint, GLenum, GLint*);
    alias da_glGetActiveSubroutineUniformName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
    alias da_glGetActiveSubroutineName = void function(GLuint, GLenum, GLuint, GLsizei, GLsizei*, GLchar*);
    alias da_glUniformSubroutinesuiv = void function(GLenum, GLsizei, const(GLuint)*);
    alias da_glGetUniformSubroutineuiv = void function(GLenum, GLint, GLuint*);
    alias da_glGetProgramStageiv = void function(GLuint, GLenum, GLenum, GLint*);
}};

enum arbShaderSubroutineFuncs =
q{
    da_glGetSubroutineUniformLocation glGetSubroutineUniformLocation;
    da_glGetSubroutineIndex glGetSubroutineIndex;
    da_glGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv;
    da_glGetActiveSubroutineUniformName glGetActiveSubroutineUniformName;
    da_glGetActiveSubroutineName glGetActiveSubroutineName;
    da_glUniformSubroutinesuiv glUniformSubroutinesuiv;
    da_glGetUniformSubroutineuiv glGetUniformSubroutineuiv;
    da_glGetProgramStageiv glGetProgramStageiv;
};

enum arbShaderSubroutineLoaderImpl =
q{
    bindGLFunc(cast(void**)&glGetSubroutineUniformLocation, "glGetSubroutineUniformLocation");
    bindGLFunc(cast(void**)&glGetSubroutineIndex, "glGetSubroutineIndex");
    bindGLFunc(cast(void**)&glGetActiveSubroutineUniformiv, "glGetActiveSubroutineUniformiv");
    bindGLFunc(cast(void**)&glGetActiveSubroutineUniformName, "glGetActiveSubroutineUniformName");
    bindGLFunc(cast(void**)&glGetActiveSubroutineName, "glGetActiveSubroutineName");
    bindGLFunc(cast(void**)&glUniformSubroutinesuiv, "glUniformSubroutinesuiv");
    bindGLFunc(cast(void**)&glGetUniformSubroutineuiv, "glGetUniformSubroutineuiv");
    bindGLFunc(cast(void**)&glGetProgramStageiv, "glGetProgramStageiv");
};

enum arbShaderSubroutineLoader = makeLoader(ARB_shader_subroutine, arbShaderSubroutineLoaderImpl, "gl40");
enum arbShaderSubroutine = arbShaderSubroutineDecls ~ arbShaderSubroutineFuncs.makeGShared() ~ arbShaderSubroutineLoader;

// ARB_tessellation_shader
enum ARB_tessellation_shader = "GL_ARB_tessellation_shader";
enum arbTesselationShaderDecls =
q{
enum : uint
{
    GL_PATCHES                        = 0x000E,
    GL_PATCH_VERTICES                 = 0x8E72,
    GL_PATCH_DEFAULT_INNER_LEVEL      = 0x8E73,
    GL_PATCH_DEFAULT_OUTER_LEVEL      = 0x8E74,
    GL_TESS_CONTROL_OUTPUT_VERTICES   = 0x8E75,
    GL_TESS_GEN_MODE                  = 0x8E76,
    GL_TESS_GEN_SPACING               = 0x8E77,
    GL_TESS_GEN_VERTEX_ORDER          = 0x8E78,
    GL_TESS_GEN_POINT_MODE            = 0x8E79,
    GL_ISOLINES                       = 0x8E7A,
    GL_FRACTIONAL_ODD                 = 0x8E7B,
    GL_FRACTIONAL_EVEN                = 0x8E7C,
    GL_MAX_PATCH_VERTICES             = 0x8E7D,
    GL_MAX_TESS_GEN_LEVEL             = 0x8E7E,
    GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
    GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
    GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
    GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
    GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
    GL_MAX_TESS_PATCH_COMPONENTS      = 0x8E84,
    GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
    GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
    GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89,
    GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
    GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
    GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
    GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
    GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
    GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
    GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
    GL_TESS_EVALUATION_SHADER         = 0x8E87,
    GL_TESS_CONTROL_SHADER            = 0x8E88,
}
extern(System) @nogc nothrow {
    alias da_glPatchParameteri = void function(GLenum, GLint);
    alias da_glPatchParameterfv = void function(GLenum, const(GLfloat)*);
}};

enum arbTesselationShaderFuncs =
q{
    da_glPatchParameteri glPatchParameteri;
    da_glPatchParameterfv glPatchParameterfv;
};

enum arbTesselationShaderLoaderImpl =
q{
    bindGLFunc(cast(void**)&glPatchParameteri, "glPatchParameteri");
    bindGLFunc(cast(void**)&glPatchParameterfv, "glPatchParameterfv");
};

enum arbTesselationShaderLoader = makeLoader(ARB_tessellation_shader, arbTesselationShaderLoaderImpl, "gl40");
enum arbTesselationShader = arbTesselationShaderDecls ~ arbTesselationShaderFuncs.makeGShared() ~ arbTesselationShaderLoader;

// ARB_transform_feedback2
enum ARB_transform_feedback2 = "GL_ARB_transform_feedback2";
enum arbTransformFeedback2Decls =
q{
enum : uint
{
    GL_TRANSFORM_FEEDBACK             = 0x8E22,
    GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
    GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
    GL_TRANSFORM_FEEDBACK_BINDING     = 0x8E25,
}
extern(System) @nogc nothrow {
    alias da_glBindTransformFeedback = void function(GLenum, GLuint);
    alias da_glDeleteTransformFeedbacks = void function(GLsizei, const(GLuint)*);
    alias da_glGenTransformFeedbacks = void function(GLsizei, GLuint*);
    alias da_glIsTransformFeedback = GLboolean function(GLuint);
    alias da_glPauseTransformFeedback = void function();
    alias da_glResumeTransformFeedback = void function();
    alias da_glDrawTransformFeedback = void function(GLenum, GLuint);
}};

enum arbTransformFeedback2Funcs =
q{
    da_glBindTransformFeedback glBindTransformFeedback;
    da_glDeleteTransformFeedbacks glDeleteTransformFeedbacks;
    da_glGenTransformFeedbacks glGenTransformFeedbacks;
    da_glIsTransformFeedback glIsTransformFeedback;
    da_glPauseTransformFeedback glPauseTransformFeedback;
    da_glResumeTransformFeedback glResumeTransformFeedback;
    da_glDrawTransformFeedback glDrawTransformFeedback;
};

enum arbTransformFeedback2LoaderImpl =
q{
    bindGLFunc(cast(void**)&glBindTransformFeedback, "glBindTransformFeedback");
    bindGLFunc(cast(void**)&glDeleteTransformFeedbacks, "glDeleteTransformFeedbacks");
    bindGLFunc(cast(void**)&glGenTransformFeedbacks, "glGenTransformFeedbacks");
    bindGLFunc(cast(void**)&glIsTransformFeedback, "glIsTransformFeedback");
    bindGLFunc(cast(void**)&glPauseTransformFeedback, "glPauseTransformFeedback");
    bindGLFunc(cast(void**)&glResumeTransformFeedback, "glResumeTransformFeedback");
    bindGLFunc(cast(void**)&glDrawTransformFeedback, "glDrawTransformFeedback");
};

enum arbTransformFeedback2Loader = makeLoader(ARB_transform_feedback2, arbTransformFeedback2LoaderImpl, "gl40");
enum arbTransformFeedback2 = arbTransformFeedback2Decls ~ arbTransformFeedback2Funcs.makeGShared() ~ arbTransformFeedback2Loader;


// ARB_transform_feedback3
enum ARB_transform_feedback3 = "GL_ARB_transform_feedback3";
enum arbTransformFeedback3Decls =
q{
enum : uint
{
    GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70,
    GL_MAX_VERTEX_STREAMS             = 0x8E71,
}
extern(System) @nogc nothrow {
    alias da_glDrawTransformFeedbackStream = void function(GLenum, GLuint, GLuint);
    alias da_glBeginQueryIndexed = void function(GLenum, GLuint, GLuint);
    alias da_glEndQueryIndexed = void function(GLenum, GLuint);
    alias da_glGetQueryIndexediv = void function(GLenum, GLuint, GLenum, GLint*);
}};

enum arbTransformFeedback3Funcs =
q{
    da_glDrawTransformFeedbackStream glDrawTransformFeedbackStream;
    da_glBeginQueryIndexed glBeginQueryIndexed;
    da_glEndQueryIndexed glEndQueryIndexed;
    da_glGetQueryIndexediv glGetQueryIndexediv;
};

enum arbTransformFeedback3LoaderImpl =
q{
    bindGLFunc(cast(void**)&glDrawTransformFeedbackStream, "glDrawTransformFeedbackStream");
    bindGLFunc(cast(void**)&glBeginQueryIndexed, "glBeginQueryIndexed");
    bindGLFunc(cast(void**)&glEndQueryIndexed, "glEndQueryIndexed");
    bindGLFunc(cast(void**)&glGetQueryIndexediv, "glGetQueryIndexediv");
};

enum arbTransformFeedback3Loader = makeLoader(ARB_transform_feedback3, arbTransformFeedback3LoaderImpl, "gl40");
enum arbTransformFeedback3 = arbTransformFeedback3Decls ~ arbTransformFeedback3Funcs.makeGShared() ~ arbTransformFeedback3Loader;

enum corearb40 = arbDrawIndirect ~ arbGPUShaderFP64 ~ arbShaderSubroutine ~ arbTesselationShader
        ~ arbTransformFeedback2 ~ arbTransformFeedback3;
enum corearb40Decls = arbDrawIndirectDecls ~ arbGPUShaderFP64Decls ~ arbShaderSubroutineDecls
        ~ arbTesselationShaderDecls ~ arbTransformFeedback2Decls ~ arbTransformFeedback3Decls;
enum corearb40Funcs = arbDrawIndirectFuncs ~ arbGPUShaderFP64Funcs ~ arbShaderSubroutineFuncs
        ~ arbTesselationShaderFuncs ~ arbTransformFeedback2Funcs ~ arbTransformFeedback3Funcs;
