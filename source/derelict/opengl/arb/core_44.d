/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.arb.core_44;

import derelict.opengl.types,
       derelict.opengl.arb.internal;

// ARB_buffer_storage
enum ARB_buffer_storage = "GL_ARB_buffer_storage";
enum arbBufferStorageDecls =
q{
enum : uint
{
    GL_MAP_PERSISTENT_BIT             = 0x0040,
    GL_MAP_COHERENT_BIT               = 0x0080,
    GL_DYNAMIC_STORAGE_BIT            = 0x0100,
    GL_CLIENT_STORAGE_BIT             = 0x0200,
    GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
    GL_BUFFER_IMMUTABLE_STORAGE       = 0x821F,
    GL_BUFFER_STORAGE_FLAGS           = 0x8220,
}
extern(System) @nogc nothrow {
    alias da_glBufferStorage = void function(GLenum,GLsizeiptr,const(void)*,GLbitfield);
    alias da_glNamedBufferStorageEXT = void function(GLuint,GLsizeiptr,const(void)*,GLbitfield);
}};

enum arbBufferStorageFuncs =
q{
    da_glBufferStorage glBufferStorage;
    da_glNamedBufferStorageEXT glNamedBufferStorageEXT;
};

enum arbBufferStorageLoaderImpl =
q{
    bindGLFunc(cast(void**)&glBufferStorage, "glBufferStorage");
    try { bindGLFunc(cast(void**)&glNamedBufferStorageEXT, "glNamedBufferStorageEXT"); }
    catch(Exception e) {}
};

enum arbBufferStorageLoader = makeLoader(ARB_buffer_storage, arbBufferStorageLoaderImpl, "gl44");
enum arbBufferStorage = arbBufferStorageDecls ~ arbBufferStorageFuncs.makeGShared() ~ arbBufferStorageLoader;

// ARB_clear_texture
enum ARB_clear_texture = "GL_ARB_clear_texture";
enum arbClearTextureDecls =
q{
enum uint GL_CLEAR_TEXTURE = 0x9365;
extern(System) @nogc nothrow
{
    alias da_glClearTexImage = void function(GLuint,GLint,GLenum,GLenum,const(void)*);
    alias da_glClearTexSubImage = void function(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const(void)*);
}};

enum arbClearTextureFuncs =
q{
    da_glClearTexImage glClearTexImage;
    da_glClearTexSubImage glClearTexSubImage;
};

enum arbClearTextureLoaderImpl =
q{
    bindGLFunc(cast(void**)&glClearTexImage, "glClearTexImage");
    bindGLFunc(cast(void**)&glClearTexSubImage, "glClearTexSubImage");
};

enum arbClearTextureLoader = makeLoader(ARB_clear_texture, arbClearTextureLoaderImpl, "gl44");
enum arbClearTexture = arbClearTextureDecls ~ arbClearTextureFuncs.makeGShared() ~ arbClearTextureLoader;

// ARB_multi_bind
enum ARB_multi_bind = "GL_ARB_multi_bind";
enum arbMultBindDecls =
q{
extern(System) @nogc nothrow {
    alias da_glBindBuffersBase = void function(GLenum,GLuint,GLsizei,const(GLuint)*);
    alias da_glBindBuffersRange = void function(GLenum,GLuint,GLsizei,const(GLuint)*,const(GLintptr)*,const(GLsizeiptr)*);
    alias da_glBindTextures = void function(GLuint,GLsizei,const(GLuint)*);
    alias da_glBindSamplers = void function(GLuint,GLsizei,const(GLuint)*);
    alias da_glBindImageTextures = void function(GLuint,GLsizei,const(GLuint)*);
    alias da_glBindVertexBuffers = void function(GLuint,GLsizei,const(GLuint)*,const(GLintptr)*,const(GLsizei)*);
}};

enum arbMultBindFuncs =
q{
    da_glBindBuffersBase glBindBuffersBase;
    da_glBindBuffersRange glBindBuffersRange;
    da_glBindTextures glBindTextures;
    da_glBindSamplers glBindSamplers;
    da_glBindImageTextures glBindImageTextures;
    da_glBindVertexBuffers glBindVertexBuffers;
};

enum arbMultBindLoaderImpl =
q{
    bindGLFunc(cast(void**)&glBindBuffersBase, "glBindBuffersBase");
    bindGLFunc(cast(void**)&glBindBuffersRange, "glBindBuffersRange");
    bindGLFunc(cast(void**)&glBindTextures, "glBindTextures");
    bindGLFunc(cast(void**)&glBindSamplers, "glBindSamplers");
    bindGLFunc(cast(void**)&glBindImageTextures, "glBindImageTextures");
    bindGLFunc(cast(void**)&glBindVertexBuffers, "glBindVertexBuffers");
};

enum arbMultBindLoader = makeLoader(ARB_multi_bind, arbMultBindLoaderImpl, "gl44");
enum arbMultBind = arbMultBindDecls ~ arbMultBindFuncs.makeGShared() ~ arbMultBindLoader;

enum corearb44 = arbBufferStorage ~ arbClearTexture ~ arbMultBind;
enum corearb44Decls = arbBufferStorageDecls~ arbClearTextureDecls ~ arbMultBindDecls;
enum corearb44Funcs = arbBufferStorageFuncs ~ arbClearTextureFuncs ~ arbMultBindFuncs;