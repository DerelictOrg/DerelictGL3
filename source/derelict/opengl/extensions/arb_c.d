/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.extensions.arb_c;

import derelict.opengl.types : usingContexts;
import derelict.opengl.extensions.internal;

// ARB_cl_event
enum ARB_cl_event = "GL_ARB_cl_event";
enum arbCLEventDecls =
q{
struct _cl_context;
struct _cl_event;
enum : uint
{
    GL_SYNC_CL_EVENT_ARB              = 0x8240,
    GL_SYNC_CL_EVENT_COMPLETE_ARB     = 0x8241,
}
extern(System) @nogc nothrow alias  da_glCreateSyncFromCLeventARB = GLsync function(_cl_context*, _cl_event*, GLbitfield);
};

enum arbCLEventFuncs = `da_glCreateSyncFromCLeventARB glCreateSyncFromCLeventARB;`;
enum arbCLEventLoaderImpl = `bindGLFunc(cast(void**)&glCreateSyncFromCLeventARB, "glCreateSyncFromCLeventARB");`;
enum arbCLEventLoader = makeExtLoader(ARB_cl_event, arbCLEventLoaderImpl);
static if(!usingContexts) enum arbCLEvent = arbCLEventDecls ~ arbCLEventFuncs.makeGShared() ~ arbCLEventLoader;

// ARB_clear_buffer_object <-- Core in GL 4.3
enum ARB_clear_buffer_object = "GL_ARB_clear_buffer_object";
enum arbClearBufferObjectDecls =
q{
extern(System) @nogc nothrow {
    alias da_glClearBufferData = void function(GLenum,GLenum,GLenum,GLenum,const(void)*);
    alias da_glClearBufferSubData = void function(GLenum,GLenum,GLintptr,GLsizeiptr,GLenum,GLenum,const(void)*);
    alias da_glClearNamedBufferDataEXT = void function(GLuint,GLenum,GLenum,GLenum,const(void)*);
    alias da_glClearNamedBufferSubDataEXT = void function(GLuint,GLenum,GLenum,GLenum,GLsizeiptr,GLsizeiptr,const(void)*);
}};

enum arbClearBufferObjectFuncs =
q{
    da_glClearBufferData glClearBufferData;
    da_glClearBufferSubData glClearBufferSubData;
    da_glClearNamedBufferDataEXT glClearNamedBufferDataEXT;
    da_glClearNamedBufferSubDataEXT glClearNamedBufferSubDataEXT;
};

enum arbClearBufferObjectLoaderImpl =
q{
    bindGLFunc(cast(void**)&glClearBufferData, "glClearBufferData");
    bindGLFunc(cast(void**)&glClearBufferSubData, "glClearBufferSubData");
    try {
        bindGLFunc(cast(void**)&glClearNamedBufferDataEXT, "glClearNamedBufferDataEXT");
        bindGLFunc(cast(void**)&glClearNamedBufferSubDataEXT, "glClearNamedBufferSubDataEXT");
    }
    catch(Exception e) {}
};

enum arbClearBufferObjectLoader = makeLoader(ARB_clear_buffer_object, arbClearBufferObjectLoaderImpl, "gl43");
static if(!usingContexts) enum arbClearBufferObject = arbClearBufferObjectDecls ~ arbClearBufferObjectFuncs.makeGShared() ~ arbClearBufferObjectLoader;

// ARB_clear_texture <-- Core in GL 4.4
enum ARB_clear_texture = "GL_ARB_clear_texture";
enum arbClearTextureDecls =
q{
enum uint GL_CLEAR_TEXTURE = 0x9365;
extern(System) @nogc nothrow
{
    alias da_glClearTexImage = void function(GLuint,GLint,GLenum,GLenum,const(void)*);
    alias da_glClearTexSubImage = void function(GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,const(void)*);
}};

enum arbClearTextureFuncs =
q{
    da_glClearTexImage glClearTexImage;
    da_glClearTexSubImage glClearTexSubImage;
};

enum arbClearTextureLoaderImpl =
q{
    bindGLFunc(cast(void**)&glClearTexImage, "glClearTexImage");
    bindGLFunc(cast(void**)&glClearTexSubImage, "glClearTexSubImage");
};

enum arbClearTextureLoader = makeLoader(ARB_clear_texture, arbClearTextureLoaderImpl, "gl44");
static if(!usingContexts) enum arbClearTexture = arbClearTextureDecls ~ arbClearTextureFuncs.makeGShared() ~ arbClearTextureLoader;

// ARB_clip_control <-- Core in GL 4.5
enum ARB_clip_control = "GL_ARB_clip_control";
enum arbClipControlDecls =
q{
enum : uint
{
    GL_NEGATIVE_ONE_TO_ONE            = 0x935E,
    GL_ZERO_TO_ONE                    = 0x935F,
    GL_CLIP_ORIGIN                    = 0x935C,
    GL_CLIP_DEPTH_MODE                = 0x935D,
}
extern(System) @nogc nothrow alias da_glClipControl = void function(GLenum,GLenum);
};

enum arbClipControlFuncs = `da_glClipControl glClipControl;`;
enum arbClipControlLoaderImpl = `bindGLFunc(cast(void**)&glClipControl, "glClipControl");`;
enum arbClipControlLoader = makeLoader(ARB_clip_control, arbClipControlLoaderImpl, "gl45");
static if(!usingContexts) enum arbClipControl = arbClipControlDecls ~ arbClipControlFuncs.makeGShared() ~ arbClipControlLoader;

// ARB_compressed_texture_pixel_storage <-- Core in GL 4.2
enum ARB_compressed_texture_pixel_storage = "GL_ARB_compressed_texture_pixel_storage";
enum arbCompressedTexturePixelStorageDecls =
q{
enum : uint
{
    GL_UNPACK_COMPRESSED_BLOCK_WIDTH  = 0x9127,
    GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128,
    GL_UNPACK_COMPRESSED_BLOCK_DEPTH  = 0x9129,
    GL_UNPACK_COMPRESSED_BLOCK_SIZE   = 0x912A,
    GL_PACK_COMPRESSED_BLOCK_WIDTH    = 0x912B,
    GL_PACK_COMPRESSED_BLOCK_HEIGHT   = 0x912C,
    GL_PACK_COMPRESSED_BLOCK_DEPTH    = 0x912D,
    GL_PACK_COMPRESSED_BLOCK_SIZE     = 0x912E,
}};

enum arbCompressedTexturePixelStorageLoader = makeLoader(ARB_compressed_texture_pixel_storage, "", "gl42");
static if(!usingContexts) enum arbCompressedTexturePixelStorage = arbCompressedTexturePixelStorageDecls ~ arbCompressedTexturePixelStorageLoader;

// ARB_compute_shader <-- Core in GL 4.3
enum ARB_compute_shader = "GL_ARB_compute_shader";
enum arbComputeShaderDecls =
q{
enum : uint
{
    GL_COMPUTE_SHADER                 = 0x91B9,
    GL_MAX_COMPUTE_UNIFORM_BLOCKS     = 0x91BB,
    GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC,
    GL_MAX_COMPUTE_IMAGE_UNIFORMS     = 0x91BD,
    GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262,
    GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263,
    GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
    GL_MAX_COMPUTE_ATOMIC_COUNTERS    = 0x8265,
    GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
    GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS  = 0x90EB,
    GL_MAX_COMPUTE_WORK_GROUP_COUNT   = 0x91BE,
    GL_MAX_COMPUTE_WORK_GROUP_SIZE    = 0x91BF,
    GL_COMPUTE_WORK_GROUP_SIZE        = 0x8267,
    GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
    GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
    GL_DISPATCH_INDIRECT_BUFFER       = 0x90EE,
    GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
    GL_COMPUTE_SHADER_BIT             = 0x00000020,
}
extern(System) @nogc nothrow {
    alias da_glDispatchCompute = void function(GLuint,GLuint,GLuint);
    alias da_glDispatchComputeIndirect = void function(GLintptr);
}};

enum arbComputeShaderFuncs =
q{
    da_glDispatchCompute glDispatchCompute;
    da_glDispatchComputeIndirect glDispatchComputeIndirect;
};
enum arbComputeShaderLoaderImpl =
q{
    bindGLFunc(cast(void**)&glDispatchCompute, "glDispatchCompute");
    bindGLFunc(cast(void**)&glDispatchComputeIndirect, "glDispatchComputeIndirect");
};

enum arbComputeShaderLoader = makeLoader(ARB_compute_shader, arbComputeShaderLoaderImpl, "gl43");
static if(!usingContexts) enum arbComputeShader = arbComputeShaderDecls ~ arbComputeShaderFuncs.makeGShared() ~ arbComputeShaderLoader;

// ARB_compute_variable_group_size
enum ARB_compute_variable_group_size = "GL_ARB_compute_variable_group_size";
enum arbComputeVariableGroupSizeDecls =
q{
enum : uint
{
    GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB   = 0x9344,
    GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB      = 0x90EB,
    GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB          = 0x9345,
    GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB             = 0x91BF,
}
extern(System) @nogc nothrow alias da_glDispatchComputeGroupSizeARB = void function(GLuint,GLuint,GLuint,GLuint,GLuint,GLuint);
};

enum arbComputeVariableGroupSizeFuncs = `da_glDispatchComputeGroupSizeARB glDispatchComputeGroupSizeARB;`;
enum arbComputeVariableGroupSizeLoaderImpl = `bindGLFunc(cast(void**)&glDispatchComputeGroupSizeARB, "glDispatchComputeGroupSizeARB");`;
enum arbComputeVariableGroupSizeLoader = makeLoader(ARB_compute_variable_group_size, arbComputeVariableGroupSizeLoaderImpl, "gl45");
static if(!usingContexts) enum arbComputeVariableGroupSize = arbComputeVariableGroupSizeDecls ~ arbComputeVariableGroupSizeFuncs.makeGShared() ~ arbComputeVariableGroupSizeLoader;

// ARB_conditional_render_inverted <-- Core in GL 4.5
enum ARB_conditional_render_inverted = "GL_ARB_conditional_render_inverted";
enum arbConditionalRenderInvertedDecls =
q{
enum : uint
{
    GL_QUERY_WAIT_INVERTED            = 0x8E17,
    GL_QUERY_NO_WAIT_INVERTED         = 0x8E18,
    GL_QUERY_BY_REGION_WAIT_INVERTED  = 0x8E19,
    GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,
}};

enum arbConditionalRenderInvertedLoader = makeLoader(ARB_conditional_render_inverted, "", "gl45");
static if(!usingContexts) enum arbConditionalRenderInverted = arbConditionalRenderInvertedDecls ~ arbConditionalRenderInvertedLoader;

// ARB_conservative_depth <-- Core in GL 4.2
enum ARB_conservative_depth = "GL_ARB_conservative_depth";
enum arbConservativeDepthLoader = makeLoader(ARB_conservative_depth, "", "gl42");
static if(!usingContexts) enum arbConservativeDepth = arbConservativeDepthLoader;

// ARB_copy_buffer <-- Core in Gl 3.1
enum ARB_copy_buffer = "GL_ARB_copy_buffer";
enum arbCopyBufferDecls =
q{
enum : uint
{
    GL_COPY_READ_BUFFER               = 0x8F36,
    GL_COPY_WRITE_BUFFER              = 0x8F37,
}

extern(System) @nogc nothrow alias da_glCopyBufferSubData = void function(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
};

enum arbCopyBufferFuncs =
q{
    da_glCopyBufferSubData glCopyBufferSubData;
};

enum arbCopyBufferLoaderImpl = `bindGLFunc(cast(void**)&glCopyBufferSubData, "glCopyBufferSubData");`;
enum arbCopyBufferLoader = makeLoader(ARB_copy_buffer, arbCopyBufferLoaderImpl, "gl31");
static if(!usingContexts) enum arbCopyBuffer = arbCopyBufferDecls ~ arbCopyBufferFuncs.makeGShared() ~ arbCopyBufferLoader;

// ARB_copy_image <-- Core in GL 4.3
enum ARB_copy_image = "GL_ARB_copy_image";
enum arbCopyImageDecls = `extern(System) @nogc nothrow alias da_glCopyImageSubData = void function(GLuint,GLenum,GLint,GLint,GLint,GLint,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);`;
enum arbCopyImageFuncs = `da_glCopyImageSubData glCopyImageSubData;`;
enum arbCopyImageLoaderImpl = `bindGLFunc(cast(void**)&glCopyImageSubData, "glCopyImageSubData");`;
enum arbCopyImageLoader = makeLoader(ARB_copy_image, arbCopyImageLoaderImpl, "gl43");
static if(!usingContexts) enum arbCopyImage = arbCopyImageDecls ~ arbCopyImageFuncs.makeGShared() ~ arbCopyImageLoader;

// ARB_cull_distance <-- Core in GL 4.5
enum ARB_cull_distance = "GL_ARB_cull_distance";
enum arbCullDistanceDecls =
q{
enum : uint
{
    GL_MAX_CULL_DISTANCES = 0x82F9,
    GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,
}};

enum arbCullDistanceLoader = makeLoader(ARB_cull_distance, "", "gl45");
static if(!usingContexts) enum arbCullDistance = arbCullDistanceDecls ~ arbCullDistanceLoader;