/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.extensions.arb_v;

import derelict.opengl.types : usingContexts;
import derelict.opengl.extensions.internal;

// ARB_vertex_array_bgra <-- Core in GL 3.2
enum ARB_vertex_array_bgra = "GL_ARB_vertex_array_bgra";
enum arbVertexArrayBGRALoader = makeLoader(ARB_vertex_array_bgra, "", "gl32");
static if(!usingContexts) enum arbVertexArrayBGRA = arbVertexArrayBGRALoader;

// ARB_vertex_array_object <-- Core in GL 3.0
enum ARB_vertex_array_object = "GL_ARB_vertex_array_object";
enum arbVertexArrayObjectDecls =
q{
enum uint GL_VERTEX_ARRAY_BINDING = 0x85B5;

extern(System) @nogc nothrow {
    alias da_glBindVertexArray = void function(GLuint);
    alias da_glDeleteVertexArrays = void function(GLsizei, const(GLuint)*);
    alias da_glGenVertexArrays = void function(GLsizei, GLuint*);
    alias da_glIsVertexArray = GLboolean function(GLuint);
}};

enum arbVertexArrayObjectFuncs =
q{
    da_glBindVertexArray glBindVertexArray;
    da_glDeleteVertexArrays glDeleteVertexArrays;
    da_glGenVertexArrays glGenVertexArrays;
    da_glIsVertexArray glIsVertexArray;
};

enum arbVertexArrayObjectLoaderImpl =
q{
    bindGLFunc(cast(void**)&glBindVertexArray, "glBindVertexArray");
    bindGLFunc(cast(void**)&glDeleteVertexArrays, "glDeleteVertexArrays");
    bindGLFunc(cast(void**)&glGenVertexArrays, "glGenVertexArrays");
    bindGLFunc(cast(void**)&glIsVertexArray, "glIsVertexArray");
};

enum arbVertexArrayObjectLoader = makeLoader(ARB_vertex_array_object, arbVertexArrayObjectLoaderImpl, "gl30");
static if(!usingContexts) enum arbVertexArrayObject = arbVertexArrayObjectDecls ~ arbVertexArrayObjectFuncs.makeGShared() ~ arbVertexArrayObjectLoader;

// ARB_vertex_attrib_64bit <-- Core in 4.1
enum ARB_vertex_attrib_64bit = "GL_ARB_vertex_attrib_64bit";
enum arbVertexAttrib64BitDecls =
q{
extern(System) @nogc nothrow {
    alias da_glVertexAttribL1d = void function(GLuint, GLdouble);
    alias da_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
    alias da_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
    alias da_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    alias da_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(GLvoid)*);
    alias da_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
}};

enum arbVertexAttrib64BitFuncs =
q{
    da_glVertexAttribL1d glVertexAttribL1d;
    da_glVertexAttribL2d glVertexAttribL2d;
    da_glVertexAttribL3d glVertexAttribL3d;
    da_glVertexAttribL4d glVertexAttribL4d;
    da_glVertexAttribL1dv glVertexAttribL1dv;
    da_glVertexAttribL2dv glVertexAttribL2dv;
    da_glVertexAttribL3dv glVertexAttribL3dv;
    da_glVertexAttribL4dv glVertexAttribL4dv;
    da_glVertexAttribLPointer glVertexAttribLPointer;
    da_glGetVertexAttribLdv glGetVertexAttribLdv;
};

enum arbVertexAttrib64BitLoaderImpl =
q{
    bindGLFunc(cast(void**)&glVertexAttribL1d, "glVertexAttribL1d");
    bindGLFunc(cast(void**)&glVertexAttribL2d, "glVertexAttribL2d");
    bindGLFunc(cast(void**)&glVertexAttribL3d, "glVertexAttribL3d");
    bindGLFunc(cast(void**)&glVertexAttribL4d, "glVertexAttribL4d");
    bindGLFunc(cast(void**)&glVertexAttribL1dv, "glVertexAttribL1dv");
    bindGLFunc(cast(void**)&glVertexAttribL2dv, "glVertexAttribL2dv");
    bindGLFunc(cast(void**)&glVertexAttribL3dv, "glVertexAttribL3dv");
    bindGLFunc(cast(void**)&glVertexAttribL4dv, "glVertexAttribL4dv");
    bindGLFunc(cast(void**)&glVertexAttribLPointer, "glVertexAttribLPointer");
    bindGLFunc(cast(void**)&glGetVertexAttribLdv, "glGetVertexAttribLdv");
};

enum arbVertexAttrib64BitLoader = makeLoader(ARB_vertex_attrib_64bit, arbVertexAttrib64BitLoaderImpl, "gl41");
static if(!usingContexts) enum arbVertexAttrib64Bit = arbVertexAttrib64BitDecls ~ arbVertexAttrib64BitFuncs.makeGShared() ~ arbVertexAttrib64BitLoader;

// ARB_vertex_attrib_binding <-- Core in GL 4.3
enum ARB_vertex_attrib_binding = "GL_ARB_vertex_attrib_binding";
enum arbVertexAttribBindingDecls =
q{
enum : uint
{
    GL_VERTEX_ATTRIB_BINDING          = 0x82D4,
    GL_VERTEX_ATTRIB_RELATIVE_OFFSET  = 0x82D5,
    GL_VERTEX_BINDING_DIVISOR         = 0x82D6,
    GL_VERTEX_BINDING_OFFSET          = 0x82D7,
    GL_VERTEX_BINDING_STRIDE          = 0x82D8,
    GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
    GL_MAX_VERTEX_ATTRIB_BINDINGS     = 0x82DA,
}
extern(System) @nogc nothrow
{
    alias da_glBindVertexBuffer = void function(GLuint,GLuint,GLintptr,GLsizei);
    alias da_glVertexAttribFormat = void function(GLuint,GLint,GLenum,GLboolean,GLuint);
    alias da_glVertexAttribIFormat = void function(GLuint,GLint,GLenum,GLuint);
    alias da_glVertexAttribLFormat = void function(GLuint,GLint,GLenum,GLuint);
    alias da_glVertexAttribBinding = void function(GLuint,GLuint);
    alias da_glVertexBindingDivisor = void function(GLuint,GLuint);
    alias da_glVertexArrayBindVertexBufferEXT = void function(GLuint,GLuint,GLuint,GLintptr,GLsizei);
    alias da_glVertexArrayVertexAttribFormatEXT = void function(GLuint,GLuint,GLint,GLenum,GLboolean,GLuint);
    alias da_glVertexArrayVertexAttribIFormatEXT = void function(GLuint,GLuint,GLint,GLenum,GLuint);
    alias da_glVertexArrayVertexAttribLFormatEXT = void function(GLuint,GLuint,GLint,GLenum,GLuint);
    alias da_glVertexArrayVertexAttribBindingEXT = void function(GLuint,GLuint,GLuint);
    alias da_glVertexArrayVertexBindingDivisorEXT = void function(GLuint,GLuint,GLuint);
}};

enum arbVertexAttribBindingFuncs =
q{
    da_glBindVertexBuffer glBindVertexBuffer;
    da_glVertexAttribFormat glVertexAttribFormat;
    da_glVertexAttribIFormat glVertexAttribIFormat;
    da_glVertexAttribLFormat glVertexAttribLFormat;
    da_glVertexAttribBinding glVertexAttribBinding;
    da_glVertexBindingDivisor glVertexBindingDivisor;
    da_glVertexArrayBindVertexBufferEXT glVertexArrayBindVertexBufferEXT;
    da_glVertexArrayVertexAttribFormatEXT glVertexArrayVertexAttribFormatEXT;
    da_glVertexArrayVertexAttribIFormatEXT glVertexArrayVertexAttribIFormatEXT;
    da_glVertexArrayVertexAttribLFormatEXT glVertexArrayVertexAttribLFormatEXT;
    da_glVertexArrayVertexAttribBindingEXT glVertexArrayVertexAttribBindingEXT;
    da_glVertexArrayVertexBindingDivisorEXT glVertexArrayVertexBindingDivisorEXT;
};

enum arbVertexAttribBindingLoaderImpl =
q{
    bindGLFunc(cast(void**)&glBindVertexBuffer, "glBindVertexBuffer");
    bindGLFunc(cast(void**)&glVertexAttribFormat, "glVertexAttribFormat");
    bindGLFunc(cast(void**)&glVertexAttribIFormat, "glVertexAttribIFormat");
    bindGLFunc(cast(void**)&glVertexAttribLFormat, "glVertexAttribLFormat");
    bindGLFunc(cast(void**)&glVertexAttribBinding, "glVertexAttribBinding");
    bindGLFunc(cast(void**)&glVertexBindingDivisor, "glVertexBindingDivisor");
    try {
        bindGLFunc(cast(void**)&glVertexArrayBindVertexBufferEXT, "glVertexArrayBindVertexBufferEXT");
        bindGLFunc(cast(void**)&glVertexArrayVertexAttribFormatEXT, "glVertexArrayVertexAttribFormatEXT");
        bindGLFunc(cast(void**)&glVertexArrayVertexAttribIFormatEXT, "glVertexArrayVertexAttribIFormatEXT");
        bindGLFunc(cast(void**)&glVertexArrayVertexAttribLFormatEXT, "glVertexArrayVertexAttribLFormatEXT");
        bindGLFunc(cast(void**)&glVertexArrayVertexAttribBindingEXT, "glVertexArrayVertexAttribBindingEXT");
        bindGLFunc(cast(void**)&glVertexArrayVertexBindingDivisorEXT, "glVertexArrayVertexBindingDivisorEXT");
    }
    catch(Exception e) {}
};

enum arbVertexAttribBindingLoader = makeLoader(ARB_vertex_attrib_binding, arbVertexAttribBindingLoaderImpl, "gl43");
static if(!usingContexts) enum arbVertexAttribBinding = arbVertexAttribBindingDecls ~ arbVertexAttribBindingFuncs.makeGShared() ~ arbVertexAttribBindingLoader;

// ARB_vertex_type_10f_11f_11f_rev <-- Core in GL 4.4
enum ARB_vertex_type_10f_11f_11f_rev = "GL_ARB_vertex_type_10f_11f_11f_rev";
enum arbVertexType10f11f11fRevLoader = makeLoader(ARB_vertex_type_10f_11f_11f_rev, "", "gl44");
static if(!usingContexts) enum arbVertexType10f11f11fRev = arbVertexType10f11f11fRevLoader;

// ARB_vertex_type_2_10_10_10_rev <-- Core in GL 3.3 (but only a few functions)
enum ARB_vertex_type_2_10_10_10_rev = "GL_ARB_vertex_type_2_10_10_10_rev";
enum arbVertexType2101010RevDecls =
q{
enum uint GL_INT_2_10_10_10_REV = 0x8D9F;
extern(System) @nogc nothrow
{
    alias da_glVertexP2ui = void function(GLenum, GLuint);
    alias da_glVertexP2uiv = void function(GLenum, const(GLuint)*);
    alias da_glVertexP3ui = void function(GLenum, GLuint);
    alias da_glVertexP3uiv = void function(GLenum, const(GLuint)*);
    alias da_glVertexP4ui = void function(GLenum, GLuint);
    alias da_glVertexP4uiv = void function(GLenum, const(GLuint)*);
    alias da_glTexCoordP1ui = void function(GLenum, GLuint);
    alias da_glTexCoordP1uiv = void function(GLenum, const(GLuint)*);
    alias da_glTexCoordP2ui = void function(GLenum, GLuint);
    alias da_glTexCoordP2uiv = void function(GLenum, const(GLuint)*);
    alias da_glTexCoordP3ui = void function(GLenum, GLuint);
    alias da_glTexCoordP3uiv = void function(GLenum, const(GLuint)*);
    alias da_glTexCoordP4ui = void function(GLenum, GLuint);
    alias da_glTexCoordP4uiv = void function(GLenum, const(GLuint)*);
    alias da_glMultiTexCoordP1ui = void function(GLenum, GLenum, GLuint);
    alias da_glMultiTexCoordP1uiv = void function(GLenum, GLenum, const(GLuint)*);
    alias da_glMultiTexCoordP2ui = void function(GLenum, GLenum, GLuint);
    alias da_glMultiTexCoordP2uiv = void function(GLenum, GLenum, const(GLuint)*);
    alias da_glMultiTexCoordP3ui = void function(GLenum, GLenum, GLuint);
    alias da_glMultiTexCoordP3uiv = void function(GLenum, GLenum, const(GLuint)*);
    alias da_glMultiTexCoordP4ui = void function(GLenum, GLenum, GLuint);
    alias da_glMultiTexCoordP4uiv = void function(GLenum, GLenum, const(GLuint)*);
    alias da_glNormalP3ui = void function(GLenum, GLuint);
    alias da_glNormalP3uiv = void function(GLenum, const(GLuint)*);
    alias da_glColorP3ui = void function(GLenum, GLuint);
    alias da_glColorP3uiv = void function(GLenum, const(GLuint)*);
    alias da_glColorP4ui = void function(GLenum, GLuint);
    alias da_glColorP4uiv = void function(GLenum, const(GLuint)*);
    alias da_glSecondaryColorP3ui = void function(GLenum, GLuint);
    alias da_glSecondaryColorP3uiv = void function(GLenum, const(GLuint)*);
    alias da_glVertexAttribP1ui = void function(GLuint, GLenum, GLboolean, GLuint);
    alias da_glVertexAttribP1uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
    alias da_glVertexAttribP2ui = void function(GLuint, GLenum, GLboolean, GLuint);
    alias da_glVertexAttribP2uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
    alias da_glVertexAttribP3ui = void function(GLuint, GLenum, GLboolean, GLuint);
    alias da_glVertexAttribP3uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
    alias da_glVertexAttribP4ui = void function(GLuint, GLenum, GLboolean, GLuint);
    alias da_glVertexAttribP4uiv = void function(GLuint, GLenum, GLboolean, const(GLuint)*);
}};

enum arbVertexType2101010RevFuncs =
q{
    da_glVertexP2ui glVertexP2ui;
    da_glVertexP2uiv glVertexP2uiv;
    da_glVertexP3ui glVertexP3ui;
    da_glVertexP3uiv glVertexP3uiv;
    da_glVertexP4ui glVertexP4ui;
    da_glVertexP4uiv glVertexP4uiv;
    da_glTexCoordP1ui glTexCoordP1ui;
    da_glTexCoordP1uiv glTexCoordP1uiv;
    da_glTexCoordP2ui glTexCoordP2ui;
    da_glTexCoordP2uiv glTexCoordP2uiv;
    da_glTexCoordP3ui glTexCoordP3ui;
    da_glTexCoordP3uiv glTexCoordP3uiv;
    da_glTexCoordP4ui glTexCoordP4ui;
    da_glTexCoordP4uiv glTexCoordP4uiv;
    da_glMultiTexCoordP1ui glMultiTexCoordP1ui;
    da_glMultiTexCoordP1uiv glMultiTexCoordP1uiv;
    da_glMultiTexCoordP2ui glMultiTexCoordP2ui;
    da_glMultiTexCoordP2uiv glMultiTexCoordP2uiv;
    da_glMultiTexCoordP3ui glMultiTexCoordP3ui;
    da_glMultiTexCoordP3uiv glMultiTexCoordP3uiv;
    da_glMultiTexCoordP4ui glMultiTexCoordP4ui;
    da_glMultiTexCoordP4uiv glMultiTexCoordP4uiv;
    da_glNormalP3ui glNormalP3ui;
    da_glNormalP3uiv glNormalP3uiv;
    da_glColorP3ui glColorP3ui;
    da_glColorP3uiv glColorP3uiv;
    da_glColorP4ui glColorP4ui;
    da_glColorP4uiv glColorP4uiv;
    da_glSecondaryColorP3ui glSecondaryColorP3ui;
    da_glSecondaryColorP3uiv glSecondaryColorP3uiv;
    da_glVertexAttribP1ui glVertexAttribP1ui;
    da_glVertexAttribP1uiv glVertexAttribP1uiv;
    da_glVertexAttribP2ui glVertexAttribP2ui;
    da_glVertexAttribP2uiv glVertexAttribP2uiv;
    da_glVertexAttribP3ui glVertexAttribP3ui;
    da_glVertexAttribP3uiv glVertexAttribP3uiv;
    da_glVertexAttribP4ui glVertexAttribP4ui;
    da_glVertexAttribP4uiv glVertexAttribP4uiv;
};

enum arbVertexType2101010RevLoaderImpl =
q{
    // Don't recall why this conditional is here...
    // Now I do! These are not actually part of the core. Only
    // the VertexAttribP stuff is. Need to figure out how to
    // load these separately as an extension in the new architecture...
    import derelict.util.system;
    static if(!Derelict_OS_Mac) {
        bindGLFunc(cast(void**)&glVertexP2ui, "glVertexP2ui");
        bindGLFunc(cast(void**)&glVertexP2uiv, "glVertexP2uiv");
        bindGLFunc(cast(void**)&glVertexP3ui, "glVertexP3ui");
        bindGLFunc(cast(void**)&glVertexP3uiv, "glVertexP3uiv");
        bindGLFunc(cast(void**)&glVertexP4ui, "glVertexP4ui");
        bindGLFunc(cast(void**)&glVertexP4uiv, "glVertexP4uiv");
        bindGLFunc(cast(void**)&glTexCoordP1ui, "glTexCoordP1ui");
        bindGLFunc(cast(void**)&glTexCoordP1uiv, "glTexCoordP1uiv");
        bindGLFunc(cast(void**)&glTexCoordP2ui, "glTexCoordP2ui");
        bindGLFunc(cast(void**)&glTexCoordP2uiv, "glTexCoordP2uiv");
        bindGLFunc(cast(void**)&glTexCoordP3ui, "glTexCoordP3ui");
        bindGLFunc(cast(void**)&glTexCoordP3uiv, "glTexCoordP3uiv");
        bindGLFunc(cast(void**)&glTexCoordP4ui, "glTexCoordP4ui");
        bindGLFunc(cast(void**)&glTexCoordP4uiv, "glTexCoordP4uiv");
        bindGLFunc(cast(void**)&glMultiTexCoordP1ui, "glMultiTexCoordP1ui");
        bindGLFunc(cast(void**)&glMultiTexCoordP1uiv, "glMultiTexCoordP1uiv");
        bindGLFunc(cast(void**)&glMultiTexCoordP2ui, "glMultiTexCoordP2ui");
        bindGLFunc(cast(void**)&glMultiTexCoordP2uiv, "glMultiTexCoordP2uiv");
        bindGLFunc(cast(void**)&glMultiTexCoordP3ui, "glMultiTexCoordP3ui");
        bindGLFunc(cast(void**)&glMultiTexCoordP3uiv, "glMultiTexCoordP3uiv");
        bindGLFunc(cast(void**)&glMultiTexCoordP4ui, "glMultiTexCoordP4ui");
        bindGLFunc(cast(void**)&glMultiTexCoordP4uiv, "glMultiTexCoordP4uiv");
        bindGLFunc(cast(void**)&glNormalP3ui, "glNormalP3ui");
        bindGLFunc(cast(void**)&glNormalP3uiv, "glNormalP3uiv");
        bindGLFunc(cast(void**)&glColorP3ui, "glColorP3ui");
        bindGLFunc(cast(void**)&glColorP3uiv, "glColorP3uiv");
        bindGLFunc(cast(void**)&glColorP4ui, "glColorP4ui");
        bindGLFunc(cast(void**)&glColorP4uiv, "glColorP4uiv");
        bindGLFunc(cast(void**)&glSecondaryColorP3ui, "glSecondaryColorP3ui");
        bindGLFunc(cast(void**)&glSecondaryColorP3uiv, "glSecondaryColorP3uiv");
    }
    bindGLFunc(cast(void**)&glVertexAttribP1ui, "glVertexAttribP1ui");
    bindGLFunc(cast(void**)&glVertexAttribP1uiv, "glVertexAttribP1uiv");
    bindGLFunc(cast(void**)&glVertexAttribP2ui, "glVertexAttribP2ui");
    bindGLFunc(cast(void**)&glVertexAttribP2uiv, "glVertexAttribP2uiv");
    bindGLFunc(cast(void**)&glVertexAttribP3ui, "glVertexAttribP3ui");
    bindGLFunc(cast(void**)&glVertexAttribP3uiv, "glVertexAttribP3uiv");
    bindGLFunc(cast(void**)&glVertexAttribP4ui, "glVertexAttribP4ui");
    bindGLFunc(cast(void**)&glVertexAttribP4uiv, "glVertexAttribP4uiv");
};

enum arbVertexType2101010RevLoader = makeLoader(ARB_vertex_type_2_10_10_10_rev, arbVertexType2101010RevLoaderImpl, "gl33");
static if(!usingContexts) enum arbVertexType2101010Rev = arbVertexType2101010RevDecls ~ arbVertexType2101010RevFuncs.makeGShared() ~ arbVertexType2101010RevLoader;

// ARB_viewport_array <-- Core in GL 4.1
enum ARB_viewport_array = "GL_ARB_viewport_array";
enum arbViewportArrayDecls =
q{
enum : uint
{
    GL_MAX_VIEWPORTS                  = 0x825B,
    GL_VIEWPORT_SUBPIXEL_BITS         = 0x825C,
    GL_VIEWPORT_BOUNDS_RANGE          = 0x825D,
    GL_LAYER_PROVOKING_VERTEX         = 0x825E,
    GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
    GL_UNDEFINED_VERTEX               = 0x8260,
}
extern(System) @nogc nothrow {
    alias da_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
    alias da_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    alias da_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
    alias da_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
    alias da_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
    alias da_glScissorIndexedv = void function(GLuint, const(GLint)*);
    alias da_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLclampd)*);
    alias da_glDepthRangeIndexed = void function(GLuint, GLclampd, GLclampd);
    alias da_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
    alias da_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
}};

enum arbViewportArrayFuncs =
q{
    da_glViewportArrayv glViewportArrayv;
    da_glViewportIndexedf glViewportIndexedf;
    da_glViewportIndexedfv glViewportIndexedfv;
    da_glScissorArrayv glScissorArrayv;
    da_glScissorIndexed glScissorIndexed;
    da_glScissorIndexedv glScissorIndexedv;
    da_glDepthRangeArrayv glDepthRangeArrayv;
    da_glDepthRangeIndexed glDepthRangeIndexed;
    da_glGetFloati_v glGetFloati_v;
    da_glGetDoublei_v glGetDoublei_v;
};

enum arbViewportArrayLoaderImpl =
q{
    bindGLFunc(cast(void**)&glViewportArrayv, "glViewportArrayv");
    bindGLFunc(cast(void**)&glViewportIndexedf, "glViewportIndexedf");
    bindGLFunc(cast(void**)&glViewportIndexedfv, "glViewportIndexedfv");
    bindGLFunc(cast(void**)&glScissorArrayv, "glScissorArrayv");
    bindGLFunc(cast(void**)&glScissorIndexed, "glScissorIndexed");
    bindGLFunc(cast(void**)&glScissorIndexedv, "glScissorIndexedv");
    bindGLFunc(cast(void**)&glDepthRangeArrayv, "glDepthRangeArrayv");
    bindGLFunc(cast(void**)&glDepthRangeIndexed, "glDepthRangeIndexed");
    bindGLFunc(cast(void**)&glGetFloati_v, "glGetFloati_v");
    bindGLFunc(cast(void**)&glGetDoublei_v, "glGetDoublei_v");
};

enum arbViewportArrayLoader = makeLoader(ARB_viewport_array, arbViewportArrayLoaderImpl, "gl41");
static if(!usingContexts) enum arbViewportArray = arbViewportArrayDecls ~ arbViewportArrayFuncs.makeGShared() ~ arbViewportArrayLoader;