/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.extensions.core_41;

import derelict.opengl.types : usingContexts;
import derelict.opengl.extensions.internal;

// ARB_ES2_compatibility
enum ARB_ES2_compatibility = "GL_ARB_ES2_compatibility";
enum arbES2CompatibilityDecls =
q{
enum : uint
{
    GL_FIXED                          = 0x140C,
    GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A,
    GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
    GL_LOW_FLOAT                      = 0x8DF0,
    GL_MEDIUM_FLOAT                   = 0x8DF1,
    GL_HIGH_FLOAT                     = 0x8DF2,
    GL_LOW_INT                        = 0x8DF3,
    GL_MEDIUM_INT                     = 0x8DF4,
    GL_HIGH_INT                       = 0x8DF5,
    GL_SHADER_COMPILER                = 0x8DFA,
    GL_NUM_SHADER_BINARY_FORMATS      = 0x8DF9,
    GL_MAX_VERTEX_UNIFORM_VECTORS     = 0x8DFB,
    GL_MAX_VARYING_VECTORS            = 0x8DFC,
    GL_MAX_FRAGMENT_UNIFORM_VECTORS   = 0x8DFD,
}
extern(System) @nogc nothrow {
    alias da_glReleaseShaderCompiler = void function();
    alias da_glShaderBinary = void function(GLsizei, const(GLuint)*, GLenum, const(GLvoid)*, GLsizei);
    alias da_glGetShaderPrecisionFormat = void function(GLenum, GLenum, GLint*, GLint*);
    alias da_glDepthRangef = void function(GLclampf, GLclampf);
    alias da_glClearDepthf = void function(GLclampf);
}};

enum arbES2CompatibilityFuncs =
q{
    da_glReleaseShaderCompiler glReleaseShaderCompiler;
    da_glShaderBinary glShaderBinary;
    da_glGetShaderPrecisionFormat glGetShaderPrecisionFormat;
    da_glDepthRangef glDepthRangef;
    da_glClearDepthf glClearDepthf;
};

enum arbES2CompatibilityLoaderImpl =
q{
    bindGLFunc(cast(void**)&glReleaseShaderCompiler, "glReleaseShaderCompiler");
    bindGLFunc(cast(void**)&glShaderBinary, "glShaderBinary");
    bindGLFunc(cast(void**)&glGetShaderPrecisionFormat, "glGetShaderPrecisionFormat");
    bindGLFunc(cast(void**)&glDepthRangef, "glDepthRangef");
    bindGLFunc(cast(void**)&glClearDepthf, "glClearDepthf");
};

enum arbES2CompatibilityLoader = makeLoader(ARB_ES2_compatibility, arbES2CompatibilityLoaderImpl, "gl41");
static if(!usingContexts) enum arbES2Compatibility = arbES2CompatibilityDecls ~ arbES2CompatibilityFuncs.makeGShared() ~ arbES2CompatibilityLoader;

// ARB_get_program_binary
enum ARB_get_program_binary = "GL_ARB_get_program_binary";
enum arbGetProgramBinaryDecls =
q{
enum : uint
{
    GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257,
    GL_PROGRAM_BINARY_LENGTH          = 0x8741,
    GL_NUM_PROGRAM_BINARY_FORMATS     = 0x87FE,
    GL_PROGRAM_BINARY_FORMATS         = 0x87FF,
}
extern(System) @nogc nothrow {
    alias da_glGetProgramBinary = void function(GLuint, GLsizei, GLsizei*, GLenum*, GLvoid*);
    alias da_glProgramBinary = void function(GLuint, GLenum, const(GLvoid)*, GLsizei);
    alias da_glProgramParameteri = void function(GLuint, GLenum, GLint);
}};

enum arbGetProgramBinaryFuncs =
q{
    da_glGetProgramBinary glGetProgramBinary;
    da_glProgramBinary glProgramBinary;
    da_glProgramParameteri glProgramParameteri;
};

enum arbGetProgramBinaryLoaderImpl =
q{
    bindGLFunc(cast(void**)&glGetProgramBinary, "glGetProgramBinary");
    bindGLFunc(cast(void**)&glProgramBinary, "glProgramBinary");
    bindGLFunc(cast(void**)&glProgramParameteri, "glProgramParameteri");
};

enum arbGetProgramBinaryLoader = makeLoader(ARB_get_program_binary, arbGetProgramBinaryLoaderImpl, "gl41");
static if(!usingContexts) enum arbGetProgramBinary = arbGetProgramBinaryDecls ~ arbGetProgramBinaryFuncs.makeGShared() ~ arbGetProgramBinaryLoader;

// ARB_separate_shader_objects
enum ARB_separate_shader_objects = "GL_ARB_separate_shader_objects";
enum arbSeparateShaderObjectsDecls =
q{
enum : uint
{
    GL_VERTEX_SHADER_BIT              = 0x00000001,
    GL_FRAGMENT_SHADER_BIT            = 0x00000002,
    GL_GEOMETRY_SHADER_BIT            = 0x00000004,
    GL_TESS_CONTROL_SHADER_BIT        = 0x00000008,
    GL_TESS_EVALUATION_SHADER_BIT     = 0x00000010,
    GL_ALL_SHADER_BITS                = 0xFFFFFFFF,
    GL_PROGRAM_SEPARABLE              = 0x8258,
    GL_ACTIVE_PROGRAM                 = 0x8259,
    GL_PROGRAM_PIPELINE_BINDING       = 0x825A,
}
extern(System) @nogc nothrow {
    alias da_glUseProgramStages = void function(GLuint, GLbitfield, GLuint);
    alias da_glActiveShaderProgram = void function(GLuint, GLuint);
    alias da_glCreateShaderProgramv = GLuint function(GLenum, GLsizei, const(GLchar*)*);
    alias da_glBindProgramPipeline = void function(GLuint);
    alias da_glDeleteProgramPipelines = void function(GLsizei, const(GLuint)*);
    alias da_glGenProgramPipelines = void function(GLsizei, GLuint*);
    alias da_glIsProgramPipeline = GLboolean function(GLuint);
    alias da_glGetProgramPipelineiv = void function(GLuint, GLenum, GLint*);
    alias da_glProgramUniform1i = void function(GLuint, GLint, GLint);
    alias da_glProgramUniform1iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
    alias da_glProgramUniform1f = void function(GLuint, GLint, GLfloat);
    alias da_glProgramUniform1fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
    alias da_glProgramUniform1d = void function(GLuint, GLint, GLdouble);
    alias da_glProgramUniform1dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
    alias da_glProgramUniform1ui = void function(GLuint, GLint, GLuint);
    alias da_glProgramUniform1uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
    alias da_glProgramUniform2i = void function(GLuint, GLint, GLint, GLint);
    alias da_glProgramUniform2iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
    alias da_glProgramUniform2f = void function(GLuint, GLint, GLfloat, GLfloat);
    alias da_glProgramUniform2fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
    alias da_glProgramUniform2d = void function(GLuint, GLint, GLdouble, GLdouble);
    alias da_glProgramUniform2dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
    alias da_glProgramUniform2ui = void function(GLuint, GLint, GLuint, GLuint);
    alias da_glProgramUniform2uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
    alias da_glProgramUniform3i = void function(GLuint, GLint, GLint, GLint, GLint);
    alias da_glProgramUniform3iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
    alias da_glProgramUniform3f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    alias da_glProgramUniform3fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
    alias da_glProgramUniform3d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    alias da_glProgramUniform3dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
    alias da_glProgramUniform3ui = void function(GLuint, GLint, GLuint, GLuint, GLuint);
    alias da_glProgramUniform3uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
    alias da_glProgramUniform4i = void function(GLuint, GLint, GLint, GLint, GLint, GLint);
    alias da_glProgramUniform4iv = void function(GLuint, GLint, GLsizei, const(GLint)*);
    alias da_glProgramUniform4f = void function(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    alias da_glProgramUniform4fv = void function(GLuint, GLint, GLsizei, const(GLfloat)*);
    alias da_glProgramUniform4d = void function(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    alias da_glProgramUniform4dv = void function(GLuint, GLint, GLsizei, const(GLdouble)*);
    alias da_glProgramUniform4ui = void function(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    alias da_glProgramUniform4uiv = void function(GLuint, GLint, GLsizei, const(GLuint)*);
    alias da_glProgramUniformMatrix2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix2x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix3x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix2x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix4x2fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix3x4fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix4x3fv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLfloat)*);
    alias da_glProgramUniformMatrix2x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix3x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix2x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix4x2dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix3x4dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glProgramUniformMatrix4x3dv = void function(GLuint, GLint, GLsizei, GLboolean, const(GLdouble)*);
    alias da_glValidateProgramPipeline = void function(GLuint);
    alias da_glGetProgramPipelineInfoLog = void function(GLuint, GLsizei, GLsizei*, GLchar*);
}};

enum arbSeparateShaderObjectsFuncs =
q{
    da_glUseProgramStages glUseProgramStages;
    da_glActiveShaderProgram glActiveShaderProgram;
    da_glCreateShaderProgramv glCreateShaderProgramv;
    da_glBindProgramPipeline glBindProgramPipeline;
    da_glDeleteProgramPipelines glDeleteProgramPipelines;
    da_glGenProgramPipelines glGenProgramPipelines;
    da_glIsProgramPipeline glIsProgramPipeline;
    da_glGetProgramPipelineiv glGetProgramPipelineiv;
    da_glProgramUniform1i glProgramUniform1i;
    da_glProgramUniform1iv glProgramUniform1iv;
    da_glProgramUniform1f glProgramUniform1f;
    da_glProgramUniform1fv glProgramUniform1fv;
    da_glProgramUniform1d glProgramUniform1d;
    da_glProgramUniform1dv glProgramUniform1dv;
    da_glProgramUniform1ui glProgramUniform1ui;
    da_glProgramUniform1uiv glProgramUniform1uiv;
    da_glProgramUniform2i glProgramUniform2i;
    da_glProgramUniform2iv glProgramUniform2iv;
    da_glProgramUniform2f glProgramUniform2f;
    da_glProgramUniform2fv glProgramUniform2fv;
    da_glProgramUniform2d glProgramUniform2d;
    da_glProgramUniform2dv glProgramUniform2dv;
    da_glProgramUniform2ui glProgramUniform2ui;
    da_glProgramUniform2uiv glProgramUniform2uiv;
    da_glProgramUniform3i glProgramUniform3i;
    da_glProgramUniform3iv glProgramUniform3iv;
    da_glProgramUniform3f glProgramUniform3f;
    da_glProgramUniform3fv glProgramUniform3fv;
    da_glProgramUniform3d glProgramUniform3d;
    da_glProgramUniform3dv glProgramUniform3dv;
    da_glProgramUniform3ui glProgramUniform3ui;
    da_glProgramUniform3uiv glProgramUniform3uiv;
    da_glProgramUniform4i glProgramUniform4i;
    da_glProgramUniform4iv glProgramUniform4iv;
    da_glProgramUniform4f glProgramUniform4f;
    da_glProgramUniform4fv glProgramUniform4fv;
    da_glProgramUniform4d glProgramUniform4d;
    da_glProgramUniform4dv glProgramUniform4dv;
    da_glProgramUniform4ui glProgramUniform4ui;
    da_glProgramUniform4uiv glProgramUniform4uiv;
    da_glProgramUniformMatrix2fv glProgramUniformMatrix2fv;
    da_glProgramUniformMatrix3fv glProgramUniformMatrix3fv;
    da_glProgramUniformMatrix4fv glProgramUniformMatrix4fv;
    da_glProgramUniformMatrix2dv glProgramUniformMatrix2dv;
    da_glProgramUniformMatrix3dv glProgramUniformMatrix3dv;
    da_glProgramUniformMatrix4dv glProgramUniformMatrix4dv;
    da_glProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv;
    da_glProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv;
    da_glProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv;
    da_glProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv;
    da_glProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv;
    da_glProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv;
    da_glProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv;
    da_glProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv;
    da_glProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv;
    da_glProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv;
    da_glProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv;
    da_glProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv;
    da_glValidateProgramPipeline glValidateProgramPipeline;
    da_glGetProgramPipelineInfoLog glGetProgramPipelineInfoLog;
};

enum arbSeparateShaderObjectsLoaderImpl =
q{
    bindGLFunc(cast(void**)&glUseProgramStages, "glUseProgramStages");
    bindGLFunc(cast(void**)&glActiveShaderProgram, "glActiveShaderProgram");
    bindGLFunc(cast(void**)&glCreateShaderProgramv, "glCreateShaderProgramv");
    bindGLFunc(cast(void**)&glBindProgramPipeline, "glBindProgramPipeline");
    bindGLFunc(cast(void**)&glDeleteProgramPipelines, "glDeleteProgramPipelines");
    bindGLFunc(cast(void**)&glGenProgramPipelines, "glGenProgramPipelines");
    bindGLFunc(cast(void**)&glIsProgramPipeline, "glIsProgramPipeline");
    bindGLFunc(cast(void**)&glGetProgramPipelineiv, "glGetProgramPipelineiv");
    bindGLFunc(cast(void**)&glProgramUniform1i, "glProgramUniform1i");
    bindGLFunc(cast(void**)&glProgramUniform1iv, "glProgramUniform1iv");
    bindGLFunc(cast(void**)&glProgramUniform1f, "glProgramUniform1f");
    bindGLFunc(cast(void**)&glProgramUniform1fv, "glProgramUniform1fv");
    bindGLFunc(cast(void**)&glProgramUniform1d, "glProgramUniform1d");
    bindGLFunc(cast(void**)&glProgramUniform1dv, "glProgramUniform1dv");
    bindGLFunc(cast(void**)&glProgramUniform1ui, "glProgramUniform1ui");
    bindGLFunc(cast(void**)&glProgramUniform1uiv, "glProgramUniform1uiv");
    bindGLFunc(cast(void**)&glProgramUniform2i, "glProgramUniform2i");
    bindGLFunc(cast(void**)&glProgramUniform2iv, "glProgramUniform2iv");
    bindGLFunc(cast(void**)&glProgramUniform2f, "glProgramUniform2f");
    bindGLFunc(cast(void**)&glProgramUniform2fv, "glProgramUniform2fv");
    bindGLFunc(cast(void**)&glProgramUniform2d, "glProgramUniform2d");
    bindGLFunc(cast(void**)&glProgramUniform2dv, "glProgramUniform2dv");
    bindGLFunc(cast(void**)&glProgramUniform2ui, "glProgramUniform2ui");
    bindGLFunc(cast(void**)&glProgramUniform2uiv, "glProgramUniform2uiv");
    bindGLFunc(cast(void**)&glProgramUniform3i, "glProgramUniform3i");
    bindGLFunc(cast(void**)&glProgramUniform3iv, "glProgramUniform3iv");
    bindGLFunc(cast(void**)&glProgramUniform3f, "glProgramUniform3f");
    bindGLFunc(cast(void**)&glProgramUniform3fv, "glProgramUniform3fv");
    bindGLFunc(cast(void**)&glProgramUniform3d, "glProgramUniform3d");
    bindGLFunc(cast(void**)&glProgramUniform3dv, "glProgramUniform3dv");
    bindGLFunc(cast(void**)&glProgramUniform3ui, "glProgramUniform3ui");
    bindGLFunc(cast(void**)&glProgramUniform3uiv, "glProgramUniform3uiv");
    bindGLFunc(cast(void**)&glProgramUniform4i, "glProgramUniform4i");
    bindGLFunc(cast(void**)&glProgramUniform4iv, "glProgramUniform4iv");
    bindGLFunc(cast(void**)&glProgramUniform4f, "glProgramUniform4f");
    bindGLFunc(cast(void**)&glProgramUniform4fv, "glProgramUniform4fv");
    bindGLFunc(cast(void**)&glProgramUniform4d, "glProgramUniform4d");
    bindGLFunc(cast(void**)&glProgramUniform4dv, "glProgramUniform4dv");
    bindGLFunc(cast(void**)&glProgramUniform4ui, "glProgramUniform4ui");
    bindGLFunc(cast(void**)&glProgramUniform4uiv, "glProgramUniform4uiv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2fv, "glProgramUniformMatrix2fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3fv, "glProgramUniformMatrix3fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4fv, "glProgramUniformMatrix4fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2dv, "glProgramUniformMatrix2dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3dv, "glProgramUniformMatrix3dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4dv, "glProgramUniformMatrix4dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2x3fv, "glProgramUniformMatrix2x3fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3x2fv, "glProgramUniformMatrix3x2fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2x4fv, "glProgramUniformMatrix2x4fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4x2fv, "glProgramUniformMatrix4x2fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3x4fv, "glProgramUniformMatrix3x4fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4x3fv, "glProgramUniformMatrix4x3fv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2x3dv, "glProgramUniformMatrix2x3dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3x2dv, "glProgramUniformMatrix3x2dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix2x4dv, "glProgramUniformMatrix2x4dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4x2dv, "glProgramUniformMatrix4x2dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix3x4dv, "glProgramUniformMatrix3x4dv");
    bindGLFunc(cast(void**)&glProgramUniformMatrix4x3dv, "glProgramUniformMatrix4x3dv");
    bindGLFunc(cast(void**)&glValidateProgramPipeline, "glValidateProgramPipeline");
    bindGLFunc(cast(void**)&glGetProgramPipelineInfoLog, "glGetProgramPipelineInfoLog");
};

enum arbSeparateShaderObjectsLoader = makeLoader(ARB_separate_shader_objects, arbSeparateShaderObjectsLoaderImpl, "gl41");
static if(!usingContexts) enum arbSeparateShaderObjects = arbSeparateShaderObjectsDecls ~ arbSeparateShaderObjectsFuncs.makeGShared() ~ arbSeparateShaderObjectsLoader;

// ARB_vertex_attrib_64bit
enum ARB_vertex_attrib_64bit = "GL_ARB_vertex_attrib_64bit";
enum arbVertexAttrib64BitDecls =
q{
extern(System) @nogc nothrow {
    alias da_glVertexAttribL1d = void function(GLuint, GLdouble);
    alias da_glVertexAttribL2d = void function(GLuint, GLdouble, GLdouble);
    alias da_glVertexAttribL3d = void function(GLuint, GLdouble, GLdouble, GLdouble);
    alias da_glVertexAttribL4d = void function(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    alias da_glVertexAttribL1dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL2dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL3dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribL4dv = void function(GLuint, const(GLdouble)*);
    alias da_glVertexAttribLPointer = void function(GLuint, GLint, GLenum, GLsizei, const(GLvoid)*);
    alias da_glGetVertexAttribLdv = void function(GLuint, GLenum, GLdouble*);
}};

enum arbVertexAttrib64BitFuncs =
q{
    da_glVertexAttribL1d glVertexAttribL1d;
    da_glVertexAttribL2d glVertexAttribL2d;
    da_glVertexAttribL3d glVertexAttribL3d;
    da_glVertexAttribL4d glVertexAttribL4d;
    da_glVertexAttribL1dv glVertexAttribL1dv;
    da_glVertexAttribL2dv glVertexAttribL2dv;
    da_glVertexAttribL3dv glVertexAttribL3dv;
    da_glVertexAttribL4dv glVertexAttribL4dv;
    da_glVertexAttribLPointer glVertexAttribLPointer;
    da_glGetVertexAttribLdv glGetVertexAttribLdv;
};

enum arbVertexAttrib64BitLoaderImpl =
q{
    bindGLFunc(cast(void**)&glVertexAttribL1d, "glVertexAttribL1d");
    bindGLFunc(cast(void**)&glVertexAttribL2d, "glVertexAttribL2d");
    bindGLFunc(cast(void**)&glVertexAttribL3d, "glVertexAttribL3d");
    bindGLFunc(cast(void**)&glVertexAttribL4d, "glVertexAttribL4d");
    bindGLFunc(cast(void**)&glVertexAttribL1dv, "glVertexAttribL1dv");
    bindGLFunc(cast(void**)&glVertexAttribL2dv, "glVertexAttribL2dv");
    bindGLFunc(cast(void**)&glVertexAttribL3dv, "glVertexAttribL3dv");
    bindGLFunc(cast(void**)&glVertexAttribL4dv, "glVertexAttribL4dv");
    bindGLFunc(cast(void**)&glVertexAttribLPointer, "glVertexAttribLPointer");
    bindGLFunc(cast(void**)&glGetVertexAttribLdv, "glGetVertexAttribLdv");
};

enum arbVertexAttrib64BitLoader = makeLoader(ARB_vertex_attrib_64bit, arbVertexAttrib64BitLoaderImpl, "gl41");
static if(!usingContexts) enum arbVertexAttrib64Bit = arbVertexAttrib64BitDecls ~ arbVertexAttrib64BitFuncs.makeGShared() ~ arbVertexAttrib64BitLoader;

// ARB_viewport_array
enum ARB_viewport_array = "GL_ARB_viewport_array";
enum arbViewportArrayDecls =
q{
enum : uint
{
    GL_MAX_VIEWPORTS                  = 0x825B,
    GL_VIEWPORT_SUBPIXEL_BITS         = 0x825C,
    GL_VIEWPORT_BOUNDS_RANGE          = 0x825D,
    GL_LAYER_PROVOKING_VERTEX         = 0x825E,
    GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F,
    GL_UNDEFINED_VERTEX               = 0x8260,
}
extern(System) @nogc nothrow {
    alias da_glViewportArrayv = void function(GLuint, GLsizei, const(GLfloat)*);
    alias da_glViewportIndexedf = void function(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    alias da_glViewportIndexedfv = void function(GLuint, const(GLfloat)*);
    alias da_glScissorArrayv = void function(GLuint, GLsizei, const(GLint)*);
    alias da_glScissorIndexed = void function(GLuint, GLint, GLint, GLsizei, GLsizei);
    alias da_glScissorIndexedv = void function(GLuint, const(GLint)*);
    alias da_glDepthRangeArrayv = void function(GLuint, GLsizei, const(GLclampd)*);
    alias da_glDepthRangeIndexed = void function(GLuint, GLclampd, GLclampd);
    alias da_glGetFloati_v = void function(GLenum, GLuint, GLfloat*);
    alias da_glGetDoublei_v = void function(GLenum, GLuint, GLdouble*);
}};

enum arbViewportArrayFuncs =
q{
    da_glViewportArrayv glViewportArrayv;
    da_glViewportIndexedf glViewportIndexedf;
    da_glViewportIndexedfv glViewportIndexedfv;
    da_glScissorArrayv glScissorArrayv;
    da_glScissorIndexed glScissorIndexed;
    da_glScissorIndexedv glScissorIndexedv;
    da_glDepthRangeArrayv glDepthRangeArrayv;
    da_glDepthRangeIndexed glDepthRangeIndexed;
    da_glGetFloati_v glGetFloati_v;
    da_glGetDoublei_v glGetDoublei_v;
};

enum arbViewportArrayLoaderImpl =
q{
    bindGLFunc(cast(void**)&glViewportArrayv, "glViewportArrayv");
    bindGLFunc(cast(void**)&glViewportIndexedf, "glViewportIndexedf");
    bindGLFunc(cast(void**)&glViewportIndexedfv, "glViewportIndexedfv");
    bindGLFunc(cast(void**)&glScissorArrayv, "glScissorArrayv");
    bindGLFunc(cast(void**)&glScissorIndexed, "glScissorIndexed");
    bindGLFunc(cast(void**)&glScissorIndexedv, "glScissorIndexedv");
    bindGLFunc(cast(void**)&glDepthRangeArrayv, "glDepthRangeArrayv");
    bindGLFunc(cast(void**)&glDepthRangeIndexed, "glDepthRangeIndexed");
    bindGLFunc(cast(void**)&glGetFloati_v, "glGetFloati_v");
    bindGLFunc(cast(void**)&glGetDoublei_v, "glGetDoublei_v");
};

enum arbViewportArrayLoader = makeLoader(ARB_viewport_array, arbViewportArrayLoaderImpl, "gl41");
static if(!usingContexts) enum arbViewportArray = arbViewportArrayDecls ~ arbViewportArrayFuncs.makeGShared() ~ arbViewportArrayLoader;

enum corearb41Decls = arbES2CompatibilityDecls ~ arbGetProgramBinaryDecls ~ arbSeparateShaderObjectsDecls
        ~ arbVertexAttrib64BitDecls ~ arbViewportArrayDecls;
enum corearb41Funcs = arbES2CompatibilityFuncs ~ arbGetProgramBinaryFuncs ~ arbSeparateShaderObjectsFuncs
        ~ arbVertexAttrib64BitFuncs ~ arbViewportArrayFuncs;
enum corearb41Loader = arbES2CompatibilityLoader ~ arbGetProgramBinaryLoader ~ arbSeparateShaderObjectsLoader
        ~ arbVertexAttrib64BitLoader ~ arbViewportArrayLoader;