/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.glloader;

import std.array;
import derelict.util.system;
import derelict.opengl.gl,
       derelict.opengl.types : GLVersion, usingContexts;

private alias ExtLoaderFunc = bool function(ref GLLoader loader, bool doThrow);
private struct ExtLoader
{
    string name;
    ExtLoaderFunc load;
}

struct GLLoader
{
    static if(!usingContexts) {
        private static ExtLoader[][int] _extLoaders;
        static void registerExtensionLoader(string name, ExtLoaderFunc loader, GLVersion glVersion)
        {
            ExtLoader[] loaders;
            if(auto parr = (glVersion in _extLoaders))
                loaders = *parr;
            loaders ~= ExtLoader(name, loader);
            _extLoaders[glVersion] = loaders;
        }

        void loadExtensionSet(int glVersion, bool doThrow)
        {
            ExtLoader[] loaders;
            if(auto parr = (glVersion in _extLoaders))
                loaders = *parr;
            else return;

            foreach(ref loader; loaders) {
                if(!isExtensionLoaded(loader.name)) {
                    auto ret = loader.load(this, doThrow);

                    // Only set the extension state to true if really
                    // loading as an extension and not as part of the
                    // core. doThrow will be false in the former case.
                    if(!doThrow) _extState[loader.name] = ret;
                }
            }
        }
    }

    this(GLVersion delegate() base, GLVersion delegate() extra)
    {
        _baseLoader = base;
        _extraLoader = extra;
    }

    void loadBase()
    {
        _loadedVersion = _baseLoader();

        if(!getString)
            DerelictGL3.bindFunc(cast(void**)&getString, "glGetString");
        if(!getIntegerv)
            DerelictGL3.bindFunc(cast(void**)&getIntegerv, "glGetIntegerv");
        if(!getCurrentContext)
            DerelictGL3.bindFunc(cast(void**)&getCurrentContext, getCurrentContextName);
        static if(!Derelict_OS_Mac) {
            if(!getProcAddress)
                DerelictGL3.bindFunc(cast(void**)&getProcAddress, getProcAddressName);
        }
    }

    GLVersion loadExtra()
    {
        import std.string : format;
        import derelict.util.exception : DerelictException;

        // Make sure a context is active, otherwise this could be meaningless.
        if(!getCurrentContext())
            throw new DerelictException("DerelictGL3.reload failure: An OpenGL context is not currently active.");

        _contextVersion = getContextVersion();

        if(_contextVersion >= GLVersion.gl30) {
            bindGLFunc(cast(void**)&_getStringi, "glGetStringi");
            initExtCache();
        }

        _loadedVersion = _extraLoader();

        static if(!usingContexts) {
            int[] versions = [
            GLVersion.gl30, GLVersion.gl31, GLVersion.gl32, GLVersion.gl33,
            GLVersion.gl40, GLVersion.gl41, GLVersion.gl42, GLVersion.gl43,
            GLVersion.gl44, GLVersion.gl45
            ];

            foreach(ver; versions) {
                if(ver > loadedVersion)
                    loadExtensionSet(ver, false);
            }
            loadExtensionSet(GLVersion.none, false);
        }

        return _loadedVersion;
    }

    bool isExtensionLoaded(string name)
    {
        if(auto state = (name in _extState)) return *state;
        else return false;
    }

    bool isExtensionSupported(string name)
    {
        import core.stdc.string : strcmp, strstr;

        // With a modern context, use the modern approach.
        if(_contextVersion >= GLVersion.gl30) {
            foreach(extname; _extCache.data) {
                if(extname && strcmp(extname, name.ptr) == 0)
                    return true;
            }
            return false;
        }
        // Otherwise, use the classic approach.
        else {
            auto extstr = getString(glExtensions);
            // TODO Throw an exception here? Perhaps a 'NoExtensionStringException'.
            if(!extstr) return false;

            auto res = strstr(extstr, name.ptr);
            while(res) {
                /* It's possible that the extension name is actually a substring of
                 another extension. If not, then the character following the name in
                 the extension string should be a space (or possibly the null character).
                */
                if(res[name.length] == ' ' || res[name.length] == '\0')
                    return true;
                res = strstr(res + name.length, name.ptr);
            }
            return false;
        }
    }

    void setExtensionState(string name, bool state)
    {
        _extState[name] = state;
    }

    void bindGLFunc(void** ptr, string symName)
    {
        static if(Derelict_OS_Mac) {
            return DerelictGL3.bindFunc(ptr, symName);
        }
        else {
            import derelict.util.exception : SymbolLoadException;
            
            auto sym = getProcAddress(symName.ptr);
            if(!sym)
                throw new SymbolLoadException("Failed to load OpenGL symbol [" ~ symName ~ "]");
            *ptr = sym;
        }
    }

    @property @nogc nothrow {
        GLVersion contextVersion() { return _contextVersion; }
        GLVersion loadedVersion() { return _loadedVersion; }
    }

private:
    GLVersion delegate() _baseLoader;
    GLVersion delegate() _extraLoader;
    da_getStringi _getStringi;
    Appender!(const(char)*[]) _extCache;
    bool[string] _extState;
    GLVersion _contextVersion;
    GLVersion _loadedVersion;

    GLVersion getContextVersion()
    {
        /* glGetString(GL_VERSION) is guaranteed to return a constant string
         of the format "[major].[minor].[build] xxxx", where xxxx is vendor-specific
         information. Here, I'm pulling two characters out of the string, the major
         and minor version numbers. */
        auto verstr = getString(glVersion);
        char major = *verstr;
        char minor = *(verstr + 2);

        switch(major) {
            case '4':
                if(minor == '5') return GLVersion.gl45;
                else if(minor == '4') return GLVersion.gl44;
                else if(minor == '3') return GLVersion.gl43;
                else if(minor == '2') return GLVersion.gl42;
                else if(minor == '1') return GLVersion.gl41;
                else if(minor == '0') return GLVersion.gl40;

                /* No default condition here, since it's possible for new
                 minor versions of the 4.x series to be released before
                 support is added to Derelict. That case is handled outside
                 of the switch. When no more 4.x versions are released, this
                 should be changed to return GL40 by default. */
                break;

            case '3':
                if(minor == '3') return GLVersion.gl33;
                else if(minor == '2') return GLVersion.gl32;
                else if(minor == '1') return GLVersion.gl31;
                else return GLVersion.gl30;

            case '2':
                if(minor == '1') return GLVersion.gl21;
                else return GLVersion.gl20;

            case '1':
                if(minor == '5') return GLVersion.gl15;
                else if(minor == '4') return GLVersion.gl14;
                else if(minor == '3') return GLVersion.gl13;
                else if(minor == '2') return GLVersion.gl12;
                else return GLVersion.gl11;

            default:
                /* glGetString(GL_VERSION) is guaranteed to return a result
                 of a specific format, so if this point is reached it is
                 going to be because a major version higher than what Derelict
                 supports was encountered. That case is handled outside the
                 switch. */
                break;
        }

        /* It's highly likely at this point that the version is higher than
         what Derelict supports, so return the highest supported version. */
        return GLVersion.highestSupported;
    }

    void initExtCache()
    {
        /* The modern style of using glStringi to check for extensions
         results in a high number of calls when testing for numerous
         extensions. This can cause extreme slowdowns in some cases,
         such as when using GLSL-Debugger. The extension cache solves
         that problem.
        */
        int count;
        getIntegerv(glNumExtensions, &count);

        _extCache.shrinkTo(0);
        _extCache.reserve(count);

        const(char)* extname;
        for(int i=0; i<count; ++i) {
            extname = _getStringi(glExtensions, i);
            if(extname) _extCache.put(extname);
        }
    }
}

private:
    enum uint glVersion = 0x1F02;
    enum uint glExtensions = 0x1F03;
    enum uint glNumExtensions = 0x821D;
    extern(System) @nogc nothrow {
        alias da_getString = const(char)* function(uint);
        alias da_getIntegerv = void function(uint, int*);
        alias da_getStringi = const(char)* function(uint,uint);
    }
    __gshared {
        da_getString getString;
        da_getIntegerv getIntegerv;
    }

    static if(!Derelict_OS_Mac) {
        extern(System) @nogc nothrow alias da_getProcAddress = void* function(const(char)*);
        __gshared da_getProcAddress getProcAddress;
    }

    extern(System) @nogc nothrow alias da_getCurrentContext = void* function();
    __gshared da_getCurrentContext getCurrentContext;

    static if(Derelict_OS_Windows) {
        enum getProcAddressName = "wglGetProcAddress";
        enum getCurrentContextName = "wglGetCurrentContext";
    }
    else static if(Derelict_OS_Mac) {
        enum getCurrentContextName = "CGLGetCurrentContext";
    }
    else static if(Derelict_OS_Posix) {
        enum getProcAddressName = "glXGetProcAddress";
        enum getCurrentContextName = "glXGetCurrentContext";
    }
