/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.impl;

import derelict.opengl.types;

version(DerelictGL3_Contexts) {
    mixin template glContext(GLVersion core = GLVersion.highestSupported, bool loadDep = false)
    {
        static if(!loadDep) mixin(glImports);
        else mixin(gl_depImports);

        mixin glDecls!(core, loadDep);
        struct GLContext
        {
            mixin glFuncs!(core, loadDep);
            mixin glLoaders!(core, loadDep);
        }
    }
}
else {
    mixin template glFreeFuncs(GLVersion core = GLVersion.highestSupported, bool loadDep = false)
    {
        static if(!loadDep) mixin(glImports);
        else mixin(gl_depImports);

        mixin glDecls!(core, loadDep);
        mixin glFuncs!(core, loadDep);
        mixin glLoaders!(core, loadDep);
    }

    version(DerelictGL3_CustomFreeFuncs) {}
    else mixin glFreeFuncs;
}

enum glImports =
q{
    import derelict.opengl.gl,
           derelict.opengl.glloader,
           derelict.opengl.versions.base,
           derelict.opengl.versions.gl2x,
           derelict.opengl.versions.gl3x,
           derelict.opengl.versions.gl4x;
};

enum gl_depImports =
q{
    import derelict.opengl.gl,
           derelict.opengl.glloader,
           derelict.opengl.versions.base_dep,
           derelict.opengl.versions.gl2x_dep,
           derelict.opengl.versions.gl3x_dep,
           derelict.opengl.versions.gl4x;
};

mixin template glDecls(GLVersion core, bool declDep = false)
{
    static if(!declDep) mixin(gl2Decls);
    else mixin(gl2_depDecls);

    static if(core >= GLVersion.gl30 && !declDep) mixin(gl30Decls);
    else static if(core >= GLVersion.gl30) mixin(gl30_depDecls);
    static if(core >= GLVersion.gl31) mixin(gl31Decls);
    static if(core >= GLVersion.gl32) mixin(gl32Decls);
    static if(core >= GLVersion.gl33) mixin(gl33Decls);
    static if(core >= GLVersion.gl40) mixin(gl40Decls);
    static if(core >= GLVersion.gl41) mixin(gl41Decls);
    static if(core >= GLVersion.gl42) mixin(gl42Decls);
    static if(core >= GLVersion.gl43) mixin(gl43Decls);
    static if(core >= GLVersion.gl44) mixin(gl44Decls);
    static if(core >= GLVersion.gl45) mixin(gl45Decls);
}

mixin template glFuncs(GLVersion core, bool loadDep = false)
{
    static if(!loadDep) mixin(gl2Funcs);
    else mixin(gl2_depFuncs);
    static if(core >= GLVersion.gl30) mixin(gl30Funcs);
    static if(core >= GLVersion.gl31) mixin(gl31Funcs);
    static if(core >= GLVersion.gl32) mixin(gl32Funcs);
    static if(core >= GLVersion.gl33) mixin(gl33Funcs);
    static if(core >= GLVersion.gl40) mixin(gl40Funcs);
    static if(core >= GLVersion.gl41) mixin(gl41Funcs);
    static if(core >= GLVersion.gl42) mixin(gl42Funcs);
    static if(core >= GLVersion.gl43) mixin(gl43Funcs);
    static if(core >= GLVersion.gl44) mixin(gl44Funcs);
    static if(core >= GLVersion.gl45) mixin(gl45Funcs);
}

enum glLoaderDecls =
q{
    version(DerelictGL3_Contexts) alias theLoader = _loader;
    else alias theLoader = DerelictGL3;
    GLVersion glVer = theLoader.loadedVersion;
    GLVersion maxVer = theLoader.contextVersion;
};

mixin template glLoaders(GLVersion core, bool loadDep = false)
{
    version(DerelictGL3_Contexts) {
        private GLLoader _loader;
        GLLoader loader() { return _loader; }
        alias loader this;
        GLVersion load()
        {
            _loader = GLLoader(&loadBaseGL, &loadExtraGL);
            _loader.loadBase();
            _loader.loadExtra();
            return _loader.loadedVersion;
        }
    }
    else {
        struct SetLoader {
            import std.functional : toDelegate;
            import derelict.opengl.glloader;
            static this()
            {
                auto baseDg = toDelegate(&loadBaseGL);
                auto extraDg = toDelegate(&loadExtraGL);
                DerelictGL3.glLoader = GLLoader(baseDg, extraDg);
            }
        }

        static if(core >= GLVersion.gl30) mixin(corearb30Loader);
        static if(core >= GLVersion.gl31) mixin(corearb31Loader);
        static if(core >= GLVersion.gl32) mixin(corearb32Loader);
        static if(core >= GLVersion.gl33) mixin(corearb33Loader);
        static if(core >= GLVersion.gl40) mixin(corearb40Loader);
        static if(core >= GLVersion.gl41) mixin(corearb41Loader);
        static if(core >= GLVersion.gl42) mixin(corearb42Loader);
        static if(core >= GLVersion.gl43) mixin(corearb43Loader);
        static if(core >= GLVersion.gl44) mixin(corearb44Loader);
        static if(core >= GLVersion.gl45) mixin(corearb45Loader);
    }

    private GLVersion loadBaseGL()
    {
        with(DerelictGL3) {
            static if(!loadDep) mixin(baseLoader);
            else mixin(base_depLoader);
        }
        return GLVersion.gl11;
    }

    private GLVersion loadExtraGL()
    {
        mixin(glLoaderDecls);
        with(theLoader) {
            static if(!loadDep) mixin(gl2Loader);
            else mixin(gl2_depLoader);

            static if(core >= GLVersion.gl30) mixin(gl30Loader);
            static if(core >= GLVersion.gl31) mixin(gl31Loader);
            static if(core >= GLVersion.gl32) mixin(gl32Loader);
            static if(core >= GLVersion.gl33) mixin(gl33Loader);
            static if(core >= GLVersion.gl40) mixin(gl40Loader);
            static if(core >= GLVersion.gl41) mixin(gl41Loader);
            static if(core >= GLVersion.gl42) mixin(gl42Loader);
            static if(core >= GLVersion.gl43) mixin(gl43Loader);
            static if(core >= GLVersion.gl44) mixin(gl44Loader);
            static if(core >= GLVersion.gl45) mixin(gl45Loader);
        }

        static if(is(typeof(loadExtensions()))) loadExtensions();
        return glVer;
    }
}
