/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

// Deprecated symbols from OpenGL 1.0 & 1.1
module derelict.opengl.versions.base_dep;

import derelict.opengl.types;
import derelict.opengl.versions.base;

enum _base_depDecls =
q{
enum : uint {
    GL_2_BYTES                              = 0x1407,
    GL_3_BYTES                              = 0x1408,
    GL_4_BYTES                              = 0x1409,
    GL_QUADS                                = 0x0007,
    GL_QUAD_STRIP                           = 0x0008,
    GL_POLYGON                              = 0x0009,
    GL_NORMAL_ARRAY                         = 0x8075,
    GL_COLOR_ARRAY                          = 0x8076,
    GL_INDEX_ARRAY                          = 0x8077,
    GL_TEXTURE_COORD_ARRAY                  = 0x8078,
    GL_EDGE_FLAG_ARRAY                      = 0x8079,
    GL_VERTEX_ARRAY_SIZE                    = 0x807A,
    GL_VERTEX_ARRAY_TYPE                    = 0x807B,
    GL_VERTEX_ARRAY_STRIDE                  = 0x807C,
    GL_NORMAL_ARRAY_TYPE                    = 0x807E,
    GL_NORMAL_ARRAY_STRIDE                  = 0x807F,
    GL_COLOR_ARRAY_SIZE                     = 0x8081,
    GL_COLOR_ARRAY_TYPE                     = 0x8082,
    GL_COLOR_ARRAY_STRIDE                   = 0x8083,
    GL_INDEX_ARRAY_TYPE                     = 0x8085,
    GL_INDEX_ARRAY_STRIDE                   = 0x8086,
    GL_TEXTURE_COORD_ARRAY_SIZE             = 0x8088,
    GL_TEXTURE_COORD_ARRAY_TYPE             = 0x8089,
    GL_TEXTURE_COORD_ARRAY_STRIDE           = 0x808A,
    GL_EDGE_FLAG_ARRAY_STRIDE               = 0x808C,
    GL_VERTEX_ARRAY_POINTER                 = 0x808E,
    GL_NORMAL_ARRAY_POINTER                 = 0x808F,
    GL_COLOR_ARRAY_POINTER                  = 0x8090,
    GL_INDEX_ARRAY_POINTER                  = 0x8091,
    GL_TEXTURE_COORD_ARRAY_POINTER          = 0x8092,
    GL_EDGE_FLAG_ARRAY_POINTER              = 0x8093,
    GL_V2F                                  = 0x2A20,
    GL_V3F                                  = 0x2A21,
    GL_C4UB_V2F                             = 0x2A22,
    GL_C4UB_V3F                             = 0x2A23,
    GL_C3F_V3F                              = 0x2A24,
    GL_N3F_V3F                              = 0x2A25,
    GL_C4F_N3F_V3F                          = 0x2A26,
    GL_T2F_V3F                              = 0x2A27,
    GL_T4F_V4F                              = 0x2A28,
    GL_T2F_C4UB_V3F                         = 0x2A29,
    GL_T2F_C3F_V3F                          = 0x2A2A,
    GL_T2F_N3F_V3F                          = 0x2A2B,
    GL_T2F_C4F_N3F_V3F                      = 0x2A2C,
    GL_T4F_C4F_N3F_V4F                      = 0x2A2D,
    GL_MATRIX_MODE                          = 0x0BA0,
    GL_MODELVIEW                            = 0x1700,
    GL_PROJECTION                           = 0x1701,
    GL_POINT_SMOOTH                         = 0x0B10,
    GL_LINE_STIPPLE                         = 0x0B24,
    GL_LINE_STIPPLE_PATTERN                 = 0x0B25,
    GL_LINE_STIPPLE_REPEAT                  = 0x0B26,
    GL_POLYGON_MODE                         = 0x0B40,
    GL_POLYGON_STIPPLE                      = 0x0B42,
    GL_EDGE_FLAG                            = 0x0B43,
    GL_COMPILE                              = 0x1300,
    GL_COMPILE_AND_EXECUTE                  = 0x1301,
    GL_LIST_BASE                            = 0x0B32,
    GL_LIST_INDEX                           = 0x0B33,
    GL_LIST_MODE                            = 0x0B30,
    GL_DEPTH_BITS                           = 0x0D56,
    GL_LIGHTING                             = 0x0B50,
    GL_LIGHT0                               = 0x4000,
    GL_LIGHT1                               = 0x4001,
    GL_LIGHT2                               = 0x4002,
    GL_LIGHT3                               = 0x4003,
    GL_LIGHT4                               = 0x4004,
    GL_LIGHT5                               = 0x4005,
    GL_LIGHT6                               = 0x4006,
    GL_LIGHT7                               = 0x4007,
    GL_SPOT_EXPONENT                        = 0x1205,
    GL_SPOT_CUTOFF                          = 0x1206,
    GL_CONSTANT_ATTENUATION                 = 0x1207,
    GL_LINEAR_ATTENUATION                   = 0x1208,
    GL_QUADRATIC_ATTENUATION                = 0x1209,
    GL_AMBIENT                              = 0x1200,
    GL_DIFFUSE                              = 0x1201,
    GL_SPECULAR                             = 0x1202,
    GL_SHININESS                            = 0x1601,
    GL_EMISSION                             = 0x1600,
    GL_POSITION                             = 0x1203,
    GL_SPOT_DIRECTION                       = 0x1204,
    GL_AMBIENT_AND_DIFFUSE                  = 0x1602,
    GL_COLOR_INDEXES                        = 0x1603,
    GL_LIGHT_MODEL_TWO_SIDE                 = 0x0B52,
    GL_LIGHT_MODEL_LOCAL_VIEWER             = 0x0B51,
    GL_LIGHT_MODEL_AMBIENT                  = 0x0B53,
    GL_SHADE_MODEL                          = 0x0B54,
    GL_FLAT                                 = 0x1D00,
    GL_SMOOTH                               = 0x1D01,
    GL_COLOR_MATERIAL                       = 0x0B57,
    GL_COLOR_MATERIAL_FACE                  = 0x0B55,
    GL_COLOR_MATERIAL_PARAMETER             = 0x0B56,
    GL_NORMALIZE                            = 0x0BA1,
    GL_ACCUM_RED_BITS                       = 0x0D58,
    GL_ACCUM_GREEN_BITS                     = 0x0D59,
    GL_ACCUM_BLUE_BITS                      = 0x0D5A,
    GL_ACCUM_ALPHA_BITS                     = 0x0D5B,
    GL_ACCUM_CLEAR_VALUE                    = 0x0B80,
    GL_ACCUM                                = 0x0100,
    GL_ADD                                  = 0x0104,
    GL_LOAD                                 = 0x0101,
    GL_MULT                                 = 0x0103,
    GL_RETURN                               = 0x0102,
    GL_ALPHA_TEST                           = 0x0BC0,
    GL_ALPHA_TEST_REF                       = 0x0BC2,
    GL_ALPHA_TEST_FUNC                      = 0x0BC1,
    GL_FEEDBACK                             = 0x1C01,
    GL_RENDER                               = 0x1C00,
    GL_SELECT                               = 0x1C02,
    GL_2D                                   = 0x0600,
    GL_3D                                   = 0x0601,
    GL_3D_COLOR                             = 0x0602,
    GL_3D_COLOR_TEXTURE                     = 0x0603,
    GL_4D_COLOR_TEXTURE                     = 0x0604,
    GL_POINT_TOKEN                          = 0x0701,
    GL_LINE_TOKEN                           = 0x0702,
    GL_LINE_RESET_TOKEN                     = 0x0707,
    GL_POLYGON_TOKEN                        = 0x0703,
    GL_BITMAP_TOKEN                         = 0x0704,
    GL_DRAW_PIXEL_TOKEN                     = 0x0705,
    GL_COPY_PIXEL_TOKEN                     = 0x0706,
    GL_PASS_THROUGH_TOKEN                   = 0x0700,
    GL_FEEDBACK_BUFFER_POINTER              = 0x0DF0,
    GL_FEEDBACK_BUFFER_SIZE                 = 0x0DF1,
    GL_FEEDBACK_BUFFER_TYPE                 = 0x0DF2,
    GL_SELECTION_BUFFER_POINTER             = 0x0DF3,
    GL_SELECTION_BUFFER_SIZE                = 0x0DF4,
    GL_FOG                                  = 0x0B60,
    GL_FOG_MODE                             = 0x0B65,
    GL_FOG_DENSITY                          = 0x0B62,
    GL_FOG_COLOR                            = 0x0B66,
    GL_FOG_INDEX                            = 0x0B61,
    GL_FOG_START                            = 0x0B63,
    GL_FOG_END                              = 0x0B64,
    GL_EXP                                  = 0x0800,
    GL_EXP2                                 = 0x0801,
    GL_LOGIC_OP                             = 0x0BF1,
    GL_INDEX_LOGIC_OP                       = 0x0BF1,
    GL_STENCIL_BITS                         = 0x0D57,
    GL_AUX0                                 = 0x0409,
    GL_AUX1                                 = 0x040A,
    GL_AUX2                                 = 0x040B,
    GL_AUX3                                 = 0x040C,
    GL_COLOR_INDEX                          = 0x1900,
    GL_LUMINANCE                            = 0x1909,
    GL_LUMINANCE_ALPHA                      = 0x190A,
    GL_ALPHA_BITS                           = 0x0D55,
    GL_RED_BITS                             = 0x0D52,
    GL_GREEN_BITS                           = 0x0D53,
    GL_BLUE_BITS                            = 0x0D54,
    GL_INDEX_BITS                           = 0x0D51,
    GL_AUX_BUFFERS                          = 0x0C00,
    GL_BITMAP                               = 0x1A00,
    GL_MAX_LIST_NESTING                     = 0x0B31,
    GL_MAX_ATTRIB_STACK_DEPTH               = 0x0D35,
    GL_MAX_MODELVIEW_STACK_DEPTH            = 0x0D36,
    GL_MAX_NAME_STACK_DEPTH                 = 0x0D37,
    GL_MAX_PROJECTION_STACK_DEPTH           = 0x0D38,
    GL_MAX_TEXTURE_STACK_DEPTH              = 0x0D39,
    GL_MAX_EVAL_ORDER                       = 0x0D30,
    GL_MAX_LIGHTS                           = 0x0D31,
    GL_MAX_PIXEL_MAP_TABLE                  = 0x0D34,
    GL_MAX_CLIENT_ATTRIB_STACK_DEPTH        = 0x0D3B,
    GL_ATTRIB_STACK_DEPTH                   = 0x0BB0,
    GL_CLIENT_ATTRIB_STACK_DEPTH            = 0x0BB1,
    GL_CURRENT_INDEX                        = 0x0B01,
    GL_CURRENT_COLOR                        = 0x0B00,
    GL_CURRENT_NORMAL                       = 0x0B02,
    GL_CURRENT_RASTER_COLOR                 = 0x0B04,
    GL_CURRENT_RASTER_DISTANCE              = 0x0B09,
    GL_CURRENT_RASTER_INDEX                 = 0x0B05,
    GL_CURRENT_RASTER_POSITION              = 0x0B07,
    GL_CURRENT_RASTER_TEXTURE_COORDS        = 0x0B06,
    GL_CURRENT_RASTER_POSITION_VALID        = 0x0B08,
    GL_CURRENT_TEXTURE_COORDS               = 0x0B03,
    GL_INDEX_CLEAR_VALUE                    = 0x0C20,
    GL_INDEX_MODE                           = 0x0C30,
    GL_INDEX_WRITEMASK                      = 0x0C21,
    GL_MODELVIEW_MATRIX                     = 0x0BA6,
    GL_MODELVIEW_STACK_DEPTH                = 0x0BA3,
    GL_NAME_STACK_DEPTH                     = 0x0D70,
    GL_PROJECTION_MATRIX                    = 0x0BA7,
    GL_PROJECTION_STACK_DEPTH               = 0x0BA4,
    GL_RENDER_MODE                          = 0x0C40,
    GL_RGBA_MODE                            = 0x0C31,
    GL_TEXTURE_MATRIX                       = 0x0BA8,
    GL_TEXTURE_STACK_DEPTH                  = 0x0BA5,
    GL_AUTO_NORMAL                          = 0x0D80,
    GL_MAP1_COLOR_4                         = 0x0D90,
    GL_MAP1_GRID_DOMAIN                     = 0x0DD0,
    GL_MAP1_GRID_SEGMENTS                   = 0x0DD1,
    GL_MAP1_INDEX                           = 0x0D91,
    GL_MAP1_NORMAL                          = 0x0D92,
    GL_MAP1_TEXTURE_COORD_1                 = 0x0D93,
    GL_MAP1_TEXTURE_COORD_2                 = 0x0D94,
    GL_MAP1_TEXTURE_COORD_3                 = 0x0D95,
    GL_MAP1_TEXTURE_COORD_4                 = 0x0D96,
    GL_MAP1_VERTEX_3                        = 0x0D97,
    GL_MAP1_VERTEX_4                        = 0x0D98,
    GL_MAP2_COLOR_4                         = 0x0DB0,
    GL_MAP2_GRID_DOMAIN                     = 0x0DD2,
    GL_MAP2_GRID_SEGMENTS                   = 0x0DD3,
    GL_MAP2_INDEX                           = 0x0DB1,
    GL_MAP2_NORMAL                          = 0x0DB2,
    GL_MAP2_TEXTURE_COORD_1                 = 0x0DB3,
    GL_MAP2_TEXTURE_COORD_2                 = 0x0DB4,
    GL_MAP2_TEXTURE_COORD_3                 = 0x0DB5,
    GL_MAP2_TEXTURE_COORD_4                 = 0x0DB6,
    GL_MAP2_VERTEX_3                        = 0x0DB7,
    GL_MAP2_VERTEX_4                        = 0x0DB8,
    GL_COEFF                                = 0x0A00,
    GL_DOMAIN                               = 0x0A02,
    GL_ORDER                                = 0x0A01,
    GL_FOG_HINT                             = 0x0C54,
    GL_PERSPECTIVE_CORRECTION_HINT          = 0x0C50,
    GL_POINT_SMOOTH_HINT                    = 0x0C51,
    GL_MAP_COLOR                            = 0x0D10,
    GL_MAP_STENCIL                          = 0x0D11,
    GL_INDEX_SHIFT                          = 0x0D12,
    GL_INDEX_OFFSET                         = 0x0D13,
    GL_RED_SCALE                            = 0x0D14,
    GL_RED_BIAS                             = 0x0D15,
    GL_GREEN_SCALE                          = 0x0D18,
    GL_GREEN_BIAS                           = 0x0D19,
    GL_BLUE_SCALE                           = 0x0D1A,
    GL_BLUE_BIAS                            = 0x0D1B,
    GL_ALPHA_SCALE                          = 0x0D1C,
    GL_ALPHA_BIAS                           = 0x0D1D,
    GL_DEPTH_SCALE                          = 0x0D1E,
    GL_DEPTH_BIAS                           = 0x0D1F,
    GL_PIXEL_MAP_S_TO_S_SIZE                = 0x0CB1,
    GL_PIXEL_MAP_I_TO_I_SIZE                = 0x0CB0,
    GL_PIXEL_MAP_I_TO_R_SIZE                = 0x0CB2,
    GL_PIXEL_MAP_I_TO_G_SIZE                = 0x0CB3,
    GL_PIXEL_MAP_I_TO_B_SIZE                = 0x0CB4,
    GL_PIXEL_MAP_I_TO_A_SIZE                = 0x0CB5,
    GL_PIXEL_MAP_R_TO_R_SIZE                = 0x0CB6,
    GL_PIXEL_MAP_G_TO_G_SIZE                = 0x0CB7,
    GL_PIXEL_MAP_B_TO_B_SIZE                = 0x0CB8,
    GL_PIXEL_MAP_A_TO_A_SIZE                = 0x0CB9,
    GL_PIXEL_MAP_S_TO_S                     = 0x0C71,
    GL_PIXEL_MAP_I_TO_I                     = 0x0C70,
    GL_PIXEL_MAP_I_TO_R                     = 0x0C72,
    GL_PIXEL_MAP_I_TO_G                     = 0x0C73,
    GL_PIXEL_MAP_I_TO_B                     = 0x0C74,
    GL_PIXEL_MAP_I_TO_A                     = 0x0C75,
    GL_PIXEL_MAP_R_TO_R                     = 0x0C76,
    GL_PIXEL_MAP_G_TO_G                     = 0x0C77,
    GL_PIXEL_MAP_B_TO_B                     = 0x0C78,
    GL_PIXEL_MAP_A_TO_A                     = 0x0C79,
    GL_ZOOM_X                               = 0x0D16,
    GL_ZOOM_Y                               = 0x0D17,
    GL_TEXTURE_ENV                          = 0x2300,
    GL_TEXTURE_ENV_MODE                     = 0x2200,
    GL_TEXTURE_ENV_COLOR                    = 0x2201,
    GL_TEXTURE_GEN_S                        = 0x0C60,
    GL_TEXTURE_GEN_T                        = 0x0C61,
    GL_TEXTURE_GEN_MODE                     = 0x2500,
    GL_TEXTURE_BORDER                       = 0x1005,
    GL_TEXTURE_LUMINANCE_SIZE               = 0x8060,
    GL_TEXTURE_INTENSITY_SIZE               = 0x8061,
    GL_OBJECT_LINEAR                        = 0x2401,
    GL_OBJECT_PLANE                         = 0x2501,
    GL_EYE_LINEAR                           = 0x2400,
    GL_EYE_PLANE                            = 0x2502,
    GL_SPHERE_MAP                           = 0x2402,
    GL_DECAL                                = 0x2101,
    GL_MODULATE                             = 0x2100,
    GL_CLAMP                                = 0x2900,
    GL_S                                    = 0x2000,
    GL_T                                    = 0x2001,
    GL_R                                    = 0x2002,
    GL_Q                                    = 0x2003,
    GL_TEXTURE_GEN_R                        = 0x0C62,
    GL_TEXTURE_GEN_Q                        = 0x0C63,
    GL_STACK_OVERFLOW                       = 0x0503,
    GL_STACK_UNDERFLOW                      = 0x0504,
    GL_CURRENT_BIT                          = 0x00000001,
    GL_POINT_BIT                            = 0x00000002,
    GL_LINE_BIT                             = 0x00000004,
    GL_POLYGON_BIT                          = 0x00000008,
    GL_POLYGON_STIPPLE_BIT                  = 0x00000010,
    GL_PIXEL_MODE_BIT                       = 0x00000020,
    GL_LIGHTING_BIT                         = 0x00000040,
    GL_FOG_BIT                              = 0x00000080,
    GL_ACCUM_BUFFER_BIT                     = 0x00000200,
    GL_VIEWPORT_BIT                         = 0x00000800,
    GL_TRANSFORM_BIT                        = 0x00001000,
    GL_ENABLE_BIT                           = 0x00002000,
    GL_HINT_BIT                             = 0x00008000,
    GL_EVAL_BIT                             = 0x00010000,
    GL_LIST_BIT                             = 0x00020000,
    GL_TEXTURE_BIT                          = 0x00040000,
    GL_SCISSOR_BIT                          = 0x00080000,
    GL_ALL_ATTRIB_BITS                      = 0x000FFFFF,
    GL_TEXTURE_PRIORITY                     = 0x8066,
    GL_TEXTURE_RESIDENT                     = 0x8067,
    GL_ALPHA4                               = 0x803B,
    GL_ALPHA8                               = 0x803C,
    GL_ALPHA12                              = 0x803D,
    GL_ALPHA16                              = 0x803E,
    GL_LUMINANCE4                           = 0x803F,
    GL_LUMINANCE8                           = 0x8040,
    GL_LUMINANCE12                          = 0x8041,
    GL_LUMINANCE16                          = 0x8042,
    GL_LUMINANCE4_ALPHA4                    = 0x8043,
    GL_LUMINANCE6_ALPHA2                    = 0x8044,
    GL_LUMINANCE8_ALPHA8                    = 0x8045,
    GL_LUMINANCE12_ALPHA4                   = 0x8046,
    GL_LUMINANCE12_ALPHA12                  = 0x8047,
    GL_LUMINANCE16_ALPHA16                  = 0x8048,
    GL_INTENSITY                            = 0x8049,
    GL_INTENSITY4                           = 0x804A,
    GL_INTENSITY8                           = 0x804B,
    GL_INTENSITY12                          = 0x804C,
    GL_INTENSITY16                          = 0x804D,
    GL_ALL_CLIENT_ATTRIB_BITS               = 0xFFFFFFFF,
    GL_CLIENT_ALL_ATTRIB_BITS               = 0xFFFFFFFF,
}

extern(System) @nogc nothrow {
    alias da_glIsList = GLboolean function(GLuint);
    alias da_glDeleteLists = void function(GLuint,GLsizei);
    alias da_glGenLists = GLuint function(GLsizei);
    alias da_glNewList = void function(GLuint,GLenum);
    alias da_glEndList = void function();
    alias da_glCallList = void function(GLuint);
    alias da_glCallLists = void function(GLsizei,GLenum,const(void)*);
    alias da_glListBase = void function(GLuint);
    alias da_glBegin = void function(GLenum);
    alias da_glEnd = void function();
    alias da_glVertex2d = void function(GLdouble,GLdouble);
    alias da_glVertex2f = void function(GLfloat,GLfloat);
    alias da_glVertex2i = void function(GLint,GLint);
    alias da_glVertex2s = void function(GLshort,GLshort);
    alias da_glVertex3d = void function(GLdouble,GLdouble,GLdouble);
    alias da_glVertex3f = void function(GLfloat,GLfloat,GLfloat);
    alias da_glVertex3i = void function(GLint,GLint,GLint);
    alias da_glVertex3s = void function(GLshort,GLshort,GLshort);
    alias da_glVertex4d = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glVertex4f = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glVertex4i = void function(GLint,GLint,GLint,GLint);
    alias da_glVertex4s = void function(GLshort,GLshort,GLshort,GLshort);
    alias da_glVertex2dv = void function(const(GLdouble)*);
    alias da_glVertex2fv = void function(const(GLfloat)*);
    alias da_glVertex2iv = void function(const(GLint)*);
    alias da_glVertex2sv = void function(const(GLshort)*);
    alias da_glVertex3dv = void function(const(GLdouble)*);
    alias da_glVertex3fv = void function(const(GLfloat)*);
    alias da_glVertex3iv = void function(const(GLint)*);
    alias da_glVertex3sv = void function(const(GLshort)*);
    alias da_glVertex4dv = void function(const(GLdouble)*);
    alias da_glVertex4fv = void function(const(GLfloat)*);
    alias da_glVertex4iv = void function(const(GLint)*);
    alias da_glVertex4sv = void function(const(GLshort)*);
    alias da_glNormal3b = void function(GLbyte,GLbyte,GLbyte);
    alias da_glNormal3d = void function(GLdouble,GLdouble,GLdouble);
    alias da_glNormal3f = void function(GLfloat,GLfloat,GLfloat);
    alias da_glNormal3i = void function(GLint,GLint,GLint);
    alias da_glNormal3s = void function(GLshort,GLshort,GLshort);
    alias da_glNormal3bv = void function(const(GLbyte)*);
    alias da_glNormal3dv = void function(const(GLdouble)*);
    alias da_glNormal3fv = void function(const(GLfloat)*);
    alias da_glNormal3iv = void function(const(GLint)*);
    alias da_glNormal3sv = void function(const(GLshort)*);
    alias da_glIndexd = void function(GLdouble);
    alias da_glIndexf = void function(GLfloat);
    alias da_glIndexi = void function(GLint);
    alias da_glIndexs = void function(GLshort);
    alias da_glIndexub = void function(GLubyte);
    alias da_glIndexdv = void function(const(GLdouble)*);
    alias da_glIndexfv = void function(const(GLfloat)*);
    alias da_glIndexiv = void function(const(GLint)*);
    alias da_glIndexsv = void function(const(GLshort)*);
    alias da_glIndexubv = void function(const(GLubyte)*);
    alias da_glColor3b = void function(GLbyte,GLbyte,GLbyte);
    alias da_glColor3d = void function(GLdouble,GLdouble,GLdouble);
    alias da_glColor3f = void function(GLfloat,GLfloat,GLfloat);
    alias da_glColor3i = void function(GLint,GLint,GLint);
    alias da_glColor3s = void function(GLshort,GLshort,GLshort);
    alias da_glColor3ub = void function(GLubyte,GLubyte,GLubyte);
    alias da_glColor3ui = void function(GLuint,GLuint,GLuint);
    alias da_glColor3us = void function(GLushort,GLushort,GLushort);
    alias da_glColor4b = void function(GLbyte,GLbyte,GLbyte,GLbyte);
    alias da_glColor4d = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glColor4f = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glColor4i = void function(GLint,GLint,GLint,GLint);
    alias da_glColor4s = void function(GLshort,GLshort,GLshort,GLshort);
    alias da_glColor4ub = void function(GLubyte,GLubyte,GLubyte,GLubyte);
    alias da_glColor4ui = void function(GLuint,GLuint,GLuint,GLuint);
    alias da_glColor4us = void function(GLushort,GLushort,GLushort,GLushort);
    alias da_glColor3bv = void function(const(GLbyte)*);
    alias da_glColor3dv = void function(const(GLdouble)*);
    alias da_glColor3fv = void function(const(GLfloat)*);
    alias da_glColor3iv = void function(const(GLint)*);
    alias da_glColor3sv = void function(const(GLshort)*);
    alias da_glColor3ubv = void function(const(GLubyte)*);
    alias da_glColor3uiv = void function(const(GLuint)*);
    alias da_glColor3usv = void function(const(GLushort)*);
    alias da_glColor4bv = void function(const(GLbyte)*);
    alias da_glColor4dv = void function(const(GLdouble)*);
    alias da_glColor4fv = void function(const(GLfloat)*);
    alias da_glColor4iv = void function(const(GLint)*);
    alias da_glColor4sv = void function(const(GLshort)*);
    alias da_glColor4ubv = void function(const(GLubyte)*);
    alias da_glColor4uiv = void function(const(GLuint)*);
    alias da_glColor4usv = void function(const(GLushort)*);
    alias da_glTexCoord1d = void function(GLdouble);
    alias da_glTexCoord1f = void function(GLfloat);
    alias da_glTexCoord1i = void function(GLint);
    alias da_glTexCoord1s = void function(GLshort);
    alias da_glTexCoord2d = void function(GLdouble,GLdouble);
    alias da_glTexCoord2f = void function(GLfloat,GLfloat);
    alias da_glTexCoord2i = void function(GLint,GLint);
    alias da_glTexCoord2s = void function(GLshort,GLshort);
    alias da_glTexCoord3d = void function(GLdouble,GLdouble,GLdouble);
    alias da_glTexCoord3f = void function(GLfloat,GLfloat,GLfloat);
    alias da_glTexCoord3i = void function(GLint,GLint,GLint);
    alias da_glTexCoord3s = void function(GLshort,GLshort,GLshort);
    alias da_glTexCoord4d = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glTexCoord4f = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glTexCoord4i = void function(GLint,GLint,GLint,GLint);
    alias da_glTexCoord4s = void function(GLshort,GLshort,GLshort,GLshort);
    alias da_glTexCoord1dv = void function(const(GLdouble)*);
    alias da_glTexCoord1fv = void function(const(GLfloat)*);
    alias da_glTexCoord1iv = void function(const(GLint)*);
    alias da_glTexCoord1sv = void function(const(GLshort)*);
    alias da_glTexCoord2dv = void function(const(GLdouble)*);
    alias da_glTexCoord2fv = void function(const(GLfloat)*);
    alias da_glTexCoord2iv = void function(const(GLint)*);
    alias da_glTexCoord2sv = void function(const(GLshort)*);
    alias da_glTexCoord3dv = void function(const(GLdouble)*);
    alias da_glTexCoord3fv = void function(const(GLfloat)*);
    alias da_glTexCoord3iv = void function(const(GLint)*);
    alias da_glTexCoord3sv = void function(const(GLshort)*);
    alias da_glTexCoord4dv = void function(const(GLdouble)*);
    alias da_glTexCoord4fv = void function(const(GLfloat)*);
    alias da_glTexCoord4iv = void function(const(GLint)*);
    alias da_glTexCoord4sv = void function(const(GLshort)*);
    alias da_glRasterPos2d = void function(GLdouble,GLdouble);
    alias da_glRasterPos2f = void function(GLfloat,GLfloat);
    alias da_glRasterPos2i = void function(GLint,GLint);
    alias da_glRasterPos2s = void function(GLshort,GLshort);
    alias da_glRasterPos3d = void function(GLdouble,GLdouble,GLdouble);
    alias da_glRasterPos3f = void function(GLfloat,GLfloat,GLfloat);
    alias da_glRasterPos3i = void function(GLint,GLint,GLint);
    alias da_glRasterPos3s = void function(GLshort,GLshort,GLshort);
    alias da_glRasterPos4d = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glRasterPos4f = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glRasterPos4i = void function(GLint,GLint,GLint,GLint);
    alias da_glRasterPos4s = void function(GLshort,GLshort,GLshort,GLshort);
    alias da_glRasterPos2dv = void function(const(GLdouble)*);
    alias da_glRasterPos2fv = void function(const(GLfloat)*);
    alias da_glRasterPos2iv = void function(const(GLint)*);
    alias da_glRasterPos2sv = void function(const(GLshort)*);
    alias da_glRasterPos3dv = void function(const(GLdouble)*);
    alias da_glRasterPos3fv = void function(const(GLfloat)*);
    alias da_glRasterPos3iv = void function(const(GLint)*);
    alias da_glRasterPos3sv = void function(const(GLshort)*);
    alias da_glRasterPos4dv = void function(const(GLdouble)*);
    alias da_glRasterPos4fv = void function(const(GLfloat)*);
    alias da_glRasterPos4iv = void function(const(GLint)*);
    alias da_glRasterPos4sv = void function(const(GLshort)*);
    alias da_glRectd = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glRectf = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glRecti = void function(GLint,GLint,GLint,GLint);
    alias da_glRects = void function(GLshort,GLshort,GLshort,GLshort);
    alias da_glRectdv = void function(const(GLdouble)*, const(GLdouble)*);
    alias da_glRectfv = void function(const(GLfloat)*, const(GLfloat)*);
    alias da_glRectiv = void function(const(GLint)*, const(GLint)*);
    alias da_glRectsv = void function(const(GLshort)*, const(GLshort)*);
    alias da_glClipPlane = void function(GLenum,const(GLdouble)*);
    alias da_glGetClipPlane = void function(GLenum,GLdouble*);
    alias da_glShadeModel = void function(GLenum);
    alias da_glLightf = void function(GLenum,GLenum,GLfloat);
    alias da_glLighti = void function(GLenum,GLenum,GLint);
    alias da_glLightfv = void function(GLenum,GLenum,const(GLfloat)*);
    alias da_glLightiv = void function(GLenum,GLenum,const(GLint)*);
    alias da_glGetLightfv = void function(GLenum,GLenum,GLfloat*);
    alias da_glGetLightiv = void function(GLenum,GLenum,GLint*);
    alias da_glLightModelf = void function(GLenum,GLfloat);
    alias da_glLightModeli = void function(GLenum,GLint);
    alias da_glLightModelfv = void function(GLenum,const(GLfloat)*);
    alias da_glLightModeliv = void function(GLenum,const(GLint)*);
    alias da_glMaterialf = void function(GLenum,GLenum,GLfloat);
    alias da_glMateriali = void function(GLenum,GLenum,GLint);
    alias da_glMaterialfv = void function(GLenum,GLenum,const(GLfloat)*);
    alias da_glMaterialiv = void function(GLenum,GLenum,const(GLint)*);
    alias da_glGetMaterialfv = void function(GLenum,GLenum,GLfloat*);
    alias da_glGetMaterialiv = void function(GLenum,GLenum,GLint*);
    alias da_glColorMaterial = void function(GLenum,GLenum);
    alias da_glFogf = void function(GLenum,GLfloat);
    alias da_glFogi = void function(GLenum,GLint);
    alias da_glFogfv = void function(GLenum,const(GLfloat)*);
    alias da_glFogiv = void function(GLenum,const(GLint)*);
    alias da_glLineStipple = void function(GLint,GLushort);
    alias da_glPolygonStipple = void function(const(GLubyte)*);
    alias da_glGetPolygonStipple = void function(GLubyte*);
    alias da_glTexGend = void function(GLenum,GLenum,GLdouble);
    alias da_glTexGenf = void function(GLenum,GLenum,GLfloat);
    alias da_glTexGeni = void function(GLenum,GLenum,GLint);
    alias da_glTexGendv = void function(GLenum,GLenum,const(GLdouble)*);
    alias da_glTexGenfv = void function(GLenum,GLenum,const(GLfloat)*);
    alias da_glTexGeniv = void function(GLenum,GLenum,const(GLint)*);
    alias da_glGetTexGendv = void function(GLenum,GLenum,GLdouble*);
    alias da_glGetTexGenfv = void function(GLenum,GLenum,GLfloat*);
    alias da_glGetTexGeniv = void function(GLenum,GLenum,GLint*);
    alias da_glTexEnvf = void function(GLenum,GLenum,GLfloat);
    alias da_glTexEnvi = void function(GLenum,GLenum,GLint);
    alias da_glTexEnvfv = void function(GLenum,GLenum,const(GLfloat)*);
    alias da_glTexEnviv = void function(GLenum,GLenum,const(GLint)*);
    alias da_glGetTexEnvfv = void function(GLenum,GLenum,GLfloat*);
    alias da_glGetTexEnviv = void function(GLenum,GLenum,GLint*);
    alias da_glFeedbackBuffer = void function(GLsizei,GLenum,GLfloat*);
    alias da_glPassThrough = void function(GLfloat);
    alias da_glSelectBuffer = void function(GLsizei,GLuint*);
    alias da_glInitNames = void function();
    alias da_glLoadName = void function(GLuint);
    alias da_glPushName = void function(GLuint);
    alias da_glPopName = void function();
    alias da_glRenderMode = GLint function(GLenum);
    alias da_glClearAccum = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glAccum = void function(GLenum,GLfloat);
    alias da_glClearIndex = void function(GLfloat c);
    alias da_glIndexMask = void function(GLuint);
    alias da_glPushAttrib = void function(GLbitfield);
    alias da_glPopAttrib = void function();
    alias da_glMap1d = void function(GLenum,GLdouble,GLdouble,GLint,GLint,const(GLdouble)*);
    alias da_glMap1f = void function(GLenum,GLfloat,GLfloat,GLint,GLint,const(GLfloat)*);
    alias da_glMap2d = void function(GLenum,GLdouble,GLdouble,GLint,GLint,GLdouble,GLdouble,GLint,GLint,GLdouble*);
    alias da_glMap2f = void function(GLenum,GLfloat,GLfloat,GLint,GLint,GLfloat,GLfloat,GLint,GLint,GLfloat*);
    alias da_glGetMapdv = void function(GLenum,GLenum,GLdouble*);
    alias da_glGetMapfv = void function(GLenum,GLenum,GLfloat*);
    alias da_glGetMapiv = void function(GLenum,GLenum,GLint*);
    alias da_glEvalCoord1d = void function(GLdouble);
    alias da_glEvalCoord1f = void function(GLfloat);
    alias da_glEvalCoord1dv = void function(const(GLdouble)*);
    alias da_glEvalCoord1fv = void function(const(GLfloat)*);
    alias da_glEvalCoord2d = void function(GLdouble,GLdouble);
    alias da_glEvalCoord2f = void function(GLfloat,GLfloat);
    alias da_glEvalCoord2dv = void function(const(GLdouble)*);
    alias da_glEvalCoord2fv = void function(const(GLfloat)*);
    alias da_glMapGrid1d = void function(GLint,GLdouble,GLdouble);
    alias da_glMapGrid1f = void function(GLint,GLfloat,GLfloat);
    alias da_glMapGrid2d = void function(GLint,GLdouble,GLdouble,GLint,GLdouble,GLdouble);
    alias da_glMapGrid2f = void function(GLint,GLfloat,GLfloat,GLint,GLfloat,GLfloat);
    alias da_glEvalPoint1 = void function(GLint);
    alias da_glEvalPoint2 = void function(GLint,GLint);
    alias da_glEvalMesh1 = void function(GLenum,GLint,GLint);
    alias da_glEvalMesh2 = void function(GLenum,GLint,GLint,GLint,GLint);
    alias da_glAlphaFunc = void function(GLenum,GLclampf);
    alias da_glPixelZoom = void function(GLfloat,GLfloat);
    alias da_glPixelTransferf = void function(GLenum,GLfloat);
    alias da_glPixelTransferi = void function(GLenum,GLint);
    alias da_glPixelMapfv = void function(GLenum,GLint,const(GLfloat)*);
    alias da_glPixelMapuiv = void function(GLenum,GLint,const(GLuint)*);
    alias da_glPixelMapusv = void function(GLenum,GLint,const(GLushort)*);
    alias da_glGetPixelMapfv = void function(GLenum,GLfloat*);
    alias da_glGetPixelMapuiv = void function(GLenum,GLuint*);
    alias da_glGetPixelMapusv = void function(GLenum,GLushort*);
    alias da_glDrawPixels = void function(GLsizei,GLsizei,GLenum,GLenum,const(void)*);
    alias da_glCopyPixels = void function(GLint,GLint,GLsizei,GLsizei,GLenum);
    alias da_glFrustum = void function(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glMatrixMode = void function(GLenum);
    alias da_glOrtho = void function(GLdouble,GLdouble,GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glPushMatrix = void function();
    alias da_glPopMatrix = void function();
    alias da_glLoadIdentity = void function();
    alias da_glLoadMatrixd = void function(const(GLdouble)*);
    alias da_glLoadMatrixf = void function(const(GLfloat)*);
    alias da_glMultMatrixd = void function(const(GLdouble)*);
    alias da_glMultMatrixf = void function(const(GLfloat)*);
    alias da_glRotated = void function(GLdouble,GLdouble,GLdouble,GLdouble);
    alias da_glRotatef = void function(GLfloat,GLfloat,GLfloat,GLfloat);
    alias da_glScaled = void function(GLdouble,GLdouble,GLdouble);
    alias da_glScalef = void function(GLfloat,GLfloat,GLfloat);
    alias da_glTranslated = void function(GLdouble,GLdouble,GLdouble);
    alias da_glTranslatef = void function(GLfloat,GLfloat,GLfloat);
    alias da_glVertexPointer = void function(GLint,GLenum,GLsizei,const(void)*);
    alias da_glNormalPointer = void function(GLenum,GLsizei,const(void)*);
    alias da_glColorPointer = void function(GLint,GLenum,GLsizei,const(void)*);
    alias da_glIndexPointer = void function(GLenum,GLsizei,const(void)*);
    alias da_glTexCoordPointer = void function(GLint,GLenum,GLsizei,const(void)*);
    alias da_glEdgeFlagPointer = void function(GLsizei,const(void)*);
    alias da_glArrayElement = void function(GLint);
    alias da_glInterleavedArrays = void function(GLenum,GLsizei,const(void)*);
    alias da_glEnableClientState = void function(GLenum);
    alias da_glDisableClientState = void function(GLenum);
    alias da_glPrioritizeTextures = void function(GLsizei,const(GLuint)*,const(GLclampf)*);
    alias da_glAreTexturesResident = GLboolean function(GLsizei,const(GLuint)*,GLboolean*);
    alias da_glPushClientAttrib = void function(GLbitfield);
    alias da_glPopClientAttrib = void function();
}};

enum _base_depFuncs =
q{
    da_glIsList glIsList;
    da_glDeleteLists glDeleteLists;
    da_glGenLists glGenLists;
    da_glNewList glNewList;
    da_glEndList glEndList;
    da_glCallList glCallList;
    da_glCallLists glCallLists;
    da_glListBase glListBase;
    da_glBegin glBegin;
    da_glEnd glEnd;
    da_glVertex2d glVertex2d;
    da_glVertex2f glVertex2f;
    da_glVertex2i glVertex2i;
    da_glVertex2s glVertex2s;
    da_glVertex3d glVertex3d;
    da_glVertex3f glVertex3f;
    da_glVertex3i glVertex3i;
    da_glVertex3s glVertex3s;
    da_glVertex4d glVertex4d;
    da_glVertex4f glVertex4f;
    da_glVertex4i glVertex4i;
    da_glVertex4s glVertex4s;
    da_glVertex2dv glVertex2dv;
    da_glVertex2fv glVertex2fv;
    da_glVertex2iv glVertex2iv;
    da_glVertex2sv glVertex2sv;
    da_glVertex3dv glVertex3dv;
    da_glVertex3fv glVertex3fv;
    da_glVertex3iv glVertex3iv;
    da_glVertex3sv glVertex3sv;
    da_glVertex4dv glVertex4dv;
    da_glVertex4fv glVertex4fv;
    da_glVertex4iv glVertex4iv;
    da_glVertex4sv glVertex4sv;
    da_glNormal3b glNormal3b;
    da_glNormal3d glNormal3d;
    da_glNormal3f glNormal3f;
    da_glNormal3i glNormal3i;
    da_glNormal3s glNormal3s;
    da_glNormal3bv glNormal3bv;
    da_glNormal3dv glNormal3dv;
    da_glNormal3fv glNormal3fv;
    da_glNormal3iv glNormal3iv;
    da_glNormal3sv glNormal3sv;
    da_glIndexd glIndexd;
    da_glIndexf glIndexf;
    da_glIndexi glIndexi;
    da_glIndexs glIndexs;
    da_glIndexub glIndexub;
    da_glIndexdv glIndexdv;
    da_glIndexfv glIndexfv;
    da_glIndexiv glIndexiv;
    da_glIndexsv glIndexsv;
    da_glIndexubv glIndexubv;
    da_glColor3b glColor3b;
    da_glColor3d glColor3d;
    da_glColor3f glColor3f;
    da_glColor3i glColor3i;
    da_glColor3s glColor3s;
    da_glColor3ub glColor3ub;
    da_glColor3ui glColor3ui;
    da_glColor3us glColor3us;
    da_glColor4b glColor4b;
    da_glColor4d glColor4d;
    da_glColor4f glColor4f;
    da_glColor4i glColor4i;
    da_glColor4s glColor4s;
    da_glColor4ub glColor4ub;
    da_glColor4ui glColor4ui;
    da_glColor4us glColor4us;
    da_glColor3bv glColor3bv;
    da_glColor3dv glColor3dv;
    da_glColor3fv glColor3fv;
    da_glColor3iv glColor3iv;
    da_glColor3sv glColor3sv;
    da_glColor3ubv glColor3ubv;
    da_glColor3uiv glColor3uiv;
    da_glColor3usv glColor3usv;
    da_glColor4bv glColor4bv;
    da_glColor4dv glColor4dv;
    da_glColor4fv glColor4fv;
    da_glColor4iv glColor4iv;
    da_glColor4sv glColor4sv;
    da_glColor4ubv glColor4ubv;
    da_glColor4uiv glColor4uiv;
    da_glColor4usv glColor4usv;
    da_glTexCoord1d glTexCoord1d;
    da_glTexCoord1f glTexCoord1f;
    da_glTexCoord1i glTexCoord1i;
    da_glTexCoord1s glTexCoord1s;
    da_glTexCoord2d glTexCoord2d;
    da_glTexCoord2f glTexCoord2f;
    da_glTexCoord2i glTexCoord2i;
    da_glTexCoord2s glTexCoord2s;
    da_glTexCoord3d glTexCoord3d;
    da_glTexCoord3f glTexCoord3f;
    da_glTexCoord3i glTexCoord3i;
    da_glTexCoord3s glTexCoord3s;
    da_glTexCoord4d glTexCoord4d;
    da_glTexCoord4f glTexCoord4f;
    da_glTexCoord4i glTexCoord4i;
    da_glTexCoord4s glTexCoord4s;
    da_glTexCoord1dv glTexCoord1dv;
    da_glTexCoord1fv glTexCoord1fv;
    da_glTexCoord1iv glTexCoord1iv;
    da_glTexCoord1sv glTexCoord1sv;
    da_glTexCoord2dv glTexCoord2dv;
    da_glTexCoord2fv glTexCoord2fv;
    da_glTexCoord2iv glTexCoord2iv;
    da_glTexCoord2sv glTexCoord2sv;
    da_glTexCoord3dv glTexCoord3dv;
    da_glTexCoord3fv glTexCoord3fv;
    da_glTexCoord3iv glTexCoord3iv;
    da_glTexCoord3sv glTexCoord3sv;
    da_glTexCoord4dv glTexCoord4dv;
    da_glTexCoord4fv glTexCoord4fv;
    da_glTexCoord4iv glTexCoord4iv;
    da_glTexCoord4sv glTexCoord4sv;
    da_glRasterPos2d glRasterPos2d;
    da_glRasterPos2f glRasterPos2f;
    da_glRasterPos2i glRasterPos2i;
    da_glRasterPos2s glRasterPos2s;
    da_glRasterPos3d glRasterPos3d;
    da_glRasterPos3f glRasterPos3f;
    da_glRasterPos3i glRasterPos3i;
    da_glRasterPos3s glRasterPos3s;
    da_glRasterPos4d glRasterPos4d;
    da_glRasterPos4f glRasterPos4f;
    da_glRasterPos4i glRasterPos4i;
    da_glRasterPos4s glRasterPos4s;
    da_glRasterPos2dv glRasterPos2dv;
    da_glRasterPos2fv glRasterPos2fv;
    da_glRasterPos2iv glRasterPos2iv;
    da_glRasterPos2sv glRasterPos2sv;
    da_glRasterPos3dv glRasterPos3dv;
    da_glRasterPos3fv glRasterPos3fv;
    da_glRasterPos3iv glRasterPos3iv;
    da_glRasterPos3sv glRasterPos3sv;
    da_glRasterPos4dv glRasterPos4dv;
    da_glRasterPos4fv glRasterPos4fv;
    da_glRasterPos4iv glRasterPos4iv;
    da_glRasterPos4sv glRasterPos4sv;
    da_glRectd glRectd;
    da_glRectf glRectf;
    da_glRecti glRecti;
    da_glRects glRects;
    da_glRectdv glRectdv;
    da_glRectfv glRectfv;
    da_glRectiv glRectiv;
    da_glRectsv glRectsv;
    da_glClipPlane glClipPlane;
    da_glGetClipPlane glGetClipPlane;
    da_glShadeModel glShadeModel;
    da_glLightf glLightf;
    da_glLighti glLighti;
    da_glLightfv glLightfv;
    da_glLightiv glLightiv;
    da_glGetLightfv glGetLightfv;
    da_glGetLightiv glGetLightiv;
    da_glLightModelf glLightModelf;
    da_glLightModeli glLightModeli;
    da_glLightModelfv glLightModelfv;
    da_glLightModeliv glLightModeliv;
    da_glMaterialf glMaterialf;
    da_glMateriali glMateriali;
    da_glMaterialfv glMaterialfv;
    da_glMaterialiv glMaterialiv;
    da_glGetMaterialfv glGetMaterialfv;
    da_glGetMaterialiv glGetMaterialiv;
    da_glColorMaterial glColorMaterial;
    da_glFogf glFogf;
    da_glFogi glFogi;
    da_glFogfv glFogfv;
    da_glFogiv glFogiv;
    da_glLineStipple glLineStipple;
    da_glPolygonStipple glPolygonStipple;
    da_glGetPolygonStipple glGetPolygonStipple;
    da_glTexGend glTexGend;
    da_glTexGenf glTexGenf;
    da_glTexGeni glTexGeni;
    da_glTexGendv glTexGendv;
    da_glTexGenfv glTexGenfv;
    da_glTexGeniv glTexGeniv;
    da_glGetTexGendv glGetTexGendv;
    da_glGetTexGenfv glGetTexGenfv;
    da_glGetTexGeniv glGetTexGeniv;
    da_glTexEnvf glTexEnvf;
    da_glTexEnvi glTexEnvi;
    da_glTexEnvfv glTexEnvfv;
    da_glTexEnviv glTexEnviv;
    da_glGetTexEnvfv glGetTexEnvfv;
    da_glGetTexEnviv glGetTexEnviv;
    da_glFeedbackBuffer glFeedbackBuffer;
    da_glPassThrough glPassThrough;
    da_glSelectBuffer glSelectBuffer;
    da_glInitNames glInitNames;
    da_glLoadName glLoadName;
    da_glPushName glPushName;
    da_glPopName glPopName;
    da_glRenderMode glRenderMode;
    da_glClearAccum glClearAccum;
    da_glAccum glAccum;
    da_glClearIndex glClearIndex;
    da_glIndexMask glIndexMask;
    da_glPushAttrib glPushAttrib;
    da_glPopAttrib glPopAttrib;
    da_glMap1d glMap1d;
    da_glMap1f glMap1f;
    da_glMap2d glMap2d;
    da_glMap2f glMap2f;
    da_glGetMapdv glGetMapdv;
    da_glGetMapfv glGetMapfv;
    da_glGetMapiv glGetMapiv;
    da_glEvalCoord1d glEvalCoord1d;
    da_glEvalCoord1f glEvalCoord1f;
    da_glEvalCoord1dv glEvalCoord1dv;
    da_glEvalCoord1fv glEvalCoord1fv;
    da_glEvalCoord2d glEvalCoord2d;
    da_glEvalCoord2f glEvalCoord2f;
    da_glEvalCoord2dv glEvalCoord2dv;
    da_glEvalCoord2fv glEvalCoord2fv;
    da_glMapGrid1d glMapGrid1d;
    da_glMapGrid1f glMapGrid1f;
    da_glMapGrid2d glMapGrid2d;
    da_glMapGrid2f glMapGrid2f;
    da_glEvalPoint1 glEvalPoint1;
    da_glEvalPoint2 glEvalPoint2;
    da_glEvalMesh1 glEvalMesh1;
    da_glEvalMesh2 glEvalMesh2;
    da_glAlphaFunc glAlphaFunc;
    da_glPixelZoom glPixelZoom;
    da_glPixelTransferf glPixelTransferf;
    da_glPixelTransferi glPixelTransferi;
    da_glPixelMapfv glPixelMapfv;
    da_glPixelMapuiv glPixelMapuiv;
    da_glPixelMapusv glPixelMapusv;
    da_glGetPixelMapfv glGetPixelMapfv;
    da_glGetPixelMapuiv glGetPixelMapuiv;
    da_glGetPixelMapusv glGetPixelMapusv;
    da_glDrawPixels glDrawPixels;
    da_glCopyPixels glCopyPixels;
    da_glFrustum glFrustum;
    da_glMatrixMode glMatrixMode;
    da_glOrtho glOrtho;
    da_glPushMatrix glPushMatrix;
    da_glPopMatrix glPopMatrix;
    da_glLoadIdentity glLoadIdentity;
    da_glLoadMatrixd glLoadMatrixd;
    da_glLoadMatrixf glLoadMatrixf;
    da_glMultMatrixd glMultMatrixd;
    da_glMultMatrixf glMultMatrixf;
    da_glRotated glRotated;
    da_glRotatef glRotatef;
    da_glScaled glScaled;
    da_glScalef glScalef;
    da_glTranslated glTranslated;
    da_glTranslatef glTranslatef;
    da_glVertexPointer glVertexPointer;
    da_glNormalPointer glNormalPointer;
    da_glColorPointer glColorPointer;
    da_glIndexPointer glIndexPointer;
    da_glTexCoordPointer glTexCoordPointer;
    da_glEdgeFlagPointer glEdgeFlagPointer;
    da_glArrayElement glArrayElement;
    da_glInterleavedArrays glInterleavedArrays;
    da_glEnableClientState glEnableClientState;
    da_glDisableClientState glDisableClientState;
    da_glPrioritizeTextures glPrioritizeTextures;
    da_glAreTexturesResident glAreTexturesResident;
    da_glPushClientAttrib glPushClientAttrib;
    da_glPopClientAttrib glPopClientAttrib;
};

enum _base_depLoader =
q{
    bindFunc(cast(void**)&glIsList, "glIsList");
    bindFunc(cast(void**)&glDeleteLists, "glDeleteLists");
    bindFunc(cast(void**)&glGenLists, "glGenLists");
    bindFunc(cast(void**)&glNewList, "glNewList");
    bindFunc(cast(void**)&glEndList, "glEndList");
    bindFunc(cast(void**)&glCallList, "glCallList");
    bindFunc(cast(void**)&glCallLists, "glCallLists");
    bindFunc(cast(void**)&glListBase, "glListBase");
    bindFunc(cast(void**)&glBegin, "glBegin");
    bindFunc(cast(void**)&glEnd, "glEnd");
    bindFunc(cast(void**)&glVertex2d, "glVertex2d");
    bindFunc(cast(void**)&glVertex2f, "glVertex2f");
    bindFunc(cast(void**)&glVertex2i, "glVertex2i");
    bindFunc(cast(void**)&glVertex2s, "glVertex2s");
    bindFunc(cast(void**)&glVertex3d, "glVertex3d");
    bindFunc(cast(void**)&glVertex3f, "glVertex3f");
    bindFunc(cast(void**)&glVertex3i, "glVertex3i");
    bindFunc(cast(void**)&glVertex3s, "glVertex3s");
    bindFunc(cast(void**)&glVertex4d, "glVertex4d");
    bindFunc(cast(void**)&glVertex4f, "glVertex4f");
    bindFunc(cast(void**)&glVertex4i, "glVertex4i");
    bindFunc(cast(void**)&glVertex4s, "glVertex4s");
    bindFunc(cast(void**)&glVertex2dv, "glVertex2dv");
    bindFunc(cast(void**)&glVertex2fv, "glVertex2fv");
    bindFunc(cast(void**)&glVertex2iv, "glVertex2iv");
    bindFunc(cast(void**)&glVertex2sv, "glVertex2sv");
    bindFunc(cast(void**)&glVertex3dv, "glVertex3dv");
    bindFunc(cast(void**)&glVertex3fv, "glVertex3fv");
    bindFunc(cast(void**)&glVertex3iv, "glVertex3iv");
    bindFunc(cast(void**)&glVertex3sv, "glVertex3sv");
    bindFunc(cast(void**)&glVertex4dv, "glVertex4dv");
    bindFunc(cast(void**)&glVertex4fv, "glVertex4fv");
    bindFunc(cast(void**)&glVertex4iv, "glVertex4iv");
    bindFunc(cast(void**)&glVertex4sv, "glVertex4sv");
    bindFunc(cast(void**)&glNormal3b, "glNormal3b");
    bindFunc(cast(void**)&glNormal3d, "glNormal3d");
    bindFunc(cast(void**)&glNormal3f, "glNormal3f");
    bindFunc(cast(void**)&glNormal3i, "glNormal3i");
    bindFunc(cast(void**)&glNormal3s, "glNormal3s");
    bindFunc(cast(void**)&glNormal3bv, "glNormal3bv");
    bindFunc(cast(void**)&glNormal3dv, "glNormal3dv");
    bindFunc(cast(void**)&glNormal3fv, "glNormal3fv");
    bindFunc(cast(void**)&glNormal3iv, "glNormal3iv");
    bindFunc(cast(void**)&glNormal3sv, "glNormal3sv");
    bindFunc(cast(void**)&glIndexd, "glIndexd");
    bindFunc(cast(void**)&glIndexf, "glIndexf");
    bindFunc(cast(void**)&glIndexi, "glIndexi");
    bindFunc(cast(void**)&glIndexs, "glIndexs");
    bindFunc(cast(void**)&glIndexub, "glIndexub");
    bindFunc(cast(void**)&glIndexdv, "glIndexdv");
    bindFunc(cast(void**)&glIndexfv, "glIndexfv");
    bindFunc(cast(void**)&glIndexiv, "glIndexiv");
    bindFunc(cast(void**)&glIndexsv, "glIndexsv");
    bindFunc(cast(void**)&glIndexubv, "glIndexubv");
    bindFunc(cast(void**)&glColor3b, "glColor3b");
    bindFunc(cast(void**)&glColor3d, "glColor3d");
    bindFunc(cast(void**)&glColor3f, "glColor3f");
    bindFunc(cast(void**)&glColor3i, "glColor3i");
    bindFunc(cast(void**)&glColor3s, "glColor3s");
    bindFunc(cast(void**)&glColor3ub, "glColor3ub");
    bindFunc(cast(void**)&glColor3ui, "glColor3ui");
    bindFunc(cast(void**)&glColor3us, "glColor3us");
    bindFunc(cast(void**)&glColor4b, "glColor4b");
    bindFunc(cast(void**)&glColor4d, "glColor4d");
    bindFunc(cast(void**)&glColor4f, "glColor4f");
    bindFunc(cast(void**)&glColor4i, "glColor4i");
    bindFunc(cast(void**)&glColor4s, "glColor4s");
    bindFunc(cast(void**)&glColor4ub, "glColor4ub");
    bindFunc(cast(void**)&glColor4ui, "glColor4ui");
    bindFunc(cast(void**)&glColor4us, "glColor4us");
    bindFunc(cast(void**)&glColor3bv, "glColor3bv");
    bindFunc(cast(void**)&glColor3dv, "glColor3dv");
    bindFunc(cast(void**)&glColor3fv, "glColor3fv");
    bindFunc(cast(void**)&glColor3iv, "glColor3iv");
    bindFunc(cast(void**)&glColor3sv, "glColor3sv");
    bindFunc(cast(void**)&glColor3ubv, "glColor3ubv");
    bindFunc(cast(void**)&glColor3uiv, "glColor3uiv");
    bindFunc(cast(void**)&glColor3usv, "glColor3usv");
    bindFunc(cast(void**)&glColor4bv, "glColor4bv");
    bindFunc(cast(void**)&glColor4dv, "glColor4dv");
    bindFunc(cast(void**)&glColor4fv, "glColor4fv");
    bindFunc(cast(void**)&glColor4iv, "glColor4iv");
    bindFunc(cast(void**)&glColor4sv, "glColor4sv");
    bindFunc(cast(void**)&glColor4ubv, "glColor4ubv");
    bindFunc(cast(void**)&glColor4uiv, "glColor4uiv");
    bindFunc(cast(void**)&glColor4usv, "glColor4usv");
    bindFunc(cast(void**)&glTexCoord1d, "glTexCoord1d");
    bindFunc(cast(void**)&glTexCoord1f, "glTexCoord1f");
    bindFunc(cast(void**)&glTexCoord1i, "glTexCoord1i");
    bindFunc(cast(void**)&glTexCoord1s, "glTexCoord1s");
    bindFunc(cast(void**)&glTexCoord2d, "glTexCoord2d");
    bindFunc(cast(void**)&glTexCoord2f, "glTexCoord2f");
    bindFunc(cast(void**)&glTexCoord2i, "glTexCoord2i");
    bindFunc(cast(void**)&glTexCoord2s, "glTexCoord2s");
    bindFunc(cast(void**)&glTexCoord3d, "glTexCoord3d");
    bindFunc(cast(void**)&glTexCoord3f, "glTexCoord3f");
    bindFunc(cast(void**)&glTexCoord3i, "glTexCoord3i");
    bindFunc(cast(void**)&glTexCoord3s, "glTexCoord3s");
    bindFunc(cast(void**)&glTexCoord4d, "glTexCoord4d");
    bindFunc(cast(void**)&glTexCoord4f, "glTexCoord4f");
    bindFunc(cast(void**)&glTexCoord4i, "glTexCoord4i");
    bindFunc(cast(void**)&glTexCoord4s, "glTexCoord4s");
    bindFunc(cast(void**)&glTexCoord1dv, "glTexCoord1dv");
    bindFunc(cast(void**)&glTexCoord1fv, "glTexCoord1fv");
    bindFunc(cast(void**)&glTexCoord1iv, "glTexCoord1iv");
    bindFunc(cast(void**)&glTexCoord1sv, "glTexCoord1sv");
    bindFunc(cast(void**)&glTexCoord2dv, "glTexCoord2dv");
    bindFunc(cast(void**)&glTexCoord2fv, "glTexCoord2fv");
    bindFunc(cast(void**)&glTexCoord2iv, "glTexCoord2iv");
    bindFunc(cast(void**)&glTexCoord2sv, "glTexCoord2sv");
    bindFunc(cast(void**)&glTexCoord3dv, "glTexCoord3dv");
    bindFunc(cast(void**)&glTexCoord3fv, "glTexCoord3fv");
    bindFunc(cast(void**)&glTexCoord3iv, "glTexCoord3iv");
    bindFunc(cast(void**)&glTexCoord3sv, "glTexCoord3sv");
    bindFunc(cast(void**)&glTexCoord4dv, "glTexCoord4dv");
    bindFunc(cast(void**)&glTexCoord4fv, "glTexCoord4fv");
    bindFunc(cast(void**)&glTexCoord4iv, "glTexCoord4iv");
    bindFunc(cast(void**)&glTexCoord4sv, "glTexCoord4sv");
    bindFunc(cast(void**)&glRasterPos2d, "glRasterPos2d");
    bindFunc(cast(void**)&glRasterPos2f, "glRasterPos2f");
    bindFunc(cast(void**)&glRasterPos2i, "glRasterPos2i");
    bindFunc(cast(void**)&glRasterPos2s, "glRasterPos2s");
    bindFunc(cast(void**)&glRasterPos3d, "glRasterPos3d");
    bindFunc(cast(void**)&glRasterPos3f, "glRasterPos3f");
    bindFunc(cast(void**)&glRasterPos3i, "glRasterPos3i");
    bindFunc(cast(void**)&glRasterPos3s, "glRasterPos3s");
    bindFunc(cast(void**)&glRasterPos4d, "glRasterPos4d");
    bindFunc(cast(void**)&glRasterPos4f, "glRasterPos4f");
    bindFunc(cast(void**)&glRasterPos4i, "glRasterPos4i");
    bindFunc(cast(void**)&glRasterPos4s, "glRasterPos4s");
    bindFunc(cast(void**)&glRasterPos2dv, "glRasterPos2dv");
    bindFunc(cast(void**)&glRasterPos2fv, "glRasterPos2fv");
    bindFunc(cast(void**)&glRasterPos2iv, "glRasterPos2iv");
    bindFunc(cast(void**)&glRasterPos2sv, "glRasterPos2sv");
    bindFunc(cast(void**)&glRasterPos3dv, "glRasterPos3dv");
    bindFunc(cast(void**)&glRasterPos3fv, "glRasterPos3fv");
    bindFunc(cast(void**)&glRasterPos3iv, "glRasterPos3iv");
    bindFunc(cast(void**)&glRasterPos3sv, "glRasterPos3sv");
    bindFunc(cast(void**)&glRasterPos4dv, "glRasterPos4dv");
    bindFunc(cast(void**)&glRasterPos4fv, "glRasterPos4fv");
    bindFunc(cast(void**)&glRasterPos4iv, "glRasterPos4iv");
    bindFunc(cast(void**)&glRasterPos4sv, "glRasterPos4sv");
    bindFunc(cast(void**)&glRectd, "glRectd");
    bindFunc(cast(void**)&glRectf, "glRectf");
    bindFunc(cast(void**)&glRecti, "glRecti");
    bindFunc(cast(void**)&glRects, "glRects");
    bindFunc(cast(void**)&glRectdv, "glRectdv");
    bindFunc(cast(void**)&glRectfv, "glRectfv");
    bindFunc(cast(void**)&glRectiv, "glRectiv");
    bindFunc(cast(void**)&glRectsv, "glRectsv");
    bindFunc(cast(void**)&glClipPlane, "glClipPlane");
    bindFunc(cast(void**)&glGetClipPlane, "glGetClipPlane");
    bindFunc(cast(void**)&glShadeModel, "glShadeModel");
    bindFunc(cast(void**)&glLightf, "glLightf");
    bindFunc(cast(void**)&glLighti, "glLighti");
    bindFunc(cast(void**)&glLightfv, "glLightfv");
    bindFunc(cast(void**)&glLightiv, "glLightiv");
    bindFunc(cast(void**)&glGetLightfv, "glGetLightfv");
    bindFunc(cast(void**)&glGetLightiv, "glGetLightiv");
    bindFunc(cast(void**)&glLightModelf, "glLightModelf");
    bindFunc(cast(void**)&glLightModeli, "glLightModeli");
    bindFunc(cast(void**)&glLightModelfv, "glLightModelfv");
    bindFunc(cast(void**)&glLightModeliv, "glLightModeliv");
    bindFunc(cast(void**)&glMaterialf, "glMaterialf");
    bindFunc(cast(void**)&glMateriali, "glMateriali");
    bindFunc(cast(void**)&glMaterialfv, "glMaterialfv");
    bindFunc(cast(void**)&glMaterialiv, "glMaterialiv");
    bindFunc(cast(void**)&glGetMaterialfv, "glGetMaterialfv");
    bindFunc(cast(void**)&glGetMaterialiv, "glGetMaterialiv");
    bindFunc(cast(void**)&glColorMaterial, "glColorMaterial");
    bindFunc(cast(void**)&glColorMaterial, "glColorMaterial");
    bindFunc(cast(void**)&glFogf, "glFogf");
    bindFunc(cast(void**)&glFogi, "glFogi");
    bindFunc(cast(void**)&glFogfv, "glFogfv");
    bindFunc(cast(void**)&glFogiv, "glFogiv");
    bindFunc(cast(void**)&glLineStipple, "glLineStipple");
    bindFunc(cast(void**)&glPolygonStipple, "glPolygonStipple");
    bindFunc(cast(void**)&glGetPolygonStipple, "glGetPolygonStipple");
    bindFunc(cast(void**)&glTexGend, "glTexGend");
    bindFunc(cast(void**)&glTexGenf, "glTexGenf");
    bindFunc(cast(void**)&glTexGeni, "glTexGeni");
    bindFunc(cast(void**)&glTexGendv, "glTexGendv");
    bindFunc(cast(void**)&glTexGenfv, "glTexGenfv");
    bindFunc(cast(void**)&glTexGeniv, "glTexGeniv");
    bindFunc(cast(void**)&glGetTexGendv, "glGetTexGendv");
    bindFunc(cast(void**)&glGetTexGenfv, "glGetTexGenfv");
    bindFunc(cast(void**)&glGetTexGeniv, "glGetTexGeniv");
    bindFunc(cast(void**)&glTexEnvf, "glTexEnvf");
    bindFunc(cast(void**)&glTexEnvi, "glTexEnvi");
    bindFunc(cast(void**)&glTexEnvfv, "glTexEnvfv");
    bindFunc(cast(void**)&glTexEnviv, "glTexEnviv");
    bindFunc(cast(void**)&glGetTexEnvfv, "glGetTexEnvfv");
    bindFunc(cast(void**)&glGetTexEnviv, "glGetTexEnviv");
    bindFunc(cast(void**)&glFeedbackBuffer, "glFeedbackBuffer");
    bindFunc(cast(void**)&glPassThrough, "glPassThrough");
    bindFunc(cast(void**)&glSelectBuffer, "glSelectBuffer");
    bindFunc(cast(void**)&glInitNames, "glInitNames");
    bindFunc(cast(void**)&glLoadName, "glLoadName");
    bindFunc(cast(void**)&glPushName, "glPushName");
    bindFunc(cast(void**)&glPopName, "glPopName");
    bindFunc(cast(void**)&glRenderMode, "glRenderMode");
    bindFunc(cast(void**)&glClearAccum, "glClearAccum");
    bindFunc(cast(void**)&glAccum, "glAccum");
    bindFunc(cast(void**)&glClearIndex, "glClearIndex");
    bindFunc(cast(void**)&glIndexMask, "glIndexMask");
    bindFunc(cast(void**)&glPushAttrib, "glPushAttrib");
    bindFunc(cast(void**)&glPopAttrib, "glPopAttrib");
    bindFunc(cast(void**)&glMap1d, "glMap1d");
    bindFunc(cast(void**)&glMap1f, "glMap1f");
    bindFunc(cast(void**)&glMap2d, "glMap2d");
    bindFunc(cast(void**)&glMap2f, "glMap2f");
    bindFunc(cast(void**)&glGetMapdv, "glGetMapdv");
    bindFunc(cast(void**)&glGetMapfv, "glGetMapfv");
    bindFunc(cast(void**)&glGetMapiv, "glGetMapiv");
    bindFunc(cast(void**)&glEvalCoord1d, "glEvalCoord1d");
    bindFunc(cast(void**)&glEvalCoord1f, "glEvalCoord1f");
    bindFunc(cast(void**)&glEvalCoord1dv, "glEvalCoord1dv");
    bindFunc(cast(void**)&glEvalCoord1fv, "glEvalCoord1fv");
    bindFunc(cast(void**)&glEvalCoord2d, "glEvalCoord2d");
    bindFunc(cast(void**)&glEvalCoord2f, "glEvalCoord2f");
    bindFunc(cast(void**)&glEvalCoord2dv, "glEvalCoord2dv");
    bindFunc(cast(void**)&glEvalCoord2fv, "glEvalCoord2fv");
    bindFunc(cast(void**)&glMapGrid1d, "glMapGrid1d");
    bindFunc(cast(void**)&glMapGrid1f, "glMapGrid1f");
    bindFunc(cast(void**)&glMapGrid2d, "glMapGrid2d");
    bindFunc(cast(void**)&glMapGrid2f, "glMapGrid2f");
    bindFunc(cast(void**)&glEvalPoint1, "glEvalPoint1");
    bindFunc(cast(void**)&glEvalPoint2, "glEvalPoint2");
    bindFunc(cast(void**)&glEvalMesh1, "glEvalMesh1");
    bindFunc(cast(void**)&glEvalMesh2, "glEvalMesh2");
    bindFunc(cast(void**)&glAlphaFunc, "glAlphaFunc");
    bindFunc(cast(void**)&glPixelZoom, "glPixelZoom");
    bindFunc(cast(void**)&glPixelTransferf, "glPixelTransferf");
    bindFunc(cast(void**)&glPixelTransferi, "glPixelTransferi");
    bindFunc(cast(void**)&glPixelMapfv, "glPixelMapfv");
    bindFunc(cast(void**)&glPixelMapuiv, "glPixelMapuiv");
    bindFunc(cast(void**)&glPixelMapusv, "glPixelMapusv");
    bindFunc(cast(void**)&glGetPixelMapfv, "glGetPixelMapfv");
    bindFunc(cast(void**)&glGetPixelMapuiv, "glGetPixelMapuiv");
    bindFunc(cast(void**)&glGetPixelMapusv, "glGetPixelMapusv");
    bindFunc(cast(void**)&glDrawPixels, "glDrawPixels");
    bindFunc(cast(void**)&glCopyPixels, "glCopyPixels");
    bindFunc(cast(void**)&glFrustum, "glFrustum");
    bindFunc(cast(void**)&glMatrixMode, "glMatrixMode");
    bindFunc(cast(void**)&glOrtho, "glOrtho");
    bindFunc(cast(void**)&glFrustum, "glFrustum");
    //bindFunc(cast(void**)&glViewport, "glViewport");
    bindFunc(cast(void**)&glPushMatrix, "glPushMatrix");
    bindFunc(cast(void**)&glPopMatrix, "glPopMatrix");
    bindFunc(cast(void**)&glLoadIdentity, "glLoadIdentity");
    bindFunc(cast(void**)&glLoadMatrixd, "glLoadMatrixd");
    bindFunc(cast(void**)&glLoadMatrixf, "glLoadMatrixf");
    bindFunc(cast(void**)&glMultMatrixd, "glMultMatrixd");
    bindFunc(cast(void**)&glMultMatrixf, "glMultMatrixf");
    bindFunc(cast(void**)&glRotated, "glRotated");
    bindFunc(cast(void**)&glRotatef, "glRotatef");
    bindFunc(cast(void**)&glScaled, "glScaled");
    bindFunc(cast(void**)&glScalef, "glScalef");
    bindFunc(cast(void**)&glTranslated, "glTranslated");
    bindFunc(cast(void**)&glTranslatef, "glTranslatef");
    bindFunc(cast(void**)&glVertexPointer, "glVertexPointer");
    bindFunc(cast(void**)&glNormalPointer, "glNormalPointer");
    bindFunc(cast(void**)&glColorPointer, "glColorPointer");
    bindFunc(cast(void**)&glIndexPointer, "glIndexPointer");
    bindFunc(cast(void**)&glTexCoordPointer, "glTexCoordPointer");
    bindFunc(cast(void**)&glEdgeFlagPointer, "glEdgeFlagPointer");
   // bindFunc(cast(void**)&glGetPointerv, "glGetPointerv");
    bindFunc(cast(void**)&glArrayElement, "glArrayElement");
    bindFunc(cast(void**)&glInterleavedArrays, "glInterleavedArrays");
    bindFunc(cast(void**)&glEnableClientState, "glEnableClientState");
    bindFunc(cast(void**)&glDisableClientState, "glDisableClientState");
    bindFunc(cast(void**)&glPrioritizeTextures, "glPrioritizeTextures");
    bindFunc(cast(void**)&glAreTexturesResident, "glAreTexturesResident");
    bindFunc(cast(void**)&glPushClientAttrib, "glPushClientAttrib");
    bindFunc(cast(void**)&glPopClientAttrib, "glPopClientAttrib");
};

enum base_depDecls = _base_depDecls ~ baseDecls;
enum base_depFuncs = _base_depFuncs ~ baseFuncs;
enum base_depLoader = _base_depLoader ~ baseLoader;
