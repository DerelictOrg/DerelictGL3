/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

// Deprecated OpenGL 1.x symbols
module derelict.opengl.versions.gl1x_dep;

import derelict.opengl.types,
       derelict.opengl.versions.base,
       derelict.opengl.versions.base_dep,
       derelict.opengl.versions.gl1x;

enum _gl1_depDecls =
q{
enum : uint
{
    // OpenGL 1.2
    GL_RESCALE_NORMAL                 = 0x803A,
    GL_LIGHT_MODEL_COLOR_CONTROL      = 0x81F8,
    GL_SINGLE_COLOR                   = 0x81F9,
    GL_SEPARATE_SPECULAR_COLOR        = 0x81FA,
    GL_ALIASED_POINT_SIZE_RANGE       = 0x846D,
    GL_CONVOLUTION_1D                 = 0x8010,
    GL_CONVOLUTION_2D                 = 0x8011,
    GL_SEPARABLE_2D                   = 0x8012,
    GL_CONVOLUTION_BORDER_MODE        = 0x8013,
    GL_CONVOLUTION_FILTER_SCALE       = 0x8014,
    GL_CONVOLUTION_FILTER_BIAS        = 0x8015,
    GL_REDUCE                         = 0x8016,
    GL_CONVOLUTION_FORMAT             = 0x8017,
    GL_CONVOLUTION_WIDTH              = 0x8018,
    GL_CONVOLUTION_HEIGHT             = 0x8019,
    GL_MAX_CONVOLUTION_WIDTH          = 0x801A,
    GL_MAX_CONVOLUTION_HEIGHT         = 0x801B,
    GL_POST_CONVOLUTION_RED_SCALE     = 0x801C,
    GL_POST_CONVOLUTION_GREEN_SCALE   = 0x801D,
    GL_POST_CONVOLUTION_BLUE_SCALE    = 0x801E,
    GL_POST_CONVOLUTION_ALPHA_SCALE   = 0x801F,
    GL_POST_CONVOLUTION_RED_BIAS      = 0x8020,
    GL_POST_CONVOLUTION_GREEN_BIAS    = 0x8021,
    GL_POST_CONVOLUTION_BLUE_BIAS     = 0x8022,
    GL_POST_CONVOLUTION_ALPHA_BIAS    = 0x8023,
    GL_HISTOGRAM                      = 0x8024,
    GL_PROXY_HISTOGRAM                = 0x8025,
    GL_HISTOGRAM_WIDTH                = 0x8026,
    GL_HISTOGRAM_FORMAT               = 0x8027,
    GL_HISTOGRAM_RED_SIZE             = 0x8028,
    GL_HISTOGRAM_GREEN_SIZE           = 0x8029,
    GL_HISTOGRAM_BLUE_SIZE            = 0x802A,
    GL_HISTOGRAM_ALPHA_SIZE           = 0x802B,
    GL_HISTOGRAM_LUMINANCE_SIZE       = 0x802C,
    GL_HISTOGRAM_SINK                 = 0x802D,
    GL_MINMAX                         = 0x802E,
    GL_MINMAX_FORMAT                  = 0x802F,
    GL_MINMAX_SINK                    = 0x8030,
    GL_TABLE_TOO_LARGE                = 0x8031,
    GL_COLOR_MATRIX                   = 0x80B1,
    GL_COLOR_MATRIX_STACK_DEPTH       = 0x80B2,
    GL_MAX_COLOR_MATRIX_STACK_DEPTH   = 0x80B3,
    GL_POST_COLOR_MATRIX_RED_SCALE    = 0x80B4,
    GL_POST_COLOR_MATRIX_GREEN_SCALE  = 0x80B5,
    GL_POST_COLOR_MATRIX_BLUE_SCALE   = 0x80B6,
    GL_POST_COLOR_MATRIX_ALPHA_SCALE  = 0x80B7,
    GL_POST_COLOR_MATRIX_RED_BIAS     = 0x80B8,
    GL_POST_COLOR_MATRIX_GREEN_BIAS   = 0x80B9,
    GL_POST_COLOR_MATRIX_BLUE_BIAS    = 0x80BA,
    GL_POST_COLOR_MATRIX_ALPHA_BIAS   = 0x80BB,
    GL_COLOR_TABLE                    = 0x80D0,
    GL_POST_CONVOLUTION_COLOR_TABLE   = 0x80D1,
    GL_POST_COLOR_MATRIX_COLOR_TABLE  = 0x80D2,
    GL_PROXY_COLOR_TABLE              = 0x80D3,
    GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4,
    GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5,
    GL_COLOR_TABLE_SCALE              = 0x80D6,
    GL_COLOR_TABLE_BIAS               = 0x80D7,
    GL_COLOR_TABLE_FORMAT             = 0x80D8,
    GL_COLOR_TABLE_WIDTH              = 0x80D9,
    GL_COLOR_TABLE_RED_SIZE           = 0x80DA,
    GL_COLOR_TABLE_GREEN_SIZE         = 0x80DB,
    GL_COLOR_TABLE_BLUE_SIZE          = 0x80DC,
    GL_COLOR_TABLE_ALPHA_SIZE         = 0x80DD,
    GL_COLOR_TABLE_LUMINANCE_SIZE     = 0x80DE,
    GL_COLOR_TABLE_INTENSITY_SIZE     = 0x80DF,
    GL_CONSTANT_BORDER                = 0x8151,
    GL_REPLICATE_BORDER               = 0x8153,
    GL_CONVOLUTION_BORDER_COLOR       = 0x8154,

    // OpenGL 1.3
    GL_CLIENT_ACTIVE_TEXTURE          = 0x84E1,
    GL_MAX_TEXTURE_UNITS              = 0x84E2,
    GL_TRANSPOSE_MODELVIEW_MATRIX     = 0x84E3,
    GL_TRANSPOSE_PROJECTION_MATRIX    = 0x84E4,
    GL_TRANSPOSE_TEXTURE_MATRIX       = 0x84E5,
    GL_TRANSPOSE_COLOR_MATRIX         = 0x84E6,
    GL_MULTISAMPLE_BIT                = 0x20000000,
    GL_NORMAL_MAP                     = 0x8511,
    GL_REFLECTION_MAP                 = 0x8512,
    GL_COMPRESSED_ALPHA               = 0x84E9,
    GL_COMPRESSED_LUMINANCE           = 0x84EA,
    GL_COMPRESSED_LUMINANCE_ALPHA     = 0x84EB,
    GL_COMPRESSED_INTENSITY           = 0x84EC,
    GL_COMBINE                        = 0x8570,
    GL_COMBINE_RGB                    = 0x8571,
    GL_COMBINE_ALPHA                  = 0x8572,
    GL_SOURCE0_RGB                    = 0x8580,
    GL_SOURCE1_RGB                    = 0x8581,
    GL_SOURCE2_RGB                    = 0x8582,
    GL_SOURCE0_ALPHA                  = 0x8588,
    GL_SOURCE1_ALPHA                  = 0x8589,
    GL_SOURCE2_ALPHA                  = 0x858A,
    GL_OPERAND0_RGB                   = 0x8590,
    GL_OPERAND1_RGB                   = 0x8591,
    GL_OPERAND2_RGB                   = 0x8592,
    GL_OPERAND0_ALPHA                 = 0x8598,
    GL_OPERAND1_ALPHA                 = 0x8599,
    GL_OPERAND2_ALPHA                 = 0x859A,
    GL_RGB_SCALE                      = 0x8573,
    GL_ADD_SIGNED                     = 0x8574,
    GL_INTERPOLATE                    = 0x8575,
    GL_SUBTRACT                       = 0x84E7,
    GL_CONSTANT                       = 0x8576,
    GL_PRIMARY_COLOR                  = 0x8577,
    GL_PREVIOUS                       = 0x8578,
    GL_DOT3_RGB                       = 0x86AE,
    GL_DOT3_RGBA                      = 0x86AF,

    // OpenGL 1.4
    GL_POINT_SIZE_MIN                 = 0x8126,
    GL_POINT_SIZE_MAX                 = 0x8127,
    GL_POINT_DISTANCE_ATTENUATION     = 0x8129,
    GL_GENERATE_MIPMAP                = 0x8191,
    GL_GENERATE_MIPMAP_HINT           = 0x8192,
    GL_FOG_COORDINATE_SOURCE          = 0x8450,
    GL_FOG_COORDINATE                 = 0x8451,
    GL_FRAGMENT_DEPTH                 = 0x8452,
    GL_CURRENT_FOG_COORDINATE         = 0x8453,
    GL_FOG_COORDINATE_ARRAY_TYPE      = 0x8454,
    GL_FOG_COORDINATE_ARRAY_STRIDE    = 0x8455,
    GL_FOG_COORDINATE_ARRAY_POINTER   = 0x8456,
    GL_FOG_COORDINATE_ARRAY           = 0x8457,
    GL_COLOR_SUM                      = 0x8458,
    GL_CURRENT_SECONDARY_COLOR        = 0x8459,
    GL_SECONDARY_COLOR_ARRAY_SIZE     = 0x845A,
    GL_SECONDARY_COLOR_ARRAY_TYPE     = 0x845B,
    GL_SECONDARY_COLOR_ARRAY_STRIDE   = 0x845C,
    GL_SECONDARY_COLOR_ARRAY_POINTER  = 0x845D,
    GL_SECONDARY_COLOR_ARRAY          = 0x845E,
    GL_TEXTURE_FILTER_CONTROL         = 0x8500,
    GL_DEPTH_TEXTURE_MODE             = 0x884B,
    GL_COMPARE_R_TO_TEXTURE           = 0x884E,

    // OpenGL 1.5
    GL_VERTEX_ARRAY_BUFFER_BINDING    = 0x8896,
    GL_NORMAL_ARRAY_BUFFER_BINDING    = 0x8897,
    GL_COLOR_ARRAY_BUFFER_BINDING     = 0x8898,
    GL_INDEX_ARRAY_BUFFER_BINDING     = 0x8899,
    GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A,
    GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B,
    GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C,
    GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D,
    GL_WEIGHT_ARRAY_BUFFER_BINDING    = 0x889E,
    GL_FOG_COORD_SRC                  = 0x8450,
    GL_FOG_COORD                      = 0x8451,
    GL_CURRENT_FOG_COORD              = 0x8453,
    GL_FOG_COORD_ARRAY_TYPE           = 0x8454,
    GL_FOG_COORD_ARRAY_STRIDE         = 0x8455,
    GL_FOG_COORD_ARRAY_POINTER        = 0x8456,
    GL_FOG_COORD_ARRAY                = 0x8457,
    GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D,
    GL_SRC0_RGB                       = 0x8580,
    GL_SRC1_RGB                       = 0x8581,
    GL_SRC2_RGB                       = 0x8582,
    GL_SRC0_ALPHA                     = 0x8588,
    GL_SRC1_ALPHA                     = 0x8589,
    GL_SRC2_ALPHA                     = 0x858A,
}

extern(System) @nogc nothrow {
    // OpenGL 1.2
    alias da_glColorTable = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
    alias da_glColorSubTable = void function(GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
    alias da_glColorTableParameteriv = void function(GLenum, GLenum, const(GLint)*);
    alias da_glColorTableParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
    alias da_glCopyColorSubTable = void function(GLenum, GLsizei, GLint, GLint, GLsizei);
    alias da_glCopyColorTable = void function(GLenum, GLenum, GLint, GLint, GLsizei);
    alias da_glGetColorTable = void function(GLenum, GLenum, GLenum, void*);
    alias da_glGetColorTableParameterfv = void function(GLenum, GLenum, GLfloat*);
    alias da_glGetColorTableParameteriv = void function(GLenum, GLenum, GLint*);
    alias da_glHistogram = void function(GLenum, GLsizei, GLenum, GLboolean);
    alias da_glResetHistogram = void function(GLenum);
    alias da_glGetHistogram = void function(GLenum, GLboolean, GLenum, GLenum, void*);
    alias da_glGetHistogramParameterfv = void function(GLenum, GLenum, GLfloat*);
    alias da_glGetHistogramParameteriv = void function(GLenum, GLenum, GLint*);
    alias da_glMinmax = void function(GLenum, GLenum, GLboolean);
    alias da_glResetMinmax = void function(GLenum);
    alias da_glGetMinmax = void function(GLenum, GLboolean, GLenum, GLenum, void*);
    alias da_glGetMinmaxParameterfv = void function(GLenum, GLenum, GLfloat*);
    alias da_glGetMinmaxParameteriv = void function(GLenum, GLenum, GLint*);
    alias da_glConvolutionFilter1D = void function(GLenum, GLenum, GLsizei, GLenum, GLenum, const(void)*);
    alias da_glConvolutionFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*);
    alias da_glConvolutionParameterf = void function(GLenum, GLenum, GLfloat);
    alias da_glConvolutionParameterfv = void function(GLenum, GLenum, const(GLfloat)*);
    alias da_glConvolutionParameteri = void function(GLenum, GLenum, GLint);
    alias da_glConvolutionParameteriv = void function(GLenum, GLenum, const(GLint)*);
    alias da_glCopyConvolutionFilter1D = void function(GLenum, GLenum, GLint, GLint, GLsizei);
    alias da_glCopyConvolutionFilter2D = void function(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    alias da_glGetConvolutionFilter = void function(GLenum, GLenum, GLenum, void*);
    alias da_glGetConvolutionParameterfv = void function(GLenum, GLenum, GLfloat*);
    alias da_glGetConvolutionParameteriv = void function(GLenum, GLenum, GLint*);
    alias da_glSeparableFilter2D = void function(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const(void)*, const(void)*);
    alias da_glGetSeparableFilter = void function(GLenum, GLenum, GLenum, void*, void*, void*);

    // OpenGL 1.3
    alias da_glClientActiveTexture = void function(GLenum);
    alias da_glMultiTexCoord1d = void function(GLenum, GLdouble);
    alias da_glMultiTexCoord1dv = void function(GLenum, const(GLdouble)*);
    alias da_glMultiTexCoord1f = void function(GLenum, GLfloat);
    alias da_glMultiTexCoord1fv = void function(GLenum, const(GLfloat)*);
    alias da_glMultiTexCoord1i = void function(GLenum, GLint);
    alias da_glMultiTexCoord1iv = void function(GLenum, const(GLint)*);
    alias da_glMultiTexCoord1s = void function(GLenum, GLshort);
    alias da_glMultiTexCoord1sv = void function(GLenum, const(GLshort)*);
    alias da_glMultiTexCoord2d = void function(GLenum, GLdouble, GLdouble);
    alias da_glMultiTexCoord2dv = void function(GLenum, const(GLdouble)*);
    alias da_glMultiTexCoord2f = void function(GLenum, GLfloat, GLfloat);
    alias da_glMultiTexCoord2fv = void function(GLenum, const(GLfloat)*);
    alias da_glMultiTexCoord2i = void function(GLenum, GLint, GLint);
    alias da_glMultiTexCoord2iv = void function(GLenum, const(GLint)*);
    alias da_glMultiTexCoord2s = void function(GLenum, GLshort, GLshort);
    alias da_glMultiTexCoord2sv = void function(GLenum, const(GLshort)*);
    alias da_glMultiTexCoord3d = void function(GLenum, GLdouble, GLdouble, GLdouble);
    alias da_glMultiTexCoord3dv = void function(GLenum, const(GLdouble)*);
    alias da_glMultiTexCoord3f = void function(GLenum, GLfloat, GLfloat, GLfloat);
    alias da_glMultiTexCoord3fv = void function(GLenum, const(GLfloat)*);
    alias da_glMultiTexCoord3i = void function(GLenum, GLint, GLint, GLint);
    alias da_glMultiTexCoord3iv = void function(GLenum, const(GLint)*);
    alias da_glMultiTexCoord3s = void function(GLenum, GLshort, GLshort, GLshort);
    alias da_glMultiTexCoord3sv = void function(GLenum, const(GLshort)*);
    alias da_glMultiTexCoord4d = void function(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    alias da_glMultiTexCoord4dv = void function(GLenum, const(GLdouble)*);
    alias da_glMultiTexCoord4f = void function(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    alias da_glMultiTexCoord4fv = void function(GLenum, const(GLfloat)*);
    alias da_glMultiTexCoord4i = void function(GLenum, GLint, GLint, GLint, GLint);
    alias da_glMultiTexCoord4iv = void function(GLenum, const(GLint)*);
    alias da_glMultiTexCoord4s = void function(GLenum, GLshort, GLshort, GLshort, GLshort);
    alias da_glMultiTexCoord4sv = void function(GLenum, const(GLshort)*);
    alias da_glLoadTransposeMatrixd = void function(GLdouble*);
    alias da_glLoadTransposeMatrixf = void function(const(GLfloat)*);
    alias da_glMultTransposeMatrixd = void function(const(GLdouble)*);
    alias da_glMultTransposeMatrixf = void function(const(GLfloat)*);

    // OpenGL 1.4
    alias da_glFogCoordf = void function(GLfloat);
    alias da_glFogCoordfv = void function(const(GLfloat)*);
    alias da_glFogCoordd = void function(GLdouble);
    alias da_glFogCoorddv = void function(const(GLdouble)*);
    alias da_glFogCoordPointer = void function(GLenum, GLsizei,const(void)*);
    alias da_glSecondaryColor3b = void function(GLbyte, GLbyte, GLbyte);
    alias da_glSecondaryColor3bv = void function(const(GLbyte)*);
    alias da_glSecondaryColor3d = void function(GLdouble, GLdouble, GLdouble);
    alias da_glSecondaryColor3dv = void function(const(GLdouble)*);
    alias da_glSecondaryColor3f = void function(GLfloat, GLfloat, GLfloat);
    alias da_glSecondaryColor3fv = void function(const(GLfloat)*);
    alias da_glSecondaryColor3i = void function(GLint, GLint, GLint);
    alias da_glSecondaryColor3iv = void function(const(GLint)*);
    alias da_glSecondaryColor3s = void function(GLshort, GLshort, GLshort);
    alias da_glSecondaryColor3sv = void function(const(GLshort)*);
    alias da_glSecondaryColor3ub = void function(GLubyte, GLubyte, GLubyte);
    alias da_glSecondaryColor3ubv = void function(const(GLubyte)*);
    alias da_glSecondaryColor3ui = void function(GLuint, GLuint, GLuint);
    alias da_glSecondaryColor3uiv = void function(const(GLuint)*);
    alias da_glSecondaryColor3us = void function(GLushort, GLushort, GLushort);
    alias da_glSecondaryColor3usv = void function(const(GLushort)*);
    alias da_glSecondaryColorPointer = void function(GLint, GLenum, GLsizei, void*);
    alias da_glWindowPos2d = void function(GLdouble, GLdouble);
    alias da_glWindowPos2dv = void function(const(GLdouble)*);
    alias da_glWindowPos2f = void function(GLfloat, GLfloat);
    alias da_glWindowPos2fv = void function(const(GLfloat)*);
    alias da_glWindowPos2i = void function(GLint, GLint);
    alias da_glWindowPos2iv = void function(const(GLint)*);
    alias da_glWindowPos2s = void function(GLshort, GLshort);
    alias da_glWindowPos2sv = void function(const(GLshort)*);
    alias da_glWindowPos3d = void function(GLdouble, GLdouble, GLdouble);
    alias da_glWindowPos3dv = void function(const(GLdouble)*);
    alias da_glWindowPos3f = void function(GLfloat, GLfloat, GLfloat);
    alias da_glWindowPos3fv = void function(const(GLfloat)*);
    alias da_glWindowPos3i = void function(GLint, GLint, GLint);
    alias da_glWindowPos3iv = void function(const(GLint)*);
    alias da_glWindowPos3s = void function(GLshort, GLshort, GLshort);
    alias da_glWindowPos3sv = void function(const(GLshort)*);
}};

enum _gl1_depFuncs =
q{
    // OpenGL 1.2
    da_glColorTable glColorTable;
    da_glColorSubTable glColorSubTable;
    da_glColorTableParameteriv glColorTableParameteriv;
    da_glColorTableParameterfv glColorTableParameterfv;
    da_glCopyColorSubTable glCopyColorSubTable;
    da_glCopyColorTable glCopyColorTable;
    da_glGetColorTable glGetColorTable;
    da_glGetColorTableParameterfv glGetColorTableParameterfv;
    da_glGetColorTableParameteriv glGetColorTableParameteriv;
    da_glHistogram glHistogram;
    da_glResetHistogram glResetHistogram;
    da_glGetHistogram glGetHistogram;
    da_glGetHistogramParameterfv glGetHistogramParameterfv;
    da_glGetHistogramParameteriv glGetHistogramParameteriv;
    da_glMinmax glMinmax;
    da_glResetMinmax glResetMinmax;
    da_glGetMinmax glGetMinmax;
    da_glGetMinmaxParameterfv glGetMinmaxParameterfv;
    da_glGetMinmaxParameteriv glGetMinmaxParameteriv;
    da_glConvolutionFilter1D glConvolutionFilter1D;
    da_glConvolutionFilter2D glConvolutionFilter2D;
    da_glConvolutionParameterf glConvolutionParameterf;
    da_glConvolutionParameterfv glConvolutionParameterfv;
    da_glConvolutionParameteri glConvolutionParameteri;
    da_glConvolutionParameteriv glConvolutionParameteriv;
    da_glCopyConvolutionFilter1D glCopyConvolutionFilter1D;
    da_glCopyConvolutionFilter2D glCopyConvolutionFilter2D;
    da_glGetConvolutionFilter glGetConvolutionFilter;
    da_glGetConvolutionParameterfv glGetConvolutionParameterfv;
    da_glGetConvolutionParameteriv glGetConvolutionParameteriv;
    da_glSeparableFilter2D glSeparableFilter2D;
    da_glGetSeparableFilter glGetSeparableFilter;

    // OpenGL 1.3
    da_glClientActiveTexture glClientActiveTexture;
    da_glMultiTexCoord1d glMultiTexCoord1d;
    da_glMultiTexCoord1dv glMultiTexCoord1dv;
    da_glMultiTexCoord1f glMultiTexCoord1f;
    da_glMultiTexCoord1fv glMultiTexCoord1fv;
    da_glMultiTexCoord1i glMultiTexCoord1i;
    da_glMultiTexCoord1iv glMultiTexCoord1iv;
    da_glMultiTexCoord1s glMultiTexCoord1s;
    da_glMultiTexCoord1sv glMultiTexCoord1sv;
    da_glMultiTexCoord2d glMultiTexCoord2d;
    da_glMultiTexCoord2dv glMultiTexCoord2dv;
    da_glMultiTexCoord2f glMultiTexCoord2f;
    da_glMultiTexCoord2fv glMultiTexCoord2fv;
    da_glMultiTexCoord2i glMultiTexCoord2i;
    da_glMultiTexCoord2iv glMultiTexCoord2iv;
    da_glMultiTexCoord2s glMultiTexCoord2s;
    da_glMultiTexCoord2sv glMultiTexCoord2sv;
    da_glMultiTexCoord3d glMultiTexCoord3d;
    da_glMultiTexCoord3dv glMultiTexCoord3dv;
    da_glMultiTexCoord3f glMultiTexCoord3f;
    da_glMultiTexCoord3fv glMultiTexCoord3fv;
    da_glMultiTexCoord3i glMultiTexCoord3i;
    da_glMultiTexCoord3iv glMultiTexCoord3iv;
    da_glMultiTexCoord3s glMultiTexCoord3s;
    da_glMultiTexCoord3sv glMultiTexCoord3sv;
    da_glMultiTexCoord4d glMultiTexCoord4d;
    da_glMultiTexCoord4dv glMultiTexCoord4dv;
    da_glMultiTexCoord4f glMultiTexCoord4f;
    da_glMultiTexCoord4fv glMultiTexCoord4fv;
    da_glMultiTexCoord4i glMultiTexCoord4i;
    da_glMultiTexCoord4iv glMultiTexCoord4iv;
    da_glMultiTexCoord4s glMultiTexCoord4s;
    da_glMultiTexCoord4sv glMultiTexCoord4sv;
    da_glLoadTransposeMatrixd glLoadTransposeMatrixd;
    da_glLoadTransposeMatrixf glLoadTransposeMatrixf;
    da_glMultTransposeMatrixd glMultTransposeMatrixd;
    da_glMultTransposeMatrixf glMultTransposeMatrixf;

    // OpenGL 1.4
    da_glFogCoordf glFogCoordf;
    da_glFogCoordfv glFogCoordfv;
    da_glFogCoordd glFogCoordd;
    da_glFogCoorddv glFogCoorddv;
    da_glFogCoordPointer glFogCoordPointer;
    da_glSecondaryColor3b glSecondaryColor3b;
    da_glSecondaryColor3bv glSecondaryColor3bv;
    da_glSecondaryColor3d glSecondaryColor3d;
    da_glSecondaryColor3dv glSecondaryColor3dv;
    da_glSecondaryColor3f glSecondaryColor3f;
    da_glSecondaryColor3fv glSecondaryColor3fv;
    da_glSecondaryColor3i glSecondaryColor3i;
    da_glSecondaryColor3iv glSecondaryColor3iv;
    da_glSecondaryColor3s glSecondaryColor3s;
    da_glSecondaryColor3sv glSecondaryColor3sv;
    da_glSecondaryColor3ub glSecondaryColor3ub;
    da_glSecondaryColor3ubv glSecondaryColor3ubv;
    da_glSecondaryColor3ui glSecondaryColor3ui;
    da_glSecondaryColor3uiv glSecondaryColor3uiv;
    da_glSecondaryColor3us glSecondaryColor3us;
    da_glSecondaryColor3usv glSecondaryColor3usv;
    da_glSecondaryColorPointer glSecondaryColorPointer;
    da_glWindowPos2d glWindowPos2d;
    da_glWindowPos2dv glWindowPos2dv;
    da_glWindowPos2f glWindowPos2f;
    da_glWindowPos2fv glWindowPos2fv;
    da_glWindowPos2i glWindowPos2i;
    da_glWindowPos2iv glWindowPos2iv;
    da_glWindowPos2s glWindowPos2s;
    da_glWindowPos2sv glWindowPos2sv;
    da_glWindowPos3d glWindowPos3d;
    da_glWindowPos3dv glWindowPos3dv;
    da_glWindowPos3f glWindowPos3f;
    da_glWindowPos3fv glWindowPos3fv;
    da_glWindowPos3i glWindowPos3i;
    da_glWindowPos3iv glWindowPos3iv;
    da_glWindowPos3s glWindowPos3s;
    da_glWindowPos3sv glWindowPos3sv;
};

enum _gl12_depLoader =
q{
    if(maxVer >= GLVersion.gl12) {
        bindGLFunc(cast(void**)&glColorTable, "glColorTable");
        bindGLFunc(cast(void**)&glColorSubTable, "glColorSubTable");
        bindGLFunc(cast(void**)&glColorTableParameteriv, "glColorTableParameteriv");
        bindGLFunc(cast(void**)&glColorTableParameterfv, "glColorTableParameterfv");
        bindGLFunc(cast(void**)&glCopyColorSubTable, "glCopyColorSubTable");
        bindGLFunc(cast(void**)&glCopyColorTable, "glCopyColorTable");
        bindGLFunc(cast(void**)&glGetColorTable, "glGetColorTable");
        bindGLFunc(cast(void**)&glGetColorTableParameterfv, "glGetColorTableParameterfv");
        bindGLFunc(cast(void**)&glGetColorTableParameteriv, "glGetColorTableParameteriv");
        bindGLFunc(cast(void**)&glHistogram, "glHistogram");
        bindGLFunc(cast(void**)&glResetHistogram, "glResetHistogram");
        bindGLFunc(cast(void**)&glGetHistogram, "glGetHistogram");
        bindGLFunc(cast(void**)&glGetHistogramParameterfv, "glGetHistogramParameterfv");
        bindGLFunc(cast(void**)&glGetHistogramParameteriv, "glGetHistogramParameteriv");
        bindGLFunc(cast(void**)&glMinmax, "glMinmax");
        bindGLFunc(cast(void**)&glResetMinmax, "glResetMinmax");
        bindGLFunc(cast(void**)&glGetMinmax, "glGetMinmax");
        bindGLFunc(cast(void**)&glGetMinmaxParameterfv, "glGetMinmaxParameterfv");
        bindGLFunc(cast(void**)&glGetMinmaxParameteriv, "glGetMinmaxParameteriv");
        bindGLFunc(cast(void**)&glConvolutionFilter1D, "glConvolutionFilter1D");
        bindGLFunc(cast(void**)&glConvolutionFilter2D, "glConvolutionFilter2D");
        bindGLFunc(cast(void**)&glConvolutionParameterf, "glConvolutionParameterf");
        bindGLFunc(cast(void**)&glConvolutionParameterfv, "glConvolutionParameterfv");
        bindGLFunc(cast(void**)&glConvolutionParameteri, "glConvolutionParameteri");
        bindGLFunc(cast(void**)&glConvolutionParameteriv, "glConvolutionParameteriv");
        bindGLFunc(cast(void**)&glCopyConvolutionFilter1D, "glCopyConvolutionFilter1D");
        bindGLFunc(cast(void**)&glCopyConvolutionFilter2D, "glCopyConvolutionFilter2D");
        bindGLFunc(cast(void**)&glGetConvolutionFilter, "glGetConvolutionFilter");
        bindGLFunc(cast(void**)&glGetConvolutionParameterfv, "glGetConvolutionParameterfv");
        bindGLFunc(cast(void**)&glGetConvolutionParameteriv, "glGetConvolutionParameteriv");
        bindGLFunc(cast(void**)&glSeparableFilter2D, "glSeparableFilter2D");
        bindGLFunc(cast(void**)&glGetSeparableFilter, "glGetSeparableFilter");
    }
};

enum _gl13_depLoader =
q{
    if(maxVer >= GLVersion.gl13) {
        bindGLFunc(cast(void**)&glClientActiveTexture, "glClientActiveTexture");
        bindGLFunc(cast(void**)&glMultiTexCoord1d, "glMultiTexCoord1d");
        bindGLFunc(cast(void**)&glMultiTexCoord1dv, "glMultiTexCoord1dv");
        bindGLFunc(cast(void**)&glMultiTexCoord1f, "glMultiTexCoord1f");
        bindGLFunc(cast(void**)&glMultiTexCoord1fv, "glMultiTexCoord1fv");
        bindGLFunc(cast(void**)&glMultiTexCoord1i, "glMultiTexCoord1i");
        bindGLFunc(cast(void**)&glMultiTexCoord1iv, "glMultiTexCoord1iv");
        bindGLFunc(cast(void**)&glMultiTexCoord1s, "glMultiTexCoord1s");
        bindGLFunc(cast(void**)&glMultiTexCoord1sv, "glMultiTexCoord1sv");
        bindGLFunc(cast(void**)&glMultiTexCoord2d, "glMultiTexCoord2d");
        bindGLFunc(cast(void**)&glMultiTexCoord2dv, "glMultiTexCoord2dv");
        bindGLFunc(cast(void**)&glMultiTexCoord2f, "glMultiTexCoord2f");
        bindGLFunc(cast(void**)&glMultiTexCoord2fv, "glMultiTexCoord2fv");
        bindGLFunc(cast(void**)&glMultiTexCoord2i, "glMultiTexCoord2i");
        bindGLFunc(cast(void**)&glMultiTexCoord2iv, "glMultiTexCoord2iv");
        bindGLFunc(cast(void**)&glMultiTexCoord2s, "glMultiTexCoord2s");
        bindGLFunc(cast(void**)&glMultiTexCoord2sv, "glMultiTexCoord2sv");
        bindGLFunc(cast(void**)&glMultiTexCoord3d, "glMultiTexCoord3d");
        bindGLFunc(cast(void**)&glMultiTexCoord3dv, "glMultiTexCoord3dv");
        bindGLFunc(cast(void**)&glMultiTexCoord3f, "glMultiTexCoord3f");
        bindGLFunc(cast(void**)&glMultiTexCoord3fv, "glMultiTexCoord3fv");
        bindGLFunc(cast(void**)&glMultiTexCoord3i, "glMultiTexCoord3i");
        bindGLFunc(cast(void**)&glMultiTexCoord3iv, "glMultiTexCoord3iv");
        bindGLFunc(cast(void**)&glMultiTexCoord3s, "glMultiTexCoord3s");
        bindGLFunc(cast(void**)&glMultiTexCoord3sv, "glMultiTexCoord3sv");
        bindGLFunc(cast(void**)&glMultiTexCoord4d, "glMultiTexCoord4d");
        bindGLFunc(cast(void**)&glMultiTexCoord4dv, "glMultiTexCoord4dv");
        bindGLFunc(cast(void**)&glMultiTexCoord4f, "glMultiTexCoord4f");
        bindGLFunc(cast(void**)&glMultiTexCoord4fv, "glMultiTexCoord4fv");
        bindGLFunc(cast(void**)&glMultiTexCoord4i, "glMultiTexCoord4i");
        bindGLFunc(cast(void**)&glMultiTexCoord4iv, "glMultiTexCoord4iv");
        bindGLFunc(cast(void**)&glMultiTexCoord4s, "glMultiTexCoord4s");
        bindGLFunc(cast(void**)&glMultiTexCoord4sv, "glMultiTexCoord4sv");
        bindGLFunc(cast(void**)&glLoadTransposeMatrixd, "glLoadTransposeMatrixd");
        bindGLFunc(cast(void**)&glLoadTransposeMatrixf, "glLoadTransposeMatrixf");
        bindGLFunc(cast(void**)&glMultTransposeMatrixd, "glMultTransposeMatrixd");
        bindGLFunc(cast(void**)&glMultTransposeMatrixf, "glMultTransposeMatrixf");
    }
};

enum _gl14_depLoader =
q{
    if(maxVer >= GLVersion.gl14) {
        bindGLFunc(cast(void**)&glFogCoordf, "glFogCoordf");
        bindGLFunc(cast(void**)&glFogCoordfv, "glFogCoordfv");
        bindGLFunc(cast(void**)&glFogCoordd, "glFogCoordd");
        bindGLFunc(cast(void**)&glFogCoorddv, "glFogCoorddv");
        bindGLFunc(cast(void**)&glFogCoordPointer, "glFogCoordPointer");
        bindGLFunc(cast(void**)&glSecondaryColor3b, "glSecondaryColor3b");
        bindGLFunc(cast(void**)&glSecondaryColor3bv, "glSecondaryColor3bv");
        bindGLFunc(cast(void**)&glSecondaryColor3d, "glSecondaryColor3d");
        bindGLFunc(cast(void**)&glSecondaryColor3dv, "glSecondaryColor3dv");
        bindGLFunc(cast(void**)&glSecondaryColor3f, "glSecondaryColor3f");
        bindGLFunc(cast(void**)&glSecondaryColor3fv, "glSecondaryColor3fv");
        bindGLFunc(cast(void**)&glSecondaryColor3i, "glSecondaryColor3i");
        bindGLFunc(cast(void**)&glSecondaryColor3iv, "glSecondaryColor3iv");
        bindGLFunc(cast(void**)&glSecondaryColor3s, "glSecondaryColor3s");
        bindGLFunc(cast(void**)&glSecondaryColor3sv, "glSecondaryColor3sv");
        bindGLFunc(cast(void**)&glSecondaryColor3ub, "glSecondaryColor3ub");
        bindGLFunc(cast(void**)&glSecondaryColor3ubv, "glSecondaryColor3ubv");
        bindGLFunc(cast(void**)&glSecondaryColor3ui, "glSecondaryColor3ui");
        bindGLFunc(cast(void**)&glSecondaryColor3uiv, "glSecondaryColor3uiv");
        bindGLFunc(cast(void**)&glSecondaryColor3us, "glSecondaryColor3us");
        bindGLFunc(cast(void**)&glSecondaryColor3usv, "glSecondaryColor3usv");
        bindGLFunc(cast(void**)&glSecondaryColorPointer, "glSecondaryColorPointer");
        bindGLFunc(cast(void**)&glWindowPos2d, "glWindowPos2d");
        bindGLFunc(cast(void**)&glWindowPos2dv, "glWindowPos2dv");
        bindGLFunc(cast(void**)&glWindowPos2f, "glWindowPos2f");
        bindGLFunc(cast(void**)&glWindowPos2fv, "glWindowPos2fv");
        bindGLFunc(cast(void**)&glWindowPos2i, "glWindowPos2i");
        bindGLFunc(cast(void**)&glWindowPos2iv, "glWindowPos2iv");
        bindGLFunc(cast(void**)&glWindowPos2s, "glWindowPos2s");
        bindGLFunc(cast(void**)&glWindowPos2sv, "glWindowPos2sv");
        bindGLFunc(cast(void**)&glWindowPos3d, "glWindowPos3d");
        bindGLFunc(cast(void**)&glWindowPos3dv, "glWindowPos3dv");
        bindGLFunc(cast(void**)&glWindowPos3f, "glWindowPos3f");
        bindGLFunc(cast(void**)&glWindowPos3fv, "glWindowPos3fv");
        bindGLFunc(cast(void**)&glWindowPos3i, "glWindowPos3i");
        bindGLFunc(cast(void**)&glWindowPos3iv, "glWindowPos3iv");
        bindGLFunc(cast(void**)&glWindowPos3s, "glWindowPos3s");
        bindGLFunc(cast(void**)&glWindowPos3sv, "glWindowPos3sv");
    }
};

enum gl1_depDecls = base_depDecls ~ _gl1_depDecls ~ _gl1Decls;
enum gl1_depFuncs = base_depFuncs ~ _gl1_depFuncs ~ _gl1Funcs;
enum gl1_depLoader = _gl12_depLoader ~ _gl12Loader ~
                     _gl13_depLoader ~ _gl13Loader ~
                     _gl14_depLoader ~ _gl14Loader ~
                     _gl15Loader;