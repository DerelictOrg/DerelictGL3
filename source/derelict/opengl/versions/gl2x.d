/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.versions.gl2x;

import derelict.opengl.types,
       derelict.opengl.versions.gl1x;

enum _gl2Decls =
q{
enum : uint
{
    // OpenGL 2.0
    GL_BLEND_EQUATION_RGB             = 0x8009,
    GL_VERTEX_ATTRIB_ARRAY_ENABLED    = 0x8622,
    GL_VERTEX_ATTRIB_ARRAY_SIZE       = 0x8623,
    GL_VERTEX_ATTRIB_ARRAY_STRIDE     = 0x8624,
    GL_VERTEX_ATTRIB_ARRAY_TYPE       = 0x8625,
    GL_CURRENT_VERTEX_ATTRIB          = 0x8626,
    GL_VERTEX_PROGRAM_POINT_SIZE      = 0x8642,
    GL_VERTEX_ATTRIB_ARRAY_POINTER    = 0x8645,
    GL_STENCIL_BACK_FUNC              = 0x8800,
    GL_STENCIL_BACK_FAIL              = 0x8801,
    GL_STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802,
    GL_STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803,
    GL_MAX_DRAW_BUFFERS               = 0x8824,
    GL_DRAW_BUFFER0                   = 0x8825,
    GL_DRAW_BUFFER1                   = 0x8826,
    GL_DRAW_BUFFER2                   = 0x8827,
    GL_DRAW_BUFFER3                   = 0x8828,
    GL_DRAW_BUFFER4                   = 0x8829,
    GL_DRAW_BUFFER5                   = 0x882A,
    GL_DRAW_BUFFER6                   = 0x882B,
    GL_DRAW_BUFFER7                   = 0x882C,
    GL_DRAW_BUFFER8                   = 0x882D,
    GL_DRAW_BUFFER9                   = 0x882E,
    GL_DRAW_BUFFER10                  = 0x882F,
    GL_DRAW_BUFFER11                  = 0x8830,
    GL_DRAW_BUFFER12                  = 0x8831,
    GL_DRAW_BUFFER13                  = 0x8832,
    GL_DRAW_BUFFER14                  = 0x8833,
    GL_DRAW_BUFFER15                  = 0x8834,
    GL_BLEND_EQUATION_ALPHA           = 0x883D,
    GL_MAX_VERTEX_ATTRIBS             = 0x8869,
    GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A,
    GL_MAX_TEXTURE_IMAGE_UNITS        = 0x8872,
    GL_FRAGMENT_SHADER                = 0x8B30,
    GL_VERTEX_SHADER                  = 0x8B31,
    GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49,
    GL_MAX_VERTEX_UNIFORM_COMPONENTS  = 0x8B4A,
    GL_MAX_VARYING_FLOATS             = 0x8B4B,
    GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C,
    GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D,
    GL_SHADER_TYPE                    = 0x8B4F,
    GL_FLOAT_VEC2                     = 0x8B50,
    GL_FLOAT_VEC3                     = 0x8B51,
    GL_FLOAT_VEC4                     = 0x8B52,
    GL_INT_VEC2                       = 0x8B53,
    GL_INT_VEC3                       = 0x8B54,
    GL_INT_VEC4                       = 0x8B55,
    GL_BOOL                           = 0x8B56,
    GL_BOOL_VEC2                      = 0x8B57,
    GL_BOOL_VEC3                      = 0x8B58,
    GL_BOOL_VEC4                      = 0x8B59,
    GL_FLOAT_MAT2                     = 0x8B5A,
    GL_FLOAT_MAT3                     = 0x8B5B,
    GL_FLOAT_MAT4                     = 0x8B5C,
    GL_SAMPLER_1D                     = 0x8B5D,
    GL_SAMPLER_2D                     = 0x8B5E,
    GL_SAMPLER_3D                     = 0x8B5F,
    GL_SAMPLER_CUBE                   = 0x8B60,
    GL_SAMPLER_1D_SHADOW              = 0x8B61,
    GL_SAMPLER_2D_SHADOW              = 0x8B62,
    GL_DELETE_STATUS                  = 0x8B80,
    GL_COMPILE_STATUS                 = 0x8B81,
    GL_LINK_STATUS                    = 0x8B82,
    GL_VALIDATE_STATUS                = 0x8B83,
    GL_INFO_LOG_LENGTH                = 0x8B84,
    GL_ATTACHED_SHADERS               = 0x8B85,
    GL_ACTIVE_UNIFORMS                = 0x8B86,
    GL_ACTIVE_UNIFORM_MAX_LENGTH      = 0x8B87,
    GL_SHADER_SOURCE_LENGTH           = 0x8B88,
    GL_ACTIVE_ATTRIBUTES              = 0x8B89,
    GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    = 0x8B8A,
    GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B,
    GL_SHADING_LANGUAGE_VERSION       = 0x8B8C,
    GL_CURRENT_PROGRAM                = 0x8B8D,
    GL_POINT_SPRITE_COORD_ORIGIN      = 0x8CA0,
    GL_LOWER_LEFT                     = 0x8CA1,
    GL_UPPER_LEFT                     = 0x8CA2,
    GL_STENCIL_BACK_REF               = 0x8CA3,
    GL_STENCIL_BACK_VALUE_MASK        = 0x8CA4,
    GL_STENCIL_BACK_WRITEMASK         = 0x8CA5,

    // OpenGL 2.1
    GL_PIXEL_PACK_BUFFER              = 0x88EB,
    GL_PIXEL_UNPACK_BUFFER            = 0x88EC,
    GL_PIXEL_PACK_BUFFER_BINDING      = 0x88ED,
    GL_PIXEL_UNPACK_BUFFER_BINDING    = 0x88EF,
    GL_FLOAT_MAT2x3                   = 0x8B65,
    GL_FLOAT_MAT2x4                   = 0x8B66,
    GL_FLOAT_MAT3x2                   = 0x8B67,
    GL_FLOAT_MAT3x4                   = 0x8B68,
    GL_FLOAT_MAT4x2                   = 0x8B69,
    GL_FLOAT_MAT4x3                   = 0x8B6A,
    GL_SRGB                           = 0x8C40,
    GL_SRGB8                          = 0x8C41,
    GL_SRGB_ALPHA                     = 0x8C42,
    GL_SRGB8_ALPHA8                   = 0x8C43,
    GL_COMPRESSED_SRGB                = 0x8C48,
    GL_COMPRESSED_SRGB_ALPHA          = 0x8C49,
}

extern(System) @nogc nothrow {
    // OpenGL 2.0
    alias da_glBlendEquationSeparate = void function( GLenum,GLenum );
    alias da_glDrawBuffers = void function( GLsizei,const( GLenum )* );
    alias da_glStencilOpSeparate = void function( GLenum,GLenum,GLenum,GLenum );
    alias da_glStencilFuncSeparate = void function( GLenum,GLenum,GLint,GLuint );
    alias da_glStencilMaskSeparate = void function( GLenum,GLuint );
    alias da_glAttachShader = void function( GLuint,GLuint );
    alias da_glBindAttribLocation = void function( GLuint,GLuint,const( GLchar )* );
    alias da_glCompileShader = void function( GLuint );
    alias da_glCreateProgram = GLuint function();
    alias da_glCreateShader = GLuint function( GLenum );
    alias da_glDeleteProgram = void function( GLuint );
    alias da_glDeleteShader = void function( GLuint );
    alias da_glDetachShader = void function( GLuint,GLuint );
    alias da_glDisableVertexAttribArray = void function( GLuint );
    alias da_glEnableVertexAttribArray = void function( GLuint );
    alias da_glGetActiveAttrib = void function( GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar* );
    alias da_glGetActiveUniform = void function( GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar* );
    alias da_glGetAttachedShaders = void function( GLuint,GLsizei,GLsizei*,GLuint* );
    alias da_glGetAttribLocation = GLint function( GLuint,const( GLchar )* );
    alias da_glGetProgramiv = void function( GLuint,GLenum,GLint* );
    alias da_glGetProgramInfoLog = void function( GLuint,GLsizei,GLsizei*,GLchar* );
    alias da_glGetShaderiv = void function( GLuint,GLenum,GLint* );
    alias da_glGetShaderInfoLog = void function( GLuint,GLsizei,GLsizei*,GLchar* );
    alias da_glGetShaderSource = void function( GLuint,GLsizei,GLsizei*,GLchar* );
    alias da_glGetUniformLocation = GLint function( GLuint,const( GLchar )* );
    alias da_glGetUniformfv = void function( GLuint,GLint,GLfloat* );
    alias da_glGetUniformiv = void function( GLuint,GLint,GLint* );
    alias da_glGetVertexAttribdv = void function( GLuint,GLenum,GLdouble* );
    alias da_glGetVertexAttribfv = void function( GLuint,GLenum,GLfloat* );
    alias da_glGetVertexAttribiv = void function( GLuint,GLenum,GLint* );
    alias da_glGetVertexAttribPointerv = void function( GLuint,GLenum,GLvoid* );
    alias da_glIsProgram = GLboolean function( GLuint );
    alias da_glIsShader = GLboolean function( GLuint );
    alias da_glLinkProgram = void function( GLuint );
    alias da_glShaderSource = void function( GLuint,GLsizei,const( GLchar* )*,const( GLint )* );
    alias da_glUseProgram = void function( GLuint );
    alias da_glUniform1f = void function( GLint,GLfloat );
    alias da_glUniform2f = void function( GLint,GLfloat,GLfloat );
    alias da_glUniform3f = void function( GLint,GLfloat,GLfloat,GLfloat );
    alias da_glUniform4f = void function( GLint,GLfloat,GLfloat,GLfloat,GLfloat );
    alias da_glUniform1i = void function( GLint,GLint );
    alias da_glUniform2i = void function( GLint,GLint,GLint );
    alias da_glUniform3i = void function( GLint,GLint,GLint,GLint );
    alias da_glUniform4i = void function( GLint,GLint,GLint,GLint,GLint );
    alias da_glUniform1fv = void function( GLint,GLsizei,const( GLfloat )* );
    alias da_glUniform2fv = void function( GLint,GLsizei,const( GLfloat )* );
    alias da_glUniform3fv = void function( GLint,GLsizei,const( GLfloat )* );
    alias da_glUniform4fv = void function( GLint,GLsizei,const( GLfloat )* );
    alias da_glUniform1iv = void function( GLint,GLsizei,const( GLint )* );
    alias da_glUniform2iv = void function( GLint,GLsizei,const( GLint )* );
    alias da_glUniform3iv = void function( GLint,GLsizei,const( GLint )* );
    alias da_glUniform4iv = void function( GLint,GLsizei,const( GLint )* );
    alias da_glUniformMatrix2fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix3fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix4fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glValidateProgram = void function( GLuint );
    alias da_glVertexAttrib1d = void function( GLuint,GLdouble );
    alias da_glVertexAttrib1dv = void function( GLuint,const( GLdouble )* );
    alias da_glVertexAttrib1f = void function( GLuint,GLfloat );
    alias da_glVertexAttrib1fv = void function( GLuint,const( GLfloat )* );
    alias da_glVertexAttrib1s = void function( GLuint,GLshort );
    alias da_glVertexAttrib1sv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttrib2d = void function( GLuint,GLdouble,GLdouble );
    alias da_glVertexAttrib2dv = void function( GLuint,const( GLdouble )* );
    alias da_glVertexAttrib2f = void function( GLuint,GLfloat,GLfloat );
    alias da_glVertexAttrib2fv = void function( GLuint,const( GLfloat )* );
    alias da_glVertexAttrib2s = void function( GLuint,GLshort,GLshort );
    alias da_glVertexAttrib2sv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttrib3d = void function( GLuint,GLdouble,GLdouble,GLdouble );
    alias da_glVertexAttrib3dv = void function( GLuint,const( GLdouble )* );
    alias da_glVertexAttrib3f = void function( GLuint,GLfloat,GLfloat,GLfloat );
    alias da_glVertexAttrib3fv = void function( GLuint,const( GLfloat )* );
    alias da_glVertexAttrib3s = void function( GLuint,GLshort,GLshort,GLshort );
    alias da_glVertexAttrib3sv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttrib4Nbv = void function( GLuint,const( GLbyte )* );
    alias da_glVertexAttrib4Niv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttrib4Nsv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttrib4Nub = void function( GLuint,GLubyte,GLubyte,GLubyte,GLubyte );
    alias da_glVertexAttrib4Nubv = void function( GLuint,const( GLubyte )* );
    alias da_glVertexAttrib4Nuiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttrib4Nusv = void function( GLuint,const( GLushort )* );
    alias da_glVertexAttrib4bv = void function( GLuint,const( GLbyte )* );
    alias da_glVertexAttrib4d = void function( GLuint,GLdouble,GLdouble,GLdouble,GLdouble );
    alias da_glVertexAttrib4dv = void function( GLuint,const( GLdouble )* );
    alias da_glVertexAttrib4f = void function( GLuint,GLfloat,GLfloat,GLfloat,GLfloat );
    alias da_glVertexAttrib4fv = void function( GLuint,const( GLfloat )* );
    alias da_glVertexAttrib4iv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttrib4s = void function( GLuint,GLshort,GLshort,GLshort,GLshort );
    alias da_glVertexAttrib4sv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttrib4ubv = void function( GLuint,const( GLubyte )* );
    alias da_glVertexAttrib4uiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttrib4usv = void function( GLuint,const( GLushort )* );
    alias da_glVertexAttribPointer = void function( GLuint,GLint,GLenum,GLboolean,GLsizei,const( GLvoid )* );

    // OpenGL 2.1
    alias da_glUniformMatrix2x3fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix3x2fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix2x4fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix4x2fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix3x4fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
    alias da_glUniformMatrix4x3fv = void function( GLint,GLsizei,GLboolean,const( GLfloat )* );
}};

enum _gl2Funcs =
q{
    // OpenGL 2.0
    da_glBlendEquationSeparate glBlendEquationSeparate;
    da_glDrawBuffers glDrawBuffers;
    da_glStencilOpSeparate glStencilOpSeparate;
    da_glStencilFuncSeparate glStencilFuncSeparate;
    da_glStencilMaskSeparate glStencilMaskSeparate;
    da_glAttachShader glAttachShader;
    da_glBindAttribLocation glBindAttribLocation;
    da_glCompileShader glCompileShader;
    da_glCreateProgram glCreateProgram;
    da_glCreateShader glCreateShader;
    da_glDeleteProgram glDeleteProgram;
    da_glDeleteShader glDeleteShader;
    da_glDetachShader glDetachShader;
    da_glDisableVertexAttribArray glDisableVertexAttribArray;
    da_glEnableVertexAttribArray glEnableVertexAttribArray;
    da_glGetActiveAttrib glGetActiveAttrib;
    da_glGetActiveUniform glGetActiveUniform;
    da_glGetAttachedShaders glGetAttachedShaders;
    da_glGetAttribLocation glGetAttribLocation;
    da_glGetProgramiv glGetProgramiv;
    da_glGetProgramInfoLog glGetProgramInfoLog;
    da_glGetShaderiv glGetShaderiv;
    da_glGetShaderInfoLog glGetShaderInfoLog;
    da_glGetShaderSource glGetShaderSource;
    da_glGetUniformLocation glGetUniformLocation;
    da_glGetUniformfv glGetUniformfv;
    da_glGetUniformiv glGetUniformiv;
    da_glGetVertexAttribdv glGetVertexAttribdv;
    da_glGetVertexAttribfv glGetVertexAttribfv;
    da_glGetVertexAttribiv glGetVertexAttribiv;
    da_glGetVertexAttribPointerv glGetVertexAttribPointerv;
    da_glIsProgram glIsProgram;
    da_glIsShader glIsShader;
    da_glLinkProgram glLinkProgram;
    da_glShaderSource glShaderSource;
    da_glUseProgram glUseProgram;
    da_glUniform1f glUniform1f;
    da_glUniform2f glUniform2f;
    da_glUniform3f glUniform3f;
    da_glUniform4f glUniform4f;
    da_glUniform1i glUniform1i;
    da_glUniform2i glUniform2i;
    da_glUniform3i glUniform3i;
    da_glUniform4i glUniform4i;
    da_glUniform1fv glUniform1fv;
    da_glUniform2fv glUniform2fv;
    da_glUniform3fv glUniform3fv;
    da_glUniform4fv glUniform4fv;
    da_glUniform1iv glUniform1iv;
    da_glUniform2iv glUniform2iv;
    da_glUniform3iv glUniform3iv;
    da_glUniform4iv glUniform4iv;
    da_glUniformMatrix2fv glUniformMatrix2fv;
    da_glUniformMatrix3fv glUniformMatrix3fv;
    da_glUniformMatrix4fv glUniformMatrix4fv;
    da_glValidateProgram glValidateProgram;
    da_glVertexAttrib1d glVertexAttrib1d;
    da_glVertexAttrib1dv glVertexAttrib1dv;
    da_glVertexAttrib1f glVertexAttrib1f;
    da_glVertexAttrib1fv glVertexAttrib1fv;
    da_glVertexAttrib1s glVertexAttrib1s;
    da_glVertexAttrib1sv glVertexAttrib1sv;
    da_glVertexAttrib2d glVertexAttrib2d;
    da_glVertexAttrib2dv glVertexAttrib2dv;
    da_glVertexAttrib2f glVertexAttrib2f;
    da_glVertexAttrib2fv glVertexAttrib2fv;
    da_glVertexAttrib2s glVertexAttrib2s;
    da_glVertexAttrib2sv glVertexAttrib2sv;
    da_glVertexAttrib3d glVertexAttrib3d;
    da_glVertexAttrib3dv glVertexAttrib3dv;
    da_glVertexAttrib3f glVertexAttrib3f;
    da_glVertexAttrib3fv glVertexAttrib3fv;
    da_glVertexAttrib3s glVertexAttrib3s;
    da_glVertexAttrib3sv glVertexAttrib3sv;
    da_glVertexAttrib4Nbv glVertexAttrib4Nbv;
    da_glVertexAttrib4Niv glVertexAttrib4Niv;
    da_glVertexAttrib4Nsv glVertexAttrib4Nsv;
    da_glVertexAttrib4Nub glVertexAttrib4Nub;
    da_glVertexAttrib4Nubv glVertexAttrib4Nubv;
    da_glVertexAttrib4Nuiv glVertexAttrib4Nuiv;
    da_glVertexAttrib4Nusv glVertexAttrib4Nusv;
    da_glVertexAttrib4bv glVertexAttrib4bv;
    da_glVertexAttrib4d glVertexAttrib4d;
    da_glVertexAttrib4dv glVertexAttrib4dv;
    da_glVertexAttrib4f glVertexAttrib4f;
    da_glVertexAttrib4fv glVertexAttrib4fv;
    da_glVertexAttrib4iv glVertexAttrib4iv;
    da_glVertexAttrib4s glVertexAttrib4s;
    da_glVertexAttrib4sv glVertexAttrib4sv;
    da_glVertexAttrib4ubv glVertexAttrib4ubv;
    da_glVertexAttrib4uiv glVertexAttrib4uiv;
    da_glVertexAttrib4usv glVertexAttrib4usv;
    da_glVertexAttribPointer glVertexAttribPointer;

    // OpenGL 2.1
    da_glUniformMatrix2x3fv glUniformMatrix2x3fv;
    da_glUniformMatrix3x2fv glUniformMatrix3x2fv;
    da_glUniformMatrix2x4fv glUniformMatrix2x4fv;
    da_glUniformMatrix4x2fv glUniformMatrix4x2fv;
    da_glUniformMatrix3x4fv glUniformMatrix3x4fv;
    da_glUniformMatrix4x3fv glUniformMatrix4x3fv;
};

enum _gl2Loader =
q{
    if(maxVer >= GLVersion.gl20) {
        bindGLFunc(cast(void**)&glBlendEquationSeparate, "glBlendEquationSeparate");
        bindGLFunc(cast(void**)&glDrawBuffers, "glDrawBuffers");
        bindGLFunc(cast(void**)&glStencilOpSeparate, "glStencilOpSeparate");
        bindGLFunc(cast(void**)&glStencilFuncSeparate, "glStencilFuncSeparate");
        bindGLFunc(cast(void**)&glStencilMaskSeparate, "glStencilMaskSeparate");
        bindGLFunc(cast(void**)&glAttachShader, "glAttachShader");
        bindGLFunc(cast(void**)&glBindAttribLocation, "glBindAttribLocation");
        bindGLFunc(cast(void**)&glCompileShader, "glCompileShader");
        bindGLFunc(cast(void**)&glCreateProgram, "glCreateProgram");
        bindGLFunc(cast(void**)&glCreateShader, "glCreateShader");
        bindGLFunc(cast(void**)&glDeleteProgram, "glDeleteProgram");
        bindGLFunc(cast(void**)&glDeleteShader, "glDeleteShader");
        bindGLFunc(cast(void**)&glDetachShader, "glDetachShader");
        bindGLFunc(cast(void**)&glDisableVertexAttribArray, "glDisableVertexAttribArray");
        bindGLFunc(cast(void**)&glEnableVertexAttribArray, "glEnableVertexAttribArray");
        bindGLFunc(cast(void**)&glGetActiveAttrib, "glGetActiveAttrib");
        bindGLFunc(cast(void**)&glGetActiveUniform, "glGetActiveUniform");
        bindGLFunc(cast(void**)&glGetAttachedShaders, "glGetAttachedShaders");
        bindGLFunc(cast(void**)&glGetAttribLocation, "glGetAttribLocation");
        bindGLFunc(cast(void**)&glGetProgramiv, "glGetProgramiv");
        bindGLFunc(cast(void**)&glGetProgramInfoLog, "glGetProgramInfoLog");
        bindGLFunc(cast(void**)&glGetShaderiv, "glGetShaderiv");
        bindGLFunc(cast(void**)&glGetShaderInfoLog, "glGetShaderInfoLog");
        bindGLFunc(cast(void**)&glGetShaderSource, "glGetShaderSource");
        bindGLFunc(cast(void**)&glGetUniformLocation, "glGetUniformLocation");
        bindGLFunc(cast(void**)&glGetUniformfv, "glGetUniformfv");
        bindGLFunc(cast(void**)&glGetUniformiv, "glGetUniformiv");
        bindGLFunc(cast(void**)&glGetVertexAttribdv, "glGetVertexAttribdv");
        bindGLFunc(cast(void**)&glGetVertexAttribfv, "glGetVertexAttribfv");
        bindGLFunc(cast(void**)&glGetVertexAttribiv, "glGetVertexAttribiv");
        bindGLFunc(cast(void**)&glGetVertexAttribPointerv, "glGetVertexAttribPointerv");
        bindGLFunc(cast(void**)&glIsProgram, "glIsProgram");
        bindGLFunc(cast(void**)&glIsShader, "glIsShader");
        bindGLFunc(cast(void**)&glLinkProgram, "glLinkProgram");
        bindGLFunc(cast(void**)&glShaderSource, "glShaderSource");
        bindGLFunc(cast(void**)&glUseProgram, "glUseProgram");
        bindGLFunc(cast(void**)&glUniform1f, "glUniform1f");
        bindGLFunc(cast(void**)&glUniform2f, "glUniform2f");
        bindGLFunc(cast(void**)&glUniform3f, "glUniform3f");
        bindGLFunc(cast(void**)&glUniform4f, "glUniform4f");
        bindGLFunc(cast(void**)&glUniform1i, "glUniform1i");
        bindGLFunc(cast(void**)&glUniform2i, "glUniform2i");
        bindGLFunc(cast(void**)&glUniform4i, "glUniform4i");
        bindGLFunc(cast(void**)&glUniform1fv, "glUniform1fv");
        bindGLFunc(cast(void**)&glUniform2fv, "glUniform2fv");
        bindGLFunc(cast(void**)&glUniform3fv, "glUniform3fv");
        bindGLFunc(cast(void**)&glUniform4fv, "glUniform4fv");
        bindGLFunc(cast(void**)&glUniform1iv, "glUniform1iv");
        bindGLFunc(cast(void**)&glUniform2iv, "glUniform2iv");
        bindGLFunc(cast(void**)&glUniform3iv, "glUniform3iv");
        bindGLFunc(cast(void**)&glUniform4iv, "glUniform4iv");
        bindGLFunc(cast(void**)&glUniformMatrix2fv, "glUniformMatrix2fv");
        bindGLFunc(cast(void**)&glUniformMatrix3fv, "glUniformMatrix3fv");
        bindGLFunc(cast(void**)&glUniformMatrix4fv, "glUniformMatrix4fv");
        bindGLFunc(cast(void**)&glValidateProgram, "glValidateProgram");
        bindGLFunc(cast(void**)&glVertexAttrib1d, "glVertexAttrib1d");
        bindGLFunc(cast(void**)&glVertexAttrib1dv, "glVertexAttrib1dv");
        bindGLFunc(cast(void**)&glVertexAttrib1f, "glVertexAttrib1f");
        bindGLFunc(cast(void**)&glVertexAttrib1fv, "glVertexAttrib1fv");
        bindGLFunc(cast(void**)&glVertexAttrib1s, "glVertexAttrib1s");
        bindGLFunc(cast(void**)&glVertexAttrib1sv, "glVertexAttrib1sv");
        bindGLFunc(cast(void**)&glVertexAttrib2d, "glVertexAttrib2d");
        bindGLFunc(cast(void**)&glVertexAttrib2dv, "glVertexAttrib2dv");
        bindGLFunc(cast(void**)&glVertexAttrib2f, "glVertexAttrib2f");
        bindGLFunc(cast(void**)&glVertexAttrib2fv, "glVertexAttrib2fv");
        bindGLFunc(cast(void**)&glVertexAttrib2s, "glVertexAttrib2s");
        bindGLFunc(cast(void**)&glVertexAttrib2sv, "glVertexAttrib2sv");
        bindGLFunc(cast(void**)&glVertexAttrib3d, "glVertexAttrib3d");
        bindGLFunc(cast(void**)&glVertexAttrib3dv, "glVertexAttrib3dv");
        bindGLFunc(cast(void**)&glVertexAttrib3f, "glVertexAttrib3f");
        bindGLFunc(cast(void**)&glVertexAttrib3fv, "glVertexAttrib3fv");
        bindGLFunc(cast(void**)&glVertexAttrib3s, "glVertexAttrib3s");
        bindGLFunc(cast(void**)&glVertexAttrib3sv, "glVertexAttrib3sv");
        bindGLFunc(cast(void**)&glVertexAttrib4Nbv, "glVertexAttrib4Nbv");
        bindGLFunc(cast(void**)&glVertexAttrib4Niv, "glVertexAttrib4Niv");
        bindGLFunc(cast(void**)&glVertexAttrib4Nsv, "glVertexAttrib4Nsv");
        bindGLFunc(cast(void**)&glVertexAttrib4Nub, "glVertexAttrib4Nub");
        bindGLFunc(cast(void**)&glVertexAttrib4Nubv, "glVertexAttrib4Nubv");
        bindGLFunc(cast(void**)&glVertexAttrib4Nuiv, "glVertexAttrib4Nuiv");
        bindGLFunc(cast(void**)&glVertexAttrib4Nusv, "glVertexAttrib4Nusv");
        bindGLFunc(cast(void**)&glVertexAttrib4bv, "glVertexAttrib4bv");
        bindGLFunc(cast(void**)&glVertexAttrib4d, "glVertexAttrib4d");
        bindGLFunc(cast(void**)&glVertexAttrib4dv, "glVertexAttrib4dv");
        bindGLFunc(cast(void**)&glVertexAttrib4f, "glVertexAttrib4f");
        bindGLFunc(cast(void**)&glVertexAttrib4fv, "glVertexAttrib4fv");
        bindGLFunc(cast(void**)&glVertexAttrib4iv, "glVertexAttrib4iv");
        bindGLFunc(cast(void**)&glVertexAttrib4s, "glVertexAttrib4s");
        bindGLFunc(cast(void**)&glVertexAttrib4sv, "glVertexAttrib4sv");
        bindGLFunc(cast(void**)&glVertexAttrib4ubv, "glVertexAttrib4ubv");
        bindGLFunc(cast(void**)&glVertexAttrib4uiv, "glVertexAttrib4uiv");
        bindGLFunc(cast(void**)&glVertexAttrib4usv, "glVertexAttrib4usv");
        bindGLFunc(cast(void**)&glVertexAttribPointer, "glVertexAttribPointer");
        glVer = GLVersion.gl20;
    }

    if(maxVer >= GLVersion.gl21) {
        bindGLFunc(cast(void**)&glUniformMatrix2x3fv, "glUniformMatrix2x3fv");
        bindGLFunc(cast(void**)&glUniformMatrix3x2fv, "glUniformMatrix3x2fv");
        bindGLFunc(cast(void**)&glUniformMatrix2x4fv, "glUniformMatrix2x4fv");
        bindGLFunc(cast(void**)&glUniformMatrix4x2fv, "glUniformMatrix4x2fv");
        bindGLFunc(cast(void**)&glUniformMatrix3x4fv, "glUniformMatrix3x4fv");
        bindGLFunc(cast(void**)&glUniformMatrix4x3fv, "glUniformMatrix4x3fv");
        glVer = GLVersion.gl21;
    }
};

enum gl2Decls = gl1Decls ~ _gl2Decls;
enum gl2Funcs = gl1Funcs ~ _gl2Funcs;
enum gl2Loader = gl1Loader ~ _gl2Loader;