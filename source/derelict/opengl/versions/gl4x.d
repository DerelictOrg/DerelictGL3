/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl.versions.gl4x;

import derelict.opengl.types;
public
import derelict.opengl.extensions.core_40,
       derelict.opengl.extensions.core_41,
       derelict.opengl.extensions.core_42,
       derelict.opengl.extensions.core_43,
       derelict.opengl.extensions.core_44,
       derelict.opengl.extensions.core_45;

enum _gl40Decls =
q{
enum : uint {
    GL_SAMPLE_SHADING                 = 0x8C36,
    GL_MIN_SAMPLE_SHADING_VALUE       = 0x8C37,
    GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
    GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
    GL_TEXTURE_CUBE_MAP_ARRAY         = 0x9009,
    GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A,
    GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   = 0x900B,
    GL_SAMPLER_CUBE_MAP_ARRAY         = 0x900C,
    GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  = 0x900D,
    GL_INT_SAMPLER_CUBE_MAP_ARRAY     = 0x900E,
    GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
}

extern(System) @nogc nothrow {
    alias da_glMinSampleShading = void function( GLclampf );
    alias da_glBlendEquationi = void function( GLuint,GLenum );
    alias da_glBlendEquationSeparatei = void function( GLuint,GLenum,GLenum );
    alias da_glBlendFunci = void function( GLuint,GLenum,GLenum );
    alias da_glBlendFuncSeparatei = void function( GLuint,GLenum,GLenum,GLenum,GLenum );
}};
enum gl40Decls = corearb40Decls ~ _gl40Decls;

enum gl41Decls = corearb41Decls;

enum _gl42Decls =
q{
enum : uint {
    GL_COPY_READ_BUFFER_BINDING  = 0x8F36,
    GL_COPY_WRITE_BUFFER_BINDING = 0x8F37,
    GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23,
    GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24,
    GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C,
    GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
    GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
    GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
}};
enum gl42Decls = corearb42Decls ~ _gl42Decls;

enum _gl43Decls =
q{
enum : uint {
    GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9,
    GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E,
    GL_VERTEX_BINDING_BUFFER = 0x8F4F,
}};
enum gl43Decls = corearb43Decls ~ _gl43Decls;

enum _gl44Decls =
q{
enum : uint {
    GL_MAX_VERTEX_ATTRIB_STRIDE       = 0x82E5,
    GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
    GL_TEXTURE_BUFFER_BINDING         = 0x8C2A,
}};
enum gl44Decls = corearb44Decls ~ _gl44Decls;

enum _gl45Decls =
q{
enum uint GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
extern(System) @nogc nothrow {
    alias da_glGetnCompressedTexImage = void function( GLenum,GLint,GLsizei,void* );
    alias da_glGetnTexImage = void function( GLenum,GLint,GLenum,GLenum,GLsizei,void* );
    alias da_glGetnUniformdv = void function( GLuint,GLint,GLsizei,GLdouble* );
}};
enum gl45Decls = corearb45Decls ~ _gl45Decls;

enum _gl40Funcs =
q{
    da_glMinSampleShading glMinSampleShading;
    da_glBlendEquationi glBlendEquationi;
    da_glBlendEquationSeparatei glBlendEquationSeparatei;
    da_glBlendFunci glBlendFunci;
    da_glBlendFuncSeparatei glBlendFuncSeparatei;
};
enum gl40Funcs = corearb40Funcs ~ _gl40Funcs;

enum gl41Funcs = corearb41Funcs;
enum gl42Funcs = corearb42Funcs;
enum gl43Funcs = corearb43Funcs;
enum gl44Funcs = corearb44Funcs;

enum _gl45Funcs =
q{
    da_glGetnTexImage glGetnTexImage;
    da_glGetnCompressedTexImage glGetnCompressedTexImage;
    da_glGetnUniformdv glGetnUniformdv;
};
enum gl45Funcs = corearb45Funcs ~ _gl45Funcs;

enum _gl40Loader =
q{
    bindGLFunc(cast(void**)&glMinSampleShading, "glMinSampleShading");
    bindGLFunc(cast(void**)&glBlendEquationi, "glBlendEquationi");
    bindGLFunc(cast(void**)&glBlendEquationSeparatei, "glBlendEquationSeparatei");
    bindGLFunc(cast(void**)&glBlendFunci, "glBlendFunci");
    bindGLFunc(cast(void**)&glBlendFuncSeparatei, "glBlendFuncSeparatei");
    glVer = GLVersion.gl40;
};
version(DerelictGL3_Contexts)
    enum _gl40LoaderAdd = corearb40Loader;
else
    enum _gl40LoaderAdd = `loadExtensionSet(GLVersion.gl40, true);`;
enum gl40Loader = `if(maxVer >= GLVersion.gl40) {` ~ _gl40LoaderAdd ~ _gl40Loader ~ `}`;

version(DerelictGL3_Contexts)
    enum _gl41LoaderAdd = corearb41Loader;
else
    enum _gl41LoaderAdd = `loadExtensionSet(GLVersion.gl41, true);`;
enum gl41Loader = `if(maxVer >= GLVersion.gl41) {` ~ _gl41LoaderAdd ~ `}`;

version(DerelictGL3_Contexts)
    enum _gl42LoaderAdd = corearb42Loader;
else
    enum _gl42LoaderAdd = `loadExtensionSet(GLVersion.gl42, true);`;
enum gl42Loader = `if(maxVer >= GLVersion.gl42) {` ~ _gl42LoaderAdd ~ `}`;

version(DerelictGL3_Contexts)
    enum _gl43LoaderAdd = corearb43Loader;
else
    enum _gl43LoaderAdd = `loadExtensionSet(GLVersion.gl43, true);`;
enum gl43Loader = `if(maxVer >= GLVersion.gl43) {` ~ _gl43LoaderAdd ~ `}`;

version(DerelictGL3_Contexts)
    enum _gl44LoaderAdd = corearb44Loader;
else
    enum _gl44LoaderAdd = `loadExtensionSet(GLVersion.gl44, true);`;
enum gl44Loader = `if(maxVer >= GLVersion.gl44) {` ~ _gl44LoaderAdd ~ `}`;

enum _gl45Loader =
q{
    bindGLFunc(cast(void**)&glGetnTexImage, "glGetnTexImage");
    bindGLFunc(cast(void**)&glGetnCompressedTexImage, "glGetnCompressedTexImage");
    bindGLFunc(cast(void**)&glGetnUniformdv, "glGetnUniformdv");
    glVer = GLVersion.gl45;
};
version(DerelictGL3_Contexts)
    enum _gl45LoaderAdd = corearb45Loader;
else
    enum _gl45LoaderAdd = `loadExtensionSet(GLVersion.gl45, true);`;
enum gl45Loader = `if(maxVer >= GLVersion.gl45) {` ~ _gl45LoaderAdd ~ _gl45Loader ~ `}`;