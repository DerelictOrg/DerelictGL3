/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.ext;

version(None):
private {
    import derelict.util.system;
    import derelict.opengl3.types;
    import derelict.opengl3.constants;
    import derelict.opengl3.internal;
}

enum : uint {
    // GL_EXT_texture_filter_anisotropic
    GL_TEXTURE_MAX_ANISOTROPY_EXT       = 0x84FE,
    GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT   = 0x84FF,

    // GL_EXT_framebuffer_object
    GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506,
    GL_MAX_RENDERBUFFER_SIZE_EXT        = 0x84E8,
    GL_FRAMEBUFFER_BINDING_EXT          = 0x8CA6,
    GL_RENDERBUFFER_BINDING_EXT         = 0x8CA7,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0,
    GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4,
    GL_FRAMEBUFFER_COMPLETE_EXT         = 0x8CD5,
    GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6,
    GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7,
    GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9,
    GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA,
    GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB,
    GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC,
    GL_FRAMEBUFFER_UNSUPPORTED_EXT      = 0x8CDD,
    GL_MAX_COLOR_ATTACHMENTS_EXT        = 0x8CDF,
    GL_COLOR_ATTACHMENT0_EXT            = 0x8CE0,
    GL_COLOR_ATTACHMENT1_EXT            = 0x8CE1,
    GL_COLOR_ATTACHMENT2_EXT            = 0x8CE2,
    GL_COLOR_ATTACHMENT3_EXT            = 0x8CE3,
    GL_COLOR_ATTACHMENT4_EXT            = 0x8CE4,
    GL_COLOR_ATTACHMENT5_EXT            = 0x8CE5,
    GL_COLOR_ATTACHMENT6_EXT            = 0x8CE6,
    GL_COLOR_ATTACHMENT7_EXT            = 0x8CE7,
    GL_COLOR_ATTACHMENT8_EXT            = 0x8CE8,
    GL_COLOR_ATTACHMENT9_EXT            = 0x8CE9,
    GL_COLOR_ATTACHMENT10_EXT           = 0x8CEA,
    GL_COLOR_ATTACHMENT11_EXT           = 0x8CEB,
    GL_COLOR_ATTACHMENT12_EXT           = 0x8CEC,
    GL_COLOR_ATTACHMENT13_EXT           = 0x8CED,
    GL_COLOR_ATTACHMENT14_EXT           = 0x8CEE,
    GL_COLOR_ATTACHMENT15_EXT           = 0x8CEF,
    GL_DEPTH_ATTACHMENT_EXT             = 0x8D00,
    GL_STENCIL_ATTACHMENT_EXT           = 0x8D20,
    GL_FRAMEBUFFER_EXT                  = 0x8D40,
    GL_RENDERBUFFER_EXT                 = 0x8D41,
    GL_RENDERBUFFER_WIDTH_EXT           = 0x8D42,
    GL_RENDERBUFFER_HEIGHT_EXT          = 0x8D43,
    GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44,
    GL_STENCIL_INDEX1_EXT               = 0x8D46,
    GL_STENCIL_INDEX4_EXT               = 0x8D47,
    GL_STENCIL_INDEX8_EXT               = 0x8D48,
    GL_STENCIL_INDEX16_EXT              = 0x8D49,
    GL_RENDERBUFFER_RED_SIZE_EXT        = 0x8D50,
    GL_RENDERBUFFER_GREEN_SIZE_EXT      = 0x8D51,
    GL_RENDERBUFFER_BLUE_SIZE_EXT       = 0x8D52,
    GL_RENDERBUFFER_ALPHA_SIZE_EXT      = 0x8D53,
    GL_RENDERBUFFER_DEPTH_SIZE_EXT      = 0x8D54,
    GL_RENDERBUFFER_STENCIL_SIZE_EXT    = 0x8D55,

    // GL_NV_explicit_multisample
    GL_SAMPLE_POSITION_NV               = 0x8E50,
    GL_SAMPLE_MASK_NV                   = 0x8E51,
    GL_SAMPLE_MASK_VALUE_NV             = 0x8E52,
    GL_TEXTURE_BINDING_RENDERBUFFER_NV  = 0x8E53,
    GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54,
    GL_MAX_SAMPLE_MASK_WORDS_NV         = 0x8E59,
    GL_TEXTURE_RENDERBUFFER_NV          = 0x8E55,
    GL_SAMPLER_RENDERBUFFER_NV          = 0x8E56,
    GL_INT_SAMPLER_RENDERBUFFER_NV      = 0x8E57,
    GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58,

    // GL_EXT_direct_state_access
    GL_PROGRAM_MATRIX_EXT               = 0x8E2D,
    GL_TRANSPOSE_PROGRAM_MATRIX_EXT     = 0x8E2E,
    GL_PROGRAM_MATRIX_STACK_DEPTH_EXT   = 0x8E2F,

    // GL_EXT_geometry_shader4
    GL_GEOMETRY_SHADER_EXT              = 0x8DD9,
    GL_GEOMETRY_VERTICES_OUT_EXT        = 0x8DDA,
    GL_GEOMETRY_INPUT_TYPE_EXT          = 0x8DDB,
    GL_GEOMETRY_OUTPUT_TYPE_EXT         = 0x8DDC,
    GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29,
    GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD,
    GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE,
    GL_MAX_VARYING_COMPONENTS_EXT        = 0x8B4B,
    GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF,
    GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT  = 0x8DE0,
    GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1,
    GL_LINES_ADJACENCY_EXT               = 0xA,
    GL_LINE_STRIP_ADJACENCY_EXT          = 0xB,
    GL_TRIANGLES_ADJACENCY_EXT           = 0xC,
    GL_TRIANGLE_STRIP_ADJACENCY_EXT      = 0xD,
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8,
    GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9,
    GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7,
    GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4,
    GL_PROGRAM_POINT_SIZE_EXT            = 0x8642,

    // GL_NV_framebuffer_multisample_coverage
    GL_RENDERBUFFER_COVERAGE_SAMPLES_NV  = 0x8CAB,
    GL_RENDERBUFFER_COLOR_SAMPLES_NV     = 0x8E10,
    GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11,
    GL_MULTISAMPLE_COVERAGE_MODES_NV     = 0x8E12,

    // GL_NV_gpu_program4
    GL_MIN_PROGRAM_TEXEL_OFFSET_EXT      = 0x8904,
    GL_MAX_PROGRAM_TEXEL_OFFSET_EXT      = 0x8905,
    GL_PROGRAM_ATTRIB_COMPONENTS_NV      = 0x8906,
    GL_PROGRAM_RESULT_COMPONENTS_NV      = 0x8907,
    GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV  = 0x8908,
    GL_MAX_PROGRAM_RESULT_COMPONENTS_NV  = 0x8909,
    GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV    = 0x8DA5,
    GL_MAX_PROGRAM_GENERIC_RESULTS_NV    = 0x8DA6,

    // GL_EXT_gpu_shader4
    GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT   = 0x88FD,
    GL_SAMPLER_1D_ARRAY_EXT              = 0x8DC0,
    GL_SAMPLER_2D_ARRAY_EXT              = 0x8DC1,
    GL_SAMPLER_BUFFER_EXT                = 0x8DC2,
    GL_SAMPLER_1D_ARRAY_SHADOW_EXT       = 0x8DC3,
    GL_SAMPLER_2D_ARRAY_SHADOW_EXT       = 0x8DC4,
    GL_SAMPLER_CUBE_SHADOW_EXT           = 0x8DC5,
    GL_UNSIGNED_INT_VEC2_EXT             = 0x8DC6,
    GL_UNSIGNED_INT_VEC3_EXT             = 0x8DC7,
    GL_UNSIGNED_INT_VEC4_EXT             = 0x8DC8,
    GL_INT_SAMPLER_1D_EXT                = 0x8DC9,
    GL_INT_SAMPLER_2D_EXT                = 0x8DCA,
    GL_INT_SAMPLER_3D_EXT                = 0x8DCB,
    GL_INT_SAMPLER_CUBE_EXT              = 0x8DCC,
    GL_INT_SAMPLER_2D_RECT_EXT           = 0x8DCD,
    GL_INT_SAMPLER_1D_ARRAY_EXT          = 0x8DCE,
    GL_INT_SAMPLER_2D_ARRAY_EXT          = 0x8DCF,
    GL_INT_SAMPLER_BUFFER_EXT            = 0x8DD0,
    GL_UNSIGNED_INT_SAMPLER_1D_EXT       = 0x8DD1,
    GL_UNSIGNED_INT_SAMPLER_2D_EXT       = 0x8DD2,
    GL_UNSIGNED_INT_SAMPLER_3D_EXT       = 0x8DD3,
    GL_UNSIGNED_INT_SAMPLER_CUBE_EXT     = 0x8DD4,
    GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT  = 0x8DD5,
    GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6,
    GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7,
    GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT   = 0x8DD8,

    // GL_EXT_texture_integer
    GL_RGBA_INTEGER_MODE_EXT             = 0x8D9E,
    GL_RGBA32UI_EXT                      = 0x8D70,
    GL_RGB32UI_EXT                       = 0x8D71,
    GL_ALPHA32UI_EXT                     = 0x8D72,
    GL_INTENSITY32UI_EXT                 = 0x8D73,
    GL_LUMINANCE32UI_EXT                 = 0x8D74,
    GL_LUMINANCE_ALPHA32UI_EXT           = 0x8D75,
    GL_RGBA16UI_EXT                      = 0x8D76,
    GL_RGB16UI_EXT                       = 0x8D77,
    GL_ALPHA16UI_EXT                     = 0x8D78,
    GL_INTENSITY16UI_EXT                 = 0x8D79,
    GL_LUMINANCE16UI_EXT                 = 0x8D7A,
    GL_LUMINANCE_ALPHA16UI_EXT           = 0x8D7B,
    GL_RGBA8UI_EXT                       = 0x8D7C,
    GL_RGB8UI_EXT                        = 0x8D7D,
    GL_ALPHA8UI_EXT                      = 0x8D7E,
    GL_INTENSITY8UI_EXT                  = 0x8D7F,
    GL_LUMINANCE8UI_EXT                  = 0x8D80,
    GL_LUMINANCE_ALPHA8UI_EXT            = 0x8D81,
    GL_RGBA32I_EXT                       = 0x8D82,
    GL_RGB32I_EXT                        = 0x8D83,
    GL_ALPHA32I_EXT                      = 0x8D84,
    GL_INTENSITY32I_EXT                  = 0x8D85,
    GL_LUMINANCE32I_EXT                  = 0x8D86,
    GL_LUMINANCE_ALPHA32I_EXT            = 0x8D87,
    GL_RGBA16I_EXT                       = 0x8D88,
    GL_RGB16I_EXT                        = 0x8D89,
    GL_ALPHA16I_EXT                      = 0x8D8A,
    GL_INTENSITY16I_EXT                  = 0x8D8B,
    GL_LUMINANCE16I_EXT                  = 0x8D8C,
    GL_LUMINANCE_ALPHA16I_EXT            = 0x8D8D,
    GL_RGBA8I_EXT                        = 0x8D8E,
    GL_RGB8I_EXT                         = 0x8D8F,
    GL_ALPHA8I_EXT                       = 0x8D90,
    GL_INTENSITY8I_EXT                   = 0x8D91,
    GL_LUMINANCE8I_EXT                   = 0x8D92,
    GL_LUMINANCE_ALPHA8I_EXT             = 0x8D93,
    GL_RED_INTEGER_EXT                   = 0x8D94,
    GL_GREEN_INTEGER_EXT                 = 0x8D95,
    GL_BLUE_INTEGER_EXT                  = 0x8D96,
    GL_ALPHA_INTEGER_EXT                 = 0x8D97,
    GL_RGB_INTEGER_EXT                   = 0x8D98,
    GL_RGBA_INTEGER_EXT                  = 0x8D99,
    GL_BGR_INTEGER_EXT                   = 0x8D9A,
    GL_BGRA_INTEGER_EXT                  = 0x8D9B,
    GL_LUMINANCE_INTEGER_EXT             = 0x8D9C,
    GL_LUMINANCE_ALPHA_INTEGER_EXT       = 0x8D9D,

    // GL_EXT_texture_buffer_object
    GL_TEXTURE_BUFFER_EXT                = 0x8C2A,
    GL_MAX_TEXTURE_BUFFER_SIZE_EXT       = 0x8C2B,
    GL_TEXTURE_BINDING_BUFFER_EXT        = 0x8C2C,
    GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D,
    GL_TEXTURE_BUFFER_FORMAT_EXT         = 0x8C2E,


    // GL_EXT_texture_compression_s3tc
    GL_COMPRESSED_RGB_S3TC_DXT1_EXT      = 0x83F0,
    GL_COMPRESSED_RGBA_S3TC_DXT1_EXT     = 0x83F1,
    GL_COMPRESSED_RGBA_S3TC_DXT3_EXT     = 0x83F2,
    GL_COMPRESSED_RGBA_S3TC_DXT5_EXT     = 0x83F3,

    // GL_EXT_texture_compression_rgtc
    GL_COMPRESSED_RED_RGTC1_EXT          = 0x8DBB,
    GL_COMPRESSED_SIGNED_RED_RGTC1_EXT   = 0x8DBC,
    GL_COMPRESSED_RED_GREEN_RGTC2_EXT    = 0x8DBD,
    GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE,

    // GL_APPLE_vertex_array_object
    GL_VERTEX_ARRAY_BINDING_APPLE        = 0x85B5,
}

// GL_EXT_texture_filter_anisotropic
private __gshared bool _EXT_texture_filter_anisotropic;
@nogc bool EXT_texture_filter_anisotropic() nothrow @property { return _EXT_texture_filter_anisotropic; }

// GL_EXT_framebuffer_object
extern(  System  ) @nogc nothrow {
    alias da_glIsRenderbufferEXT = GLboolean function( GLuint );
    alias da_glBindRenderbufferEXT = void function( GLenum, GLuint );
    alias da_glDeleteRenderbuffersEXT = void function( GLsizei, in GLuint* );
    alias da_glGenRenderbuffersEXT = void function( GLsizei, GLuint* );
    alias da_glRenderbufferStorageEXT = void function( GLenum, GLenum, GLsizei, GLsizei );
    alias da_glGetRenderbufferParameterivEXT = void function( GLenum, GLenum, GLint* );
    alias da_glIsFramebufferEXT = GLboolean function( GLuint );
    alias da_glBindFramebufferEXT = void function( GLenum, GLuint );
    alias da_glDeleteFramebuffersEXT = void function( GLsizei, in GLuint* );
    alias da_glGenFramebuffersEXT = void function( GLsizei, GLuint* );
    alias da_glCheckFramebufferStatusEXT = GLenum function( GLenum );
    alias da_glFramebufferTexture1DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint );
    alias da_glFramebufferTexture2DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint );
    alias da_glFramebufferTexture3DEXT = void function( GLenum, GLenum, GLenum, GLuint, GLint, GLint );
    alias da_glFramebufferRenderbufferEXT = void function( GLenum, GLenum, GLenum, GLuint );
    alias da_glGetFramebufferAttachmentParameterivEXT = void function( GLenum, GLenum, GLenum, GLint* );
    alias da_glGenerateMipmapEXT = void function( GLenum );
}

__gshared {
    da_glIsRenderbufferEXT glIsRenderbufferEXT;
    da_glBindRenderbufferEXT glBindRenderbufferEXT;
    da_glDeleteRenderbuffersEXT glDeleteRenderbuffersEXT;
    da_glGenRenderbuffersEXT glGenRenderbuffersEXT;
    da_glRenderbufferStorageEXT glRenderbufferStorageEXT;
    da_glGetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT;
    da_glIsFramebufferEXT glIsFramebufferEXT;
    da_glBindFramebufferEXT glBindFramebufferEXT;
    da_glDeleteFramebuffersEXT glDeleteFramebuffersEXT;
    da_glGenFramebuffersEXT glGenFramebuffersEXT;
    da_glCheckFramebufferStatusEXT glCheckFramebufferStatusEXT;
    da_glFramebufferTexture1DEXT glFramebufferTexture1DEXT;
    da_glFramebufferTexture2DEXT glFramebufferTexture2DEXT;
    da_glFramebufferTexture3DEXT glFramebufferTexture3DEXT;
    da_glFramebufferRenderbufferEXT glFramebufferRenderbufferEXT;
    da_glGetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT;
    da_glGenerateMipmapEXT glGenerateMipmapEXT;
}

private __gshared bool _EXT_framebuffer_object;
@nogc bool EXT_framebuffer_object() nothrow @property { return _EXT_framebuffer_object; }
private void load_EXT_framebuffer_object() {
    try {
        bindGLFunc( cast( void** )&glIsRenderbufferEXT, "glIsRenderbufferEXT" );
        bindGLFunc( cast( void** )&glBindRenderbufferEXT, "glBindRenderbufferEXT" );
        bindGLFunc( cast( void** )&glDeleteRenderbuffersEXT, "glDeleteRenderbuffersEXT" );
        bindGLFunc( cast( void** )&glGenRenderbuffersEXT, "glGenRenderbuffersEXT" );
        bindGLFunc( cast( void** )&glRenderbufferStorageEXT, "glRenderbufferStorageEXT" );
        bindGLFunc( cast( void** )&glGetRenderbufferParameterivEXT, "glGetRenderbufferParameterivEXT" );
        bindGLFunc( cast( void** )&glIsFramebufferEXT, "glIsFramebufferEXT" );
        bindGLFunc( cast( void** )&glBindFramebufferEXT, "glBindFramebufferEXT" );
        bindGLFunc( cast( void** )&glDeleteFramebuffersEXT, "glDeleteFramebuffersEXT" );
        bindGLFunc( cast( void** )&glGenFramebuffersEXT, "glGenFramebuffersEXT" );
        bindGLFunc( cast( void** )&glCheckFramebufferStatusEXT, "glCheckFramebufferStatusEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture1DEXT, "glFramebufferTexture1DEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture2DEXT, "glFramebufferTexture2DEXT" );
        bindGLFunc( cast( void** )&glFramebufferTexture3DEXT, "glFramebufferTexture3DEXT" );
        bindGLFunc( cast( void** )&glFramebufferRenderbufferEXT, "glFramebufferRenderbufferEXT" );
        bindGLFunc( cast( void** )&glGetFramebufferAttachmentParameterivEXT, "glGetFramebufferAttachmentParameterivEXT" );
        bindGLFunc( cast( void** )&glGenerateMipmapEXT, "glGenerateMipmapEXT" );
        _EXT_framebuffer_object = true;
    } catch( Exception e ) {
        _EXT_framebuffer_object = false;
    }
}

// GL_EXT_draw_buffers2
extern( System ) @nogc nothrow {
    alias da_glColorMaskIndexedEXT = void function(uint buf, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    alias da_glGetBooleanIndexedvEXT = void function(GLenum value, uint index, GLboolean *data);
    alias da_glGetIntegerIndexedvEXT = void function(GLenum value, uint index, int *data);
    alias da_glEnableIndexedEXT = void function(GLenum target, uint index);
    alias da_glDisableIndexedEXT = void function(GLenum target, uint index);
    alias da_glIsEnabledIndexedEXT = GLboolean function(GLenum target, uint index);
}

__gshared {
    da_glColorMaskIndexedEXT glColorMaskIndexedEXT;
    da_glGetBooleanIndexedvEXT glGetBooleanIndexedvEXT;
    da_glGetIntegerIndexedvEXT glGetIntegerIndexedvEXT;
    da_glEnableIndexedEXT glEnableIndexedEXT;
    da_glDisableIndexedEXT glDisableIndexedEXT;
    da_glIsEnabledIndexedEXT glIsEnabledIndexedEXT;
}

private __gshared bool _EXT_draw_buffers2;
@nogc bool EXT_draw_buffers2() nothrow @property { return _EXT_draw_buffers2; }
private void load_EXT_draw_buffers2() {
    try {
        bindGLFunc( cast( void** )&glColorMaskIndexedEXT, "glColorMaskIndexedEXT" );
        bindGLFunc( cast( void** )&glGetBooleanIndexedvEXT, "glGetBooleanIndexedvEXT" );
        bindGLFunc( cast( void** )&glGetIntegerIndexedvEXT, "glGetIntegerIndexedvEXT" );
        bindGLFunc( cast( void** )&glEnableIndexedEXT, "glEnableIndexedEXT" );
        bindGLFunc( cast( void** )&glDisableIndexedEXT, "glDisableIndexedEXT" );
        bindGLFunc( cast( void** )&glIsEnabledIndexedEXT, "glIsEnabledIndexedEXT" );
        _EXT_draw_buffers2 = true;
    } catch( Exception e ) {
        _EXT_draw_buffers2 = false;
    }
}

// GL_NV_explicit_multisample
extern( System ) @nogc nothrow {
    alias da_glGetMultisamplefvNV = void function(GLenum pname, uint index, float *val);
    alias da_glSampleMaskIndexedNV = void function(GLuint index, GLbitfield mask);
    alias da_glTexRenderbufferNV = void function(GLenum target, uint renderbuffer);
}

__gshared {
    da_glGetMultisamplefvNV glGetMultisamplefvNV;
    da_glSampleMaskIndexedNV glSampleMaskIndexedNV;
    da_glTexRenderbufferNV glTexRenderbufferNV;
}

private __gshared bool _NV_explicit_multisample;
@nogc bool NV_explicit_multisample() nothrow @property { return _NV_explicit_multisample; }
private void load_NV_explicit_multisample() {
    try {
        bindGLFunc( cast( void** )&glGetMultisamplefvNV, "glGetMultisamplefvNV" );
        bindGLFunc( cast( void** )&glSampleMaskIndexedNV, "glSampleMaskIndexedNV" );
        bindGLFunc( cast( void** )&glTexRenderbufferNV, "glTexRenderbufferNV" );
        _NV_explicit_multisample = true;
    } catch( Exception e ) {
        _NV_explicit_multisample = false;
    }
}

// GL_EXT_geometry_shader4
extern( System ) @nogc nothrow {
    alias da_glProgramParameteriEXT = void function(uint program, GLenum pname, int value);
    alias da_glFramebufferTextureEXT = void function(GLenum target, GLenum attachment, uint texture, int level);
    alias da_glFramebufferTextureLayerEXT = void function(GLenum target, GLenum attachment, uint texture, int level, int layer);
    alias da_glFramebufferTextureFaceEXT = void function(GLenum target, GLenum attachment, uint texture, int level, GLenum face);
}

__gshared {
    da_glProgramParameteriEXT glProgramParameteriEXT;
    da_glFramebufferTextureEXT glFramebufferTextureEXT;
    da_glFramebufferTextureLayerEXT glFramebufferTextureLayerEXT;
    da_glFramebufferTextureFaceEXT glFramebufferTextureFaceEXT;
}

private __gshared bool _EXT_geometry_shader4;
@nogc bool EXT_geometry_shader4() nothrow @property { return _EXT_geometry_shader4; }
private void load_EXT_geometry_shader4() {
    try {
        bindGLFunc( cast( void** )&glProgramParameteriEXT, "glProgramParameteriEXT" );
        bindGLFunc( cast( void** )&glFramebufferTextureEXT, "glFramebufferTextureEXT" );
        bindGLFunc( cast( void** )&glFramebufferTextureLayerEXT, "glFramebufferTextureLayerEXT" );
        bindGLFunc( cast( void** )&glFramebufferTextureFaceEXT, "glFramebufferTextureFaceEXT" );
        _EXT_geometry_shader4 = true;
    } catch( Exception e ) {
        _EXT_geometry_shader4 = false;
    }
}

// GL_NV_framebuffer_multisample_coverage
extern( System ) @nogc nothrow alias da_glRenderbufferStorageMultisampleCoverageNV = void function(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
__gshared da_glRenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV;
private __gshared bool _NV_framebuffer_multisample_coverage;
@nogc bool NV_framebuffer_multisample_coverage() nothrow @property { return _NV_framebuffer_multisample_coverage; }
private void load_NV_framebuffer_multisample_coverage() {
    try {
        bindGLFunc( cast( void** )&glRenderbufferStorageMultisampleCoverageNV, "glRenderbufferStorageMultisampleCoverageNV" );
        _NV_framebuffer_multisample_coverage = true;
    } catch  ( Exception e ) {
        _NV_framebuffer_multisample_coverage = false;
    }
}

// GL_NV_gpu_program4
extern( System ) @nogc nothrow {
    alias da_glProgramLocalParameterI4iNV = void function(GLenum target, uint index, int x, int y, int z, int w);
    alias da_glProgramLocalParameterI4ivNV = void function(GLenum target, uint index, const int *params);
    alias da_glProgramLocalParametersI4ivNV = void function(GLenum target, uint index, GLsizei count, const int *params);
    alias da_glProgramLocalParameterI4uiNV = void function(GLenum target, uint index, uint x, uint y, uint z, uint w);
    alias da_glProgramLocalParameterI4uivNV = void function(GLenum target, uint index, const uint *params);
    alias da_glProgramLocalParametersI4uivNV = void function(GLenum target, uint index, GLsizei count, const uint *params);
    alias da_glProgramEnvParameterI4iNV = void function(GLenum target, uint index, int x, int y, int z, int w);
    alias da_glProgramEnvParameterI4ivNV = void function(GLenum target, uint index, const int *params);
    alias da_glProgramEnvParametersI4ivNV = void function(GLenum target, uint index, GLsizei count, const int *params);
    alias da_glProgramEnvParameterI4uiNV = void function(GLenum target, uint index, uint x, uint y, uint z, uint w);
    alias da_glProgramEnvParameterI4uivNV = void function(GLenum target, uint index, const uint *params);
    alias da_glProgramEnvParametersI4uivNV = void function(GLenum target, uint index, GLsizei count, const uint *params);
    alias da_glGetProgramLocalParameterIivNV = void function(GLenum target, uint index, int *params);
    alias da_glGetProgramLocalParameterIuivNV = void function(GLenum target, uint index, uint *params);
    alias da_glGetProgramEnvParameterIivNV = void function(GLenum target, uint index, int *params);
    alias da_glGetProgramEnvParameterIuivNV = void function(GLenum target, uint index, uint *params);
}

__gshared {
    da_glProgramLocalParameterI4iNV glProgramLocalParameterI4iNV;
    da_glProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV;
    da_glProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV;
    da_glProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV;
    da_glProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV;
    da_glProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV;
    da_glProgramEnvParameterI4iNV glProgramEnvParameterI4iNV;
    da_glProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV;
    da_glProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV;
    da_glProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV;
    da_glProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV;
    da_glProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV;
    da_glGetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV;
    da_glGetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV;
    da_glGetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV;
    da_glGetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV;
}

private __gshared bool _NV_gpu_program4;
@nogc bool NV_gpu_program4() nothrow @property { return _NV_gpu_program4; }
private void load_NV_gpu_program4() {
    try {
        bindGLFunc( cast( void** )&glProgramLocalParameterI4iNV, "glProgramLocalParameterI4iNV" );
        bindGLFunc( cast( void** )&glProgramLocalParameterI4ivNV, "glProgramLocalParameterI4ivNV" );
        bindGLFunc( cast( void** )&glProgramLocalParametersI4ivNV, "glProgramLocalParametersI4ivNV" );
        bindGLFunc( cast( void** )&glProgramLocalParameterI4uiNV, "glProgramLocalParameterI4uiNV" );
        bindGLFunc( cast( void** )&glProgramLocalParameterI4uivNV, "glProgramLocalParameterI4uivNV" );
        bindGLFunc( cast( void** )&glProgramLocalParametersI4uivNV, "glProgramLocalParametersI4uivNV" );
        bindGLFunc( cast( void** )&glProgramEnvParameterI4iNV, "glProgramEnvParameterI4iNV" );
        bindGLFunc( cast( void** )&glProgramEnvParameterI4ivNV, "glProgramEnvParameterI4ivNV" );
        bindGLFunc( cast( void** )&glProgramEnvParametersI4ivNV, "glProgramEnvParametersI4ivNV" );
        bindGLFunc( cast( void** )&glProgramEnvParameterI4uiNV, "glProgramEnvParameterI4uiNV" );
        bindGLFunc( cast( void** )&glProgramEnvParameterI4uivNV, "glProgramEnvParameterI4uivNV" );
        bindGLFunc( cast( void** )&glProgramEnvParametersI4uivNV, "glProgramEnvParametersI4uivNV" );
        bindGLFunc( cast( void** )&glGetProgramLocalParameterIivNV, "glGetProgramLocalParameterIivNV" );
        bindGLFunc( cast( void** )&glGetProgramLocalParameterIuivNV, "glGetProgramLocalParameterIuivNV" );
        bindGLFunc( cast( void** )&glGetProgramEnvParameterIivNV, "glGetProgramEnvParameterIivNV" );
        bindGLFunc( cast( void** )&glGetProgramEnvParameterIuivNV, "glGetProgramEnvParameterIuivNV" );
        _NV_gpu_program4 = true;
    }  catch ( Exception e ) {
        _NV_gpu_program4 = false;
    }
}

// GL_EXT_gpu_program_parameters
extern( System ) @nogc nothrow {
    alias da_glProgramEnvParameters4fvEXT = void function(GLenum target, uint index, GLsizei count, const float *params);
    alias da_glProgramLocalParameters4fvEXT = void function(GLenum target, uint index, GLsizei count, const float *params);
}

__gshared {
    da_glProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT;
    da_glProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT;
}

private __gshared bool _EXT_gpu_program_parameters;
@nogc bool EXT_gpu_program_parameters() nothrow @property { return _EXT_gpu_program_parameters; }
private void load_EXT_gpu_program_parameters() {
    try {
        bindGLFunc( cast( void** )&glProgramEnvParameters4fvEXT, "glProgramEnvParameters4fvEXT" );
        bindGLFunc( cast( void** )&glProgramLocalParameters4fvEXT, "glProgramLocalParameters4fvEXT" );
        _EXT_gpu_program_parameters = true;
    } catch ( Exception e ) {
        _EXT_gpu_program_parameters = false;
    }
}

// GL_EXT_gpu_shader4
extern( System ) @nogc nothrow {
    alias da_glVertexAttribI1iEXT = void function(uint index, int x);
    alias da_glVertexAttribI2iEXT = void function(uint index, int x, int y);
    alias da_glVertexAttribI3iEXT = void function(uint index, int x, int y, int z);
    alias da_glVertexAttribI4iEXT = void function(uint index, int x, int y, int z, int w);
    alias da_glVertexAttribI1uiEXT = void function(uint index, uint x);
    alias da_glVertexAttribI2uiEXT = void function(uint index, uint x, uint y);
    alias da_glVertexAttribI3uiEXT = void function(uint index, uint x, uint y, uint z);
    alias da_glVertexAttribI4uiEXT = void function(uint index, uint x, uint y, uint z, uint w);
    alias da_glVertexAttribI1ivEXT = void function(uint index, const int *v);
    alias da_glVertexAttribI2ivEXT = void function(uint index, const int *v);
    alias da_glVertexAttribI3ivEXT = void function(uint index, const int *v);
    alias da_glVertexAttribI4ivEXT = void function(uint index, const int *v);
    alias da_glVertexAttribI1uivEXT = void function(uint index, const uint *v);
    alias da_glVertexAttribI2uivEXT = void function(uint index, const uint *v);
    alias da_glVertexAttribI3uivEXT = void function(uint index, const uint *v);
    alias da_glVertexAttribI4uivEXT = void function(uint index, const uint *v);
    alias da_glVertexAttribI4bvEXT = void function(uint index, const byte *v);
    alias da_glVertexAttribI4svEXT = void function(uint index, const short *v);
    alias da_glVertexAttribI4ubvEXT = void function(uint index, const ubyte *v);
    alias da_glVertexAttribI4usvEXT = void function(uint index, const ushort *v);
    alias da_glVertexAttribIPointerEXT = void function(uint index, int size, GLenum type, GLsizei stride, const void *pointer);
    alias da_glGetVertexAttribIivEXT = void function(uint index, GLenum pname, int *params);
    alias da_glGetVertexAttribIuivEXT = void function(uint index, GLenum pname, uint *params);
    alias da_glUniform1uiEXT = void function(int location, uint v0);
    alias da_glUniform2uiEXT = void function(int location, uint v0, uint v1);
    alias da_glUniform3uiEXT = void function(int location, uint v0, uint v1, uint v2);
    alias da_glUniform4uiEXT = void function(int location, uint v0, uint v1, uint v2, uint v3);
    alias da_glUniform1uivEXT = void function(int location, GLsizei count, const uint *value);
    alias da_glUniform2uivEXT = void function(int location, GLsizei count, const uint *value);
    alias da_glUniform3uivEXT = void function(int location, GLsizei count, const uint *value);
    alias da_glUniform4uivEXT = void function(int location, GLsizei count, const uint *value);
    alias da_glGetUniformuivEXT = void function(uint program, int location, uint *params);
    alias da_glBindFragDataLocationEXT = void function(uint program, uint colorNumber, const char *name);
    alias da_glGetFragDataLocationEXT = int function(uint program, const char *name);
}

__gshared {
    da_glVertexAttribI1iEXT glVertexAttribI1iEXT;
    da_glVertexAttribI2iEXT glVertexAttribI2iEXT;
    da_glVertexAttribI3iEXT glVertexAttribI3iEXT;
    da_glVertexAttribI4iEXT glVertexAttribI4iEXT;
    da_glVertexAttribI1uiEXT glVertexAttribI1uiEXT;
    da_glVertexAttribI2uiEXT glVertexAttribI2uiEXT;
    da_glVertexAttribI3uiEXT glVertexAttribI3uiEXT;
    da_glVertexAttribI4uiEXT glVertexAttribI4uiEXT;
    da_glVertexAttribI1ivEXT glVertexAttribI1ivEXT;
    da_glVertexAttribI2ivEXT glVertexAttribI2ivEXT;
    da_glVertexAttribI3ivEXT glVertexAttribI3ivEXT;
    da_glVertexAttribI4ivEXT glVertexAttribI4ivEXT;
    da_glVertexAttribI1uivEXT glVertexAttribI1uivEXT;
    da_glVertexAttribI2uivEXT glVertexAttribI2uivEXT;
    da_glVertexAttribI3uivEXT glVertexAttribI3uivEXT;
    da_glVertexAttribI4uivEXT glVertexAttribI4uivEXT;
    da_glVertexAttribI4bvEXT glVertexAttribI4bvEXT;
    da_glVertexAttribI4svEXT glVertexAttribI4svEXT;
    da_glVertexAttribI4ubvEXT glVertexAttribI4ubvEXT;
    da_glVertexAttribI4usvEXT glVertexAttribI4usvEXT;
    da_glVertexAttribIPointerEXT glVertexAttribIPointerEXT;
    da_glGetVertexAttribIivEXT glGetVertexAttribIivEXT;
    da_glGetVertexAttribIuivEXT glGetVertexAttribIuivEXT;
    da_glUniform1uiEXT glUniform1uiEXT;
    da_glUniform2uiEXT glUniform2uiEXT;
    da_glUniform3uiEXT glUniform3uiEXT;
    da_glUniform4uiEXT glUniform4uiEXT;
    da_glUniform1uivEXT glUniform1uivEXT;
    da_glUniform2uivEXT glUniform2uivEXT;
    da_glUniform3uivEXT glUniform3uivEXT;
    da_glUniform4uivEXT glUniform4uivEXT;
    da_glGetUniformuivEXT glGetUniformuivEXT;
    da_glBindFragDataLocationEXT glBindFragDataLocationEXT;
    da_glGetFragDataLocationEXT glGetFragDataLocationEXT;
}

private __gshared bool _EXT_gpu_shader4;
@nogc bool EXT_gpu_shader4() nothrow @property { return _EXT_gpu_shader4; }
private void load_EXT_gpu_shader4() {
    try {
        bindGLFunc( cast( void** )&glVertexAttribI1iEXT, "glVertexAttribI1iEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI2iEXT, "glVertexAttribI2iEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI3iEXT, "glVertexAttribI3iEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4iEXT, "glVertexAttribI4iEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI1uiEXT, "glVertexAttribI1uiEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI2uiEXT, "glVertexAttribI2uiEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI3uiEXT, "glVertexAttribI3uiEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4uiEXT, "glVertexAttribI4uiEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI1ivEXT, "glVertexAttribI1ivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI2ivEXT, "glVertexAttribI2ivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI3ivEXT, "glVertexAttribI3ivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4ivEXT, "glVertexAttribI4ivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI1uivEXT, "glVertexAttribI1uivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI2uivEXT, "glVertexAttribI2uivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI3uivEXT, "glVertexAttribI3uivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4uivEXT, "glVertexAttribI4uivEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4bvEXT, "glVertexAttribI4bvEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4svEXT, "glVertexAttribI4svEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4ubvEXT, "glVertexAttribI4ubvEXT" );
        bindGLFunc( cast( void** )&glVertexAttribI4usvEXT, "glVertexAttribI4usvEXT" );
        bindGLFunc( cast( void** )&glVertexAttribIPointerEXT, "glVertexAttribIPointerEXT" );
        bindGLFunc( cast( void** )&glGetVertexAttribIivEXT, "glGetVertexAttribIivEXT" );
        bindGLFunc( cast( void** )&glGetVertexAttribIuivEXT, "glGetVertexAttribIuivEXT" );
        bindGLFunc( cast( void** )&glUniform1uiEXT, "glUniform1uiEXT" );
        bindGLFunc( cast( void** )&glUniform2uiEXT, "glUniform2uiEXT" );
        bindGLFunc( cast( void** )&glUniform3uiEXT, "glUniform3uiEXT" );
        bindGLFunc( cast( void** )&glUniform4uiEXT, "glUniform4uiEXT" );
        bindGLFunc( cast( void** )&glUniform1uivEXT, "glUniform1uivEXT" );
        bindGLFunc( cast( void** )&glUniform2uivEXT, "glUniform2uivEXT" );
        bindGLFunc( cast( void** )&glUniform3uivEXT, "glUniform3uivEXT" );
        bindGLFunc( cast( void** )&glUniform4uivEXT, "glUniform4uivEXT" );
        bindGLFunc( cast( void** )&glGetUniformuivEXT, "glGetUniformuivEXT" );
        bindGLFunc( cast( void** )&glBindFragDataLocationEXT, "glBindFragDataLocationEXT" );
        bindGLFunc( cast( void** )&glGetFragDataLocationEXT, "glGetFragDataLocationEXT" );
        _EXT_gpu_shader4 = true;
    } catch ( Exception e ) {
        _EXT_gpu_shader4 = false;
    }
}

// GL_EXT_texture_integer
extern( System ) @nogc nothrow {
    alias da_glClearColorIiEXT = void function ( int r, int g, int b, int a );
    alias da_glClearColorIuiEXT = void function ( uint r, uint g, uint b, uint a );
    alias da_glTexParameterIivEXT = void function( GLenum target, GLenum pname, int *params );
    alias da_glTexParameterIuivEXT = void function( GLenum target, GLenum pname, uint *params );
    alias da_glGetTexParameterIivEXT = void function ( GLenum target, GLenum pname, int *params);
    alias da_glGetTexParameterIuivEXT = void function ( GLenum target, GLenum pname, uint *params);
}

__gshared {
    da_glClearColorIiEXT glClearColorIiEXT;
    da_glClearColorIuiEXT glClearColorIuiEXT;
    da_glTexParameterIivEXT glTexParameterIivEXT;
    da_glTexParameterIuivEXT glTexParameterIuivEXT;
    da_glGetTexParameterIivEXT glGetTexParameterIivEXT;
    da_glGetTexParameterIuivEXT glGetTexParameterIuivEXT;
}

private __gshared bool _EXT_texture_integer;
@nogc bool EXT_texture_integer() nothrow @property { return _EXT_texture_integer; }
private void load_EXT_texture_integer() {
    try {
        bindGLFunc( cast( void** )&glClearColorIiEXT, "glClearColorIiEXT" );
        bindGLFunc( cast( void** )&glClearColorIuiEXT, "glClearColorIuiEXT" );
        bindGLFunc( cast( void** )&glTexParameterIivEXT, "glTexParameterIivEXT" );
        bindGLFunc( cast( void** )&glTexParameterIuivEXT, "glTexParameterIuivEXT" );
        bindGLFunc( cast( void** )&glGetTexParameterIivEXT, "glGetTexParameterIivEXT" );
        bindGLFunc( cast( void** )&glGetTexParameterIuivEXT, "glGetTexParameterIuivEXT" );
        _EXT_texture_integer = true;
    } catch ( Exception e ) {
        _EXT_texture_integer = false;
    }
}

// GL_EXT_texture_buffer_object
extern( System ) @nogc nothrow {
    alias da_glTexBufferEXT = void function(GLenum target, GLenum internalformat, uint buffer);
}

__gshared {
    da_glTexBufferEXT glTexBufferEXT;
}

private __gshared bool _EXT_texture_buffer_object;
@nogc bool EXT_texture_buffer_object() nothrow @property { return _EXT_texture_buffer_object; }
private void load_EXT_texture_buffer_object() {
    try {
        bindGLFunc( cast( void** )&glTexBufferEXT, "glTexBufferEXT" );
        _EXT_texture_buffer_object = true;
    } catch ( Exception e ) {
        _EXT_texture_buffer_object = false;
    }
}

// GL_EXT_direct_state_access
extern( System ) @nogc nothrow {
    alias da_glClientAttribDefaultEXT = void function(GLbitfield mask);
    alias da_glPushClientAttribDefaultEXT = void function(GLbitfield mask);

    alias da_glMatrixLoadfEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixLoaddEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixMultfEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixMultdEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixLoadIdentityEXT = void function(GLenum matrixMode);
    alias da_glMatrixRotatefEXT = void function(GLenum matrixMode, float angle, float x, float y, float z);
    alias da_glMatrixRotatedEXT = void function(GLenum matrixMode, double angle, double x, double y, double z);
    alias da_glMatrixScalefEXT = void function(GLenum matrixMode, float x, float y, float z);
    alias da_glMatrixScaledEXT = void function(GLenum matrixMode, double x, double y, double z);
    alias da_glMatrixTranslatefEXT = void function(GLenum matrixMode, float x, float y, float z);
    alias da_glMatrixTranslatedEXT = void function(GLenum matrixMode, double x, double y, double z);
    alias da_glMatrixOrthoEXT = void function(GLenum matrixMode, double l, double r, double b, double t, double n, double f);
    alias da_glMatrixFrustumEXT = void function(GLenum matrixMode, double l, double r, double b, double t, double n, double f);
    alias da_glMatrixPushEXT = void function(GLenum matrixMode);
    alias da_glMatrixPopEXT = void function(GLenum matrixMode);

    alias da_glTextureParameteriEXT = void function(uint texture, GLenum target, GLenum pname, int param);
    alias da_glTextureParameterivEXT = void function(uint texture, GLenum target, GLenum pname, const int *param);
    alias da_glTextureParameterfEXT = void function(uint texture, GLenum target, GLenum pname, float param);
    alias da_glTextureParameterfvEXT = void function(uint texture, GLenum target, GLenum pname, const float *param);
    alias da_glTextureImage1DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureImage2DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyTextureImage1DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, int border);
    alias da_glCopyTextureImage2DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, GLsizei height, int border);
    alias da_glCopyTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, int x, int y, GLsizei width);
    alias da_glCopyTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int x, int y, GLsizei width, GLsizei height);
    alias da_glGetTextureImageEXT = void function(uint texture, GLenum target, int level, GLenum format, GLenum type, void *pixels);
    alias da_glGetTextureParameterfvEXT = void function(uint texture, GLenum target, GLenum pname, float *params);
    alias da_glGetTextureParameterivEXT = void function(uint texture, GLenum target, GLenum pname, int *params);
    alias da_glGetTextureLevelParameterfvEXT = void function(uint texture, GLenum target, int level, GLenum pname, float *params);
    alias da_glGetTextureLevelParameterivEXT = void function(uint texture, GLenum target, int level, GLenum pname, int *params);

    alias da_glTextureImage3DEXT = void function(uint texture, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, GLsizei width, GLsizei height);

    alias da_glBindMultiTextureEXT = void function(GLenum texunit, GLenum target, uint texture);
    alias da_glMultiTexCoordPointerEXT = void function(GLenum texunit, int size, GLenum type, GLsizei stride, const void *pointer);
    alias da_glMultiTexEnvfEXT = void function(GLenum texunit, GLenum target, GLenum pname, float param);
    alias da_glMultiTexEnvfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, const float *params);
    alias da_glMultiTexEnviEXT = void function(GLenum texunit, GLenum target, GLenum pname, int param);
    alias da_glMultiTexEnvivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *params);
    alias da_glMultiTexGendEXT = void function(GLenum texunit, GLenum coord, GLenum pname, double param);
    alias da_glMultiTexGendvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const double *params);
    alias da_glMultiTexGenfEXT = void function(GLenum texunit, GLenum coord, GLenum pname, float param);
    alias da_glMultiTexGenfvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const float *params);
    alias da_glMultiTexGeniEXT = void function(GLenum texunit, GLenum coord, GLenum pname, int param);
    alias da_glMultiTexGenivEXT = void function(GLenum texunit, GLenum coord, GLenum pname, const int *params);
    alias da_glGetMultiTexEnvfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, float *params);
    alias da_glGetMultiTexEnvivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexGendvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, double *params);
    alias da_glGetMultiTexGenfvEXT = void function(GLenum texunit, GLenum coord, GLenum pname, float *params);
    alias da_glGetMultiTexGenivEXT = void function(GLenum texunit, GLenum coord, GLenum pname, int *params);
    alias da_glMultiTexParameteriEXT = void function(GLenum texunit, GLenum target, GLenum pname, int param);
    alias da_glMultiTexParameterivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *param);
    alias da_glMultiTexParameterfEXT = void function(GLenum texunit, GLenum target, GLenum pname, float param);
    alias da_glMultiTexParameterfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, const float *param);
    alias da_glMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, int border);
    alias da_glCopyMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, int x, int y, GLsizei width, GLsizei height, int border);
    alias da_glCopyMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int x, int y, GLsizei width);
    alias da_glCopyMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int x, int y, GLsizei width, GLsizei height);
    alias da_glGetMultiTexImageEXT = void function(GLenum texunit, GLenum target, int level, GLenum format, GLenum type, void *pixels);
    alias da_glGetMultiTexParameterfvEXT = void function(GLenum texunit, GLenum target, GLenum pname, float *params);
    alias da_glGetMultiTexParameterivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexLevelParameterfvEXT = void function(GLenum texunit, GLenum target, int level, GLenum pname, float *params);
    alias da_glGetMultiTexLevelParameterivEXT = void function(GLenum texunit, GLenum target, int level, GLenum pname, int *params);
    alias da_glMultiTexImage3DEXT = void function(GLenum texunit, GLenum target, int level, int internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLenum format, GLenum type, const void *pixels);
    alias da_glMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
    alias da_glCopyMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, GLsizei width, GLsizei height);

    alias da_glEnableClientStateIndexedEXT = void function(GLenum array, uint index);
    alias da_glDisableClientStateIndexedEXT = void function(GLenum array, uint index);

    alias da_glEnableClientStateiEXT = void function(GLenum array, uint index);
    alias da_glDisableClientStateiEXT = void function(GLenum array, uint index);

    alias da_glGetFloatIndexedvEXT = void function(GLenum target, uint index, float *params);
    alias da_glGetDoubleIndexedvEXT = void function(GLenum target, uint index, double *params);
    alias da_glGetPointerIndexedvEXT = void function(GLenum target, uint index, void **params);

    alias da_glGetFloati_vEXT = void function(GLenum pname, uint index, float *params);
    alias da_glGetDoublei_vEXT = void function(GLenum pname, uint index, double *params);
    alias da_glGetPointeri_vEXT = void function(GLenum pname, uint index, void **params);

    alias da_glNamedProgramStringEXT = void function(uint program, GLenum target, GLenum format, GLsizei len, const void *string);
    alias da_glNamedProgramLocalParameter4dEXT = void function(uint program, GLenum target, uint index, double x, double y, double z, double w);
    alias da_glNamedProgramLocalParameter4dvEXT = void function(uint program, GLenum target, uint index, const double *params);
    alias da_glNamedProgramLocalParameter4fEXT = void function(uint program, GLenum target, uint index, float x, float y, float z, float w);
    alias da_glNamedProgramLocalParameter4fvEXT = void function(uint program, GLenum target, uint index, const float *params);
    alias da_glGetNamedProgramLocalParameterdvEXT = void function(uint program, GLenum target, uint index, double *params);
    alias da_glGetNamedProgramLocalParameterfvEXT = void function(uint program, GLenum target, uint index, float *params);
    alias da_glGetNamedProgramivEXT = void function(uint program, GLenum target, GLenum pname, int *params);
    alias da_glGetNamedProgramStringEXT = void function(uint program, GLenum target, GLenum pname, void *string);

    alias da_glCompressedTextureImage3DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureImage2DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureImage1DEXT = void function(uint texture, GLenum target, int level, GLenum internalformat, GLsizei width, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage3DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage2DEXT = void function(uint texture, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedTextureSubImage1DEXT = void function(uint texture, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    alias da_glGetCompressedTextureImageEXT = void function(uint texture, GLenum target, int level, void *img);

    alias da_glCompressedMultiTexImage3DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexImage2DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, GLsizei height, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexImage1DEXT = void function(GLenum texunit, GLenum target, int level, GLenum internalformat, GLsizei width, int border, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage3DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, int zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage2DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, int yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
    alias da_glCompressedMultiTexSubImage1DEXT = void function(GLenum texunit, GLenum target, int level, int xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
    alias da_glGetCompressedMultiTexImageEXT = void function(GLenum texunit, GLenum target, int level, void *img);

    alias da_glMatrixLoadTransposefEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixLoadTransposedEXT = void function(GLenum matrixMode, const double *m);
    alias da_glMatrixMultTransposefEXT = void function(GLenum matrixMode, const float *m);
    alias da_glMatrixMultTransposedEXT = void function(GLenum matrixMode, const double *m);

    alias da_glNamedBufferDataEXT = void function(uint buffer, GLsizeiptr size, const void *data, GLenum usage);
    alias da_glNamedBufferSubDataEXT = void function(uint buffer, GLintptr offset, GLsizeiptr size, const void *data);
    alias da_glMapNamedBufferEXT = void* function(uint buffer, GLenum access);
    alias da_glUnmapNamedBufferEXT = GLboolean function(uint buffer);
    alias da_glGetNamedBufferParameterivEXT = void function(uint buffer, GLenum pname, int *params);
    alias da_glGetNamedBufferPointervEXT = void function(uint buffer, GLenum pname, void* *params);
    alias da_glGetNamedBufferSubDataEXT = void function(uint buffer, GLintptr offset, GLsizeiptr size, void *data);

    alias da_glProgramUniform1fEXT = void function(uint program, int location, float v0);
    alias da_glProgramUniform2fEXT = void function(uint program, int location, float v0, float v1);
    alias da_glProgramUniform3fEXT = void function(uint program, int location, float v0, float v1, float v2);
    alias da_glProgramUniform4fEXT = void function(uint program, int location, float v0, float v1, float v2, float v3);
    alias da_glProgramUniform1iEXT = void function(uint program, int location, int v0);
    alias da_glProgramUniform2iEXT = void function(uint program, int location, int v0, int v1);
    alias da_glProgramUniform3iEXT = void function(uint program, int location, int v0, int v1, int v2);
    alias da_glProgramUniform4iEXT = void function(uint program, int location, int v0, int v1, int v2, int v3);
    alias da_glProgramUniform1fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform2fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform3fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform4fvEXT = void function(uint program, int location, GLsizei count, const float *value);
    alias da_glProgramUniform1ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform2ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform3ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniform4ivEXT = void function(uint program, int location, GLsizei count, const int *value);
    alias da_glProgramUniformMatrix2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);

    alias da_glProgramUniformMatrix2x3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3x2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix2x4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4x2fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix3x4fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);
    alias da_glProgramUniformMatrix4x3fvEXT = void function(uint program, int location, GLsizei count, GLboolean transpose, const float *value);

    alias da_glTextureBufferEXT = void function(uint texture, GLenum target, GLenum internalformat, uint buffer);

    alias da_glMultiTexBufferEXT = void function(GLenum texunit, GLenum target, GLenum internalformat, uint buffer);

    alias da_glTextureParameterIivEXT = void function(uint texture, GLenum target, GLenum pname, const int *params);
    alias da_glTextureParameterIuivEXT = void function(uint texture, GLenum target, GLenum pname, const uint *params);
    alias da_glGetTextureParameterIivEXT = void function(uint texture, GLenum target, GLenum pname, int *params);
    alias da_glGetTextureParameterIuivEXT = void function(uint texture, GLenum target, GLenum pname, uint *params);

    alias da_glMultiTexParameterIivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const int *params);
    alias da_glMultiTexParameterIuivEXT = void function(GLenum texunit, GLenum target, GLenum pname, const uint *params);
    alias da_glGetMultiTexParameterIivEXT = void function(GLenum texunit, GLenum target, GLenum pname, int *params);
    alias da_glGetMultiTexParameterIuivEXT = void function(GLenum texunit, GLenum target, GLenum pname, uint *params);

    alias da_glProgramUniform1uiEXT = void function(uint program, int location, uint v0);
    alias da_glProgramUniform2uiEXT = void function(uint program, int location, uint v0, uint v1);
    alias da_glProgramUniform3uiEXT = void function(uint program, int location, uint v0, uint v1, uint v2);
    alias da_glProgramUniform4uiEXT = void function(uint program, int location, uint v0, uint v1, uint v2, uint v3);
    alias da_glProgramUniform1uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform2uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform3uivEXT = void function(uint program, int location, GLsizei count, const uint *value);
    alias da_glProgramUniform4uivEXT = void function(uint program, int location, GLsizei count, const uint *value);

    alias da_glNamedProgramLocalParameters4fvEXT = void function(uint program, GLenum target, uint index, GLsizei count, const float *params);

    alias da_glNamedProgramLocalParameterI4iEXT = void function(uint program, GLenum target, uint index, int x, int y, int z, int w);
    alias da_glNamedProgramLocalParameterI4ivEXT = void function(uint program, GLenum target, uint index, const int *params);
    alias da_glNamedProgramLocalParametersI4ivEXT = void function(uint program, GLenum target, uint index, GLsizei count, const int *params);
    alias da_glNamedProgramLocalParameterI4uiEXT = void function(uint program, GLenum target, uint index, uint x, uint y, uint z, uint w);
    alias da_glNamedProgramLocalParameterI4uivEXT = void function(uint program, GLenum target, uint index, const uint *params);
    alias da_glNamedProgramLocalParametersI4uivEXT = void function(uint program, GLenum target, uint index, GLsizei count, const uint *params);
    alias da_glGetNamedProgramLocalParameterIivEXT = void function(uint program, GLenum target, uint index, int *params);
    alias da_glGetNamedProgramLocalParameterIuivEXT = void function(uint program, GLenum target, uint index, uint *params);

    alias da_glNamedRenderbufferStorageEXT = void function(uint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
    alias da_glGetNamedRenderbufferParameterivEXT = void function(uint renderbuffer, GLenum pname, int *params);

    alias da_glNamedRenderbufferStorageMultisampleEXT = void function(uint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);

    alias da_glNamedRenderbufferStorageMultisampleCoverageEXT = void function(uint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);

    alias da_glCheckNamedFramebufferStatusEXT = GLenum function(uint framebuffer, GLenum target);
    alias da_glNamedFramebufferTexture1DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level);
    alias da_glNamedFramebufferTexture2DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level);
    alias da_glNamedFramebufferTexture3DEXT = void function(uint framebuffer, GLenum attachment, GLenum textarget, uint texture, int level, int zoffset);
    alias da_glNamedFramebufferRenderbufferEXT = void function(uint framebuffer, GLenum attachment, GLenum renderbuffertarget, uint renderbuffer);
    alias da_glGetNamedFramebufferAttachmentParameterivEXT = void function(uint framebuffer, GLenum attachment, GLenum pname, int *params);

    alias da_glGenerateTextureMipmapEXT = void function(uint texture, GLenum target);

    alias da_glGenerateMultiTexMipmapEXT = void function(GLenum texunit, GLenum target);

    alias da_glFramebufferDrawBufferEXT = void function(uint framebuffer, GLenum mode);
    alias da_glFramebufferDrawBuffersEXT = void function(uint framebuffer, GLsizei n, const GLenum *bufs);
    alias da_glFramebufferReadBufferEXT = void function(uint framebuffer, GLenum mode);

    alias da_glGetFramebufferParameterivEXT = void function(uint framebuffer, GLenum pname, int *param);

    alias da_glNamedCopyBufferSubDataEXT = void function(uint readBuffer, uint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);

    alias da_glNamedFramebufferTextureEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level);
    alias da_glNamedFramebufferTextureLayerEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level, int layer);
    alias da_glNamedFramebufferTextureFaceEXT = void function(uint framebuffer, GLenum attachment, uint texture, int level, GLenum face);

    alias da_glTextureRenderbufferEXT = void function(uint texture, GLenum target, uint renderbuffer);

    alias da_glMultiTexRenderbufferEXT = void function(GLenum texunit, GLenum target, uint renderbuffer);

    alias da_glVertexArrayVertexOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayColorOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayEdgeFlagOffsetEXT = void function(uint vaobj, uint buffer, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayIndexOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayNormalOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayTexCoordOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayMultiTexCoordOffsetEXT = void function(uint vaobj, uint buffer, GLenum texunit, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayFogCoordOffsetEXT = void function(uint vaobj, uint buffer, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArraySecondaryColorOffsetEXT = void function(uint vaobj, uint buffer, int size, GLenum type, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayVertexAttribOffsetEXT = void function(uint vaobj, uint buffer, uint index, int size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    alias da_glVertexArrayVertexAttribIOffsetEXT = void function(uint vaobj, uint buffer, uint index, int size, GLenum type, GLsizei stride, GLintptr offset);

    alias da_glEnableVertexArrayEXT = void function(uint vaobj, GLenum array);
    alias da_glDisableVertexArrayEXT = void function(uint vaobj, GLenum array);

    alias da_glEnableVertexArrayAttribEXT = void function(uint vaobj, uint index);
    alias da_glDisableVertexArrayAttribEXT = void function(uint vaobj, uint index);

    alias da_glGetVertexArrayIntegervEXT = void function(uint vaobj, GLenum pname, int *param);
    alias da_glGetVertexArrayPointervEXT = void function(uint vaobj, GLenum pname, void **param);
    alias da_glGetVertexArrayIntegeri_vEXT = void function(uint vaobj, uint index, GLenum pname, int *param);
    alias da_glGetVertexArrayPointeri_vEXT = void function(uint vaobj, uint index, GLenum pname, void **param);

    alias da_glMapNamedBufferRangeEXT = void* function(uint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
    alias da_glFlushMappedNamedBufferRangeEXT = void function(uint buffer, GLintptr offset, GLsizeiptr length);
}

__gshared {
    da_glClientAttribDefaultEXT glClientAttribDefaultEXT;
    da_glPushClientAttribDefaultEXT glPushClientAttribDefaultEXT;
    da_glMatrixLoadfEXT glMatrixLoadfEXT;
    da_glMatrixLoaddEXT glMatrixLoaddEXT;
    da_glMatrixMultfEXT glMatrixMultfEXT;
    da_glMatrixMultdEXT glMatrixMultdEXT;
    da_glMatrixLoadIdentityEXT glMatrixLoadIdentityEXT;
    da_glMatrixRotatefEXT glMatrixRotatefEXT;
    da_glMatrixRotatedEXT glMatrixRotatedEXT;
    da_glMatrixScalefEXT glMatrixScalefEXT;
    da_glMatrixScaledEXT glMatrixScaledEXT;
    da_glMatrixTranslatefEXT glMatrixTranslatefEXT;
    da_glMatrixTranslatedEXT glMatrixTranslatedEXT;
    da_glMatrixOrthoEXT glMatrixOrthoEXT;
    da_glMatrixFrustumEXT glMatrixFrustumEXT;
    da_glMatrixPushEXT glMatrixPushEXT;
    da_glMatrixPopEXT glMatrixPopEXT;
    da_glTextureParameteriEXT glTextureParameteriEXT;
    da_glTextureParameterivEXT glTextureParameterivEXT;
    da_glTextureParameterfEXT glTextureParameterfEXT;
    da_glTextureParameterfvEXT glTextureParameterfvEXT;
    da_glTextureImage1DEXT glTextureImage1DEXT;
    da_glTextureImage2DEXT glTextureImage2DEXT;
    da_glTextureSubImage1DEXT glTextureSubImage1DEXT;
    da_glTextureSubImage2DEXT glTextureSubImage2DEXT;
    da_glCopyTextureImage1DEXT glCopyTextureImage1DEXT;
    da_glCopyTextureImage2DEXT glCopyTextureImage2DEXT;
    da_glCopyTextureSubImage1DEXT glCopyTextureSubImage1DEXT;
    da_glCopyTextureSubImage2DEXT glCopyTextureSubImage2DEXT;
    da_glGetTextureImageEXT glGetTextureImageEXT;
    da_glGetTextureParameterfvEXT glGetTextureParameterfvEXT;
    da_glGetTextureParameterivEXT glGetTextureParameterivEXT;
    da_glGetTextureLevelParameterfvEXT glGetTextureLevelParameterfvEXT;
    da_glGetTextureLevelParameterivEXT glGetTextureLevelParameterivEXT;
    da_glTextureImage3DEXT glTextureImage3DEXT;
    da_glTextureSubImage3DEXT glTextureSubImage3DEXT;
    da_glCopyTextureSubImage3DEXT glCopyTextureSubImage3DEXT;
    da_glBindMultiTextureEXT glBindMultiTextureEXT;
    da_glMultiTexCoordPointerEXT glMultiTexCoordPointerEXT;
    da_glMultiTexEnvfEXT glMultiTexEnvfEXT;
    da_glMultiTexEnvfvEXT glMultiTexEnvfvEXT;
    da_glMultiTexEnviEXT glMultiTexEnviEXT;
    da_glMultiTexEnvivEXT glMultiTexEnvivEXT;
    da_glMultiTexGendEXT glMultiTexGendEXT;
    da_glMultiTexGendvEXT glMultiTexGendvEXT;
    da_glMultiTexGenfEXT glMultiTexGenfEXT;
    da_glMultiTexGenfvEXT glMultiTexGenfvEXT;
    da_glMultiTexGeniEXT glMultiTexGeniEXT;
    da_glMultiTexGenivEXT glMultiTexGenivEXT;
    da_glGetMultiTexEnvfvEXT glGetMultiTexEnvfvEXT;
    da_glGetMultiTexEnvivEXT glGetMultiTexEnvivEXT;
    da_glGetMultiTexGendvEXT glGetMultiTexGendvEXT;
    da_glGetMultiTexGenfvEXT glGetMultiTexGenfvEXT;
    da_glGetMultiTexGenivEXT glGetMultiTexGenivEXT;
    da_glMultiTexParameteriEXT glMultiTexParameteriEXT;
    da_glMultiTexParameterivEXT glMultiTexParameterivEXT;
    da_glMultiTexParameterfEXT glMultiTexParameterfEXT;
    da_glMultiTexParameterfvEXT glMultiTexParameterfvEXT;
    da_glMultiTexImage1DEXT glMultiTexImage1DEXT;
    da_glMultiTexImage2DEXT glMultiTexImage2DEXT;
    da_glMultiTexSubImage1DEXT glMultiTexSubImage1DEXT;
    da_glMultiTexSubImage2DEXT glMultiTexSubImage2DEXT;
    da_glCopyMultiTexImage1DEXT glCopyMultiTexImage1DEXT;
    da_glCopyMultiTexImage2DEXT glCopyMultiTexImage2DEXT;
    da_glCopyMultiTexSubImage1DEXT glCopyMultiTexSubImage1DEXT;
    da_glCopyMultiTexSubImage2DEXT glCopyMultiTexSubImage2DEXT;
    da_glGetMultiTexImageEXT glGetMultiTexImageEXT;
    da_glGetMultiTexParameterfvEXT glGetMultiTexParameterfvEXT;
    da_glGetMultiTexParameterivEXT glGetMultiTexParameterivEXT;
    da_glGetMultiTexLevelParameterfvEXT glGetMultiTexLevelParameterfvEXT;
    da_glGetMultiTexLevelParameterivEXT glGetMultiTexLevelParameterivEXT;
    da_glMultiTexImage3DEXT glMultiTexImage3DEXT;
    da_glMultiTexSubImage3DEXT glMultiTexSubImage3DEXT;
    da_glCopyMultiTexSubImage3DEXT glCopyMultiTexSubImage3DEXT;
    da_glEnableClientStateIndexedEXT glEnableClientStateIndexedEXT;
    da_glDisableClientStateIndexedEXT glDisableClientStateIndexedEXT;
    da_glEnableClientStateiEXT glEnableClientStateiEXT;
    da_glDisableClientStateiEXT glDisableClientStateiEXT;
    da_glGetFloatIndexedvEXT glGetFloatIndexedvEXT;
    da_glGetDoubleIndexedvEXT glGetDoubleIndexedvEXT;
    da_glGetPointerIndexedvEXT glGetPointerIndexedvEXT;
    da_glGetFloati_vEXT glGetFloati_vEXT;
    da_glGetDoublei_vEXT glGetDoublei_vEXT;
    da_glGetPointeri_vEXT glGetPointeri_vEXT;
    da_glNamedProgramStringEXT glNamedProgramStringEXT;
    da_glNamedProgramLocalParameter4dEXT glNamedProgramLocalParameter4dEXT;
    da_glNamedProgramLocalParameter4dvEXT glNamedProgramLocalParameter4dvEXT;
    da_glNamedProgramLocalParameter4fEXT glNamedProgramLocalParameter4fEXT;
    da_glNamedProgramLocalParameter4fvEXT glNamedProgramLocalParameter4fvEXT;
    da_glGetNamedProgramLocalParameterdvEXT glGetNamedProgramLocalParameterdvEXT;
    da_glGetNamedProgramLocalParameterfvEXT glGetNamedProgramLocalParameterfvEXT;
    da_glGetNamedProgramivEXT glGetNamedProgramivEXT;
    da_glGetNamedProgramStringEXT glGetNamedProgramStringEXT;
    da_glCompressedTextureImage3DEXT glCompressedTextureImage3DEXT;
    da_glCompressedTextureImage2DEXT glCompressedTextureImage2DEXT;
    da_glCompressedTextureImage1DEXT glCompressedTextureImage1DEXT;
    da_glCompressedTextureSubImage3DEXT glCompressedTextureSubImage3DEXT;
    da_glCompressedTextureSubImage2DEXT glCompressedTextureSubImage2DEXT;
    da_glCompressedTextureSubImage1DEXT glCompressedTextureSubImage1DEXT;
    da_glGetCompressedTextureImageEXT glGetCompressedTextureImageEXT;
    da_glCompressedMultiTexImage3DEXT glCompressedMultiTexImage3DEXT;
    da_glCompressedMultiTexImage2DEXT glCompressedMultiTexImage2DEXT;
    da_glCompressedMultiTexImage1DEXT glCompressedMultiTexImage1DEXT;
    da_glCompressedMultiTexSubImage3DEXT glCompressedMultiTexSubImage3DEXT;
    da_glCompressedMultiTexSubImage2DEXT glCompressedMultiTexSubImage2DEXT;
    da_glCompressedMultiTexSubImage1DEXT glCompressedMultiTexSubImage1DEXT;
    da_glGetCompressedMultiTexImageEXT glGetCompressedMultiTexImageEXT;
    da_glMatrixLoadTransposefEXT glMatrixLoadTransposefEXT;
    da_glMatrixLoadTransposedEXT glMatrixLoadTransposedEXT;
    da_glMatrixMultTransposefEXT glMatrixMultTransposefEXT;
    da_glMatrixMultTransposedEXT glMatrixMultTransposedEXT;
    da_glNamedBufferDataEXT glNamedBufferDataEXT;
    da_glNamedBufferSubDataEXT glNamedBufferSubDataEXT;
    da_glMapNamedBufferEXT glMapNamedBufferEXT;
    da_glUnmapNamedBufferEXT glUnmapNamedBufferEXT;
    da_glGetNamedBufferParameterivEXT glGetNamedBufferParameterivEXT;
    da_glGetNamedBufferPointervEXT glGetNamedBufferPointervEXT;
    da_glGetNamedBufferSubDataEXT glGetNamedBufferSubDataEXT;
    da_glProgramUniform1fEXT glProgramUniform1fEXT;
    da_glProgramUniform2fEXT glProgramUniform2fEXT;
    da_glProgramUniform3fEXT glProgramUniform3fEXT;
    da_glProgramUniform4fEXT glProgramUniform4fEXT;
    da_glProgramUniform1iEXT glProgramUniform1iEXT;
    da_glProgramUniform2iEXT glProgramUniform2iEXT;
    da_glProgramUniform3iEXT glProgramUniform3iEXT;
    da_glProgramUniform4iEXT glProgramUniform4iEXT;
    da_glProgramUniform1fvEXT glProgramUniform1fvEXT;
    da_glProgramUniform2fvEXT glProgramUniform2fvEXT;
    da_glProgramUniform3fvEXT glProgramUniform3fvEXT;
    da_glProgramUniform4fvEXT glProgramUniform4fvEXT;
    da_glProgramUniform1ivEXT glProgramUniform1ivEXT;
    da_glProgramUniform2ivEXT glProgramUniform2ivEXT;
    da_glProgramUniform3ivEXT glProgramUniform3ivEXT;
    da_glProgramUniform4ivEXT glProgramUniform4ivEXT;
    da_glProgramUniformMatrix2fvEXT glProgramUniformMatrix2fvEXT;
    da_glProgramUniformMatrix3fvEXT glProgramUniformMatrix3fvEXT;
    da_glProgramUniformMatrix4fvEXT glProgramUniformMatrix4fvEXT;
    da_glProgramUniformMatrix2x3fvEXT glProgramUniformMatrix2x3fvEXT;
    da_glProgramUniformMatrix3x2fvEXT glProgramUniformMatrix3x2fvEXT;
    da_glProgramUniformMatrix2x4fvEXT glProgramUniformMatrix2x4fvEXT;
    da_glProgramUniformMatrix4x2fvEXT glProgramUniformMatrix4x2fvEXT;
    da_glProgramUniformMatrix3x4fvEXT glProgramUniformMatrix3x4fvEXT;
    da_glProgramUniformMatrix4x3fvEXT glProgramUniformMatrix4x3fvEXT;
    da_glTextureBufferEXT glTextureBufferEXT;
    da_glMultiTexBufferEXT glMultiTexBufferEXT;
    da_glTextureParameterIivEXT glTextureParameterIivEXT;
    da_glTextureParameterIuivEXT glTextureParameterIuivEXT;
    da_glGetTextureParameterIivEXT glGetTextureParameterIivEXT;
    da_glGetTextureParameterIuivEXT glGetTextureParameterIuivEXT;
    da_glMultiTexParameterIivEXT glMultiTexParameterIivEXT;
    da_glMultiTexParameterIuivEXT glMultiTexParameterIuivEXT;
    da_glGetMultiTexParameterIivEXT glGetMultiTexParameterIivEXT;
    da_glGetMultiTexParameterIuivEXT glGetMultiTexParameterIuivEXT;
    da_glProgramUniform1uiEXT glProgramUniform1uiEXT;
    da_glProgramUniform2uiEXT glProgramUniform2uiEXT;
    da_glProgramUniform3uiEXT glProgramUniform3uiEXT;
    da_glProgramUniform4uiEXT glProgramUniform4uiEXT;
    da_glProgramUniform1uivEXT glProgramUniform1uivEXT;
    da_glProgramUniform2uivEXT glProgramUniform2uivEXT;
    da_glProgramUniform3uivEXT glProgramUniform3uivEXT;
    da_glProgramUniform4uivEXT glProgramUniform4uivEXT;
    da_glNamedProgramLocalParameters4fvEXT glNamedProgramLocalParameters4fvEXT;
    da_glNamedProgramLocalParameterI4iEXT glNamedProgramLocalParameterI4iEXT;
    da_glNamedProgramLocalParameterI4ivEXT glNamedProgramLocalParameterI4ivEXT;
    da_glNamedProgramLocalParametersI4ivEXT glNamedProgramLocalParametersI4ivEXT;
    da_glNamedProgramLocalParameterI4uiEXT glNamedProgramLocalParameterI4uiEXT;
    da_glNamedProgramLocalParameterI4uivEXT glNamedProgramLocalParameterI4uivEXT;
    da_glNamedProgramLocalParametersI4uivEXT glNamedProgramLocalParametersI4uivEXT;
    da_glGetNamedProgramLocalParameterIivEXT glGetNamedProgramLocalParameterIivEXT;
    da_glGetNamedProgramLocalParameterIuivEXT glGetNamedProgramLocalParameterIuivEXT;
    da_glNamedRenderbufferStorageEXT glNamedRenderbufferStorageEXT;
    da_glGetNamedRenderbufferParameterivEXT glGetNamedRenderbufferParameterivEXT;
    da_glNamedRenderbufferStorageMultisampleEXT glNamedRenderbufferStorageMultisampleEXT;
    da_glNamedRenderbufferStorageMultisampleCoverageEXT glNamedRenderbufferStorageMultisampleCoverageEXT;
    da_glCheckNamedFramebufferStatusEXT glCheckNamedFramebufferStatusEXT;
    da_glNamedFramebufferTexture1DEXT glNamedFramebufferTexture1DEXT;
    da_glNamedFramebufferTexture2DEXT glNamedFramebufferTexture2DEXT;
    da_glNamedFramebufferTexture3DEXT glNamedFramebufferTexture3DEXT;
    da_glNamedFramebufferRenderbufferEXT glNamedFramebufferRenderbufferEXT;
    da_glGetNamedFramebufferAttachmentParameterivEXT glGetNamedFramebufferAttachmentParameterivEXT;
    da_glGenerateTextureMipmapEXT glGenerateTextureMipmapEXT;
    da_glGenerateMultiTexMipmapEXT glGenerateMultiTexMipmapEXT;
    da_glFramebufferDrawBufferEXT glFramebufferDrawBufferEXT;
    da_glFramebufferDrawBuffersEXT glFramebufferDrawBuffersEXT;
    da_glFramebufferReadBufferEXT glFramebufferReadBufferEXT;
    da_glGetFramebufferParameterivEXT glGetFramebufferParameterivEXT;
    da_glNamedCopyBufferSubDataEXT glNamedCopyBufferSubDataEXT;
    da_glNamedFramebufferTextureEXT glNamedFramebufferTextureEXT;
    da_glNamedFramebufferTextureLayerEXT glNamedFramebufferTextureLayerEXT;
    da_glNamedFramebufferTextureFaceEXT glNamedFramebufferTextureFaceEXT;
    da_glTextureRenderbufferEXT glTextureRenderbufferEXT;
    da_glMultiTexRenderbufferEXT glMultiTexRenderbufferEXT;
    da_glVertexArrayVertexOffsetEXT glVertexArrayVertexOffsetEXT;
    da_glVertexArrayColorOffsetEXT glVertexArrayColorOffsetEXT;
    da_glVertexArrayEdgeFlagOffsetEXT glVertexArrayEdgeFlagOffsetEXT;
    da_glVertexArrayIndexOffsetEXT glVertexArrayIndexOffsetEXT;
    da_glVertexArrayNormalOffsetEXT glVertexArrayNormalOffsetEXT;
    da_glVertexArrayTexCoordOffsetEXT glVertexArrayTexCoordOffsetEXT;
    da_glVertexArrayMultiTexCoordOffsetEXT glVertexArrayMultiTexCoordOffsetEXT;
    da_glVertexArrayFogCoordOffsetEXT glVertexArrayFogCoordOffsetEXT;
    da_glVertexArraySecondaryColorOffsetEXT glVertexArraySecondaryColorOffsetEXT;
    da_glVertexArrayVertexAttribOffsetEXT glVertexArrayVertexAttribOffsetEXT;
    da_glVertexArrayVertexAttribIOffsetEXT glVertexArrayVertexAttribIOffsetEXT;
    da_glEnableVertexArrayEXT glEnableVertexArrayEXT;
    da_glDisableVertexArrayEXT glDisableVertexArrayEXT;
    da_glEnableVertexArrayAttribEXT glEnableVertexArrayAttribEXT;
    da_glDisableVertexArrayAttribEXT glDisableVertexArrayAttribEXT;
    da_glGetVertexArrayIntegervEXT glGetVertexArrayIntegervEXT;
    da_glGetVertexArrayPointervEXT glGetVertexArrayPointervEXT;
    da_glGetVertexArrayIntegeri_vEXT glGetVertexArrayIntegeri_vEXT;
    da_glGetVertexArrayPointeri_vEXT glGetVertexArrayPointeri_vEXT;
    da_glMapNamedBufferRangeEXT glMapNamedBufferRangeEXT;
    da_glFlushMappedNamedBufferRangeEXT glFlushMappedNamedBufferRangeEXT;
}

private __gshared bool _EXT_direct_state_access;
@nogc bool EXT_direct_state_access() nothrow @property { return _EXT_direct_state_access; }
private void load_EXT_direct_state_access( GLVersion glversion ) {
    try {
        bindGLFunc( cast( void** )&glClientAttribDefaultEXT, "glClientAttribDefaultEXT" );
        bindGLFunc( cast( void** )&glPushClientAttribDefaultEXT, "glPushClientAttribDefaultEXT" );

        bindGLFunc( cast( void** )&glMatrixLoadfEXT, "glMatrixLoadfEXT" );
        bindGLFunc( cast( void** )&glMatrixLoaddEXT, "glMatrixLoaddEXT" );
        bindGLFunc( cast( void** )&glMatrixMultfEXT, "glMatrixMultfEXT" );
        bindGLFunc( cast( void** )&glMatrixMultdEXT, "glMatrixMultdEXT" );
        bindGLFunc( cast( void** )&glMatrixLoadIdentityEXT, "glMatrixLoadIdentityEXT" );
        bindGLFunc( cast( void** )&glMatrixRotatefEXT, "glMatrixRotatefEXT" );
        bindGLFunc( cast( void** )&glMatrixRotatedEXT, "glMatrixRotatedEXT" );
        bindGLFunc( cast( void** )&glMatrixScalefEXT, "glMatrixScalefEXT" );
        bindGLFunc( cast( void** )&glMatrixScaledEXT, "glMatrixScaledEXT" );
        bindGLFunc( cast( void** )&glMatrixTranslatefEXT, "glMatrixTranslatefEXT" );
        bindGLFunc( cast( void** )&glMatrixTranslatedEXT, "glMatrixTranslatedEXT" );
        bindGLFunc( cast( void** )&glMatrixOrthoEXT, "glMatrixOrthoEXT" );
        bindGLFunc( cast( void** )&glMatrixFrustumEXT, "glMatrixFrustumEXT" );
        bindGLFunc( cast( void** )&glMatrixPushEXT, "glMatrixPushEXT" );
        bindGLFunc( cast( void** )&glMatrixPopEXT, "glMatrixPopEXT" );

        bindGLFunc( cast( void** )&glTextureParameteriEXT, "glTextureParameteriEXT" );
        bindGLFunc( cast( void** )&glTextureParameterivEXT, "glTextureParameterivEXT" );
        bindGLFunc( cast( void** )&glTextureParameterfEXT, "glTextureParameterfEXT" );
        bindGLFunc( cast( void** )&glTextureParameterfvEXT, "glTextureParameterfvEXT" );
        bindGLFunc( cast( void** )&glTextureImage1DEXT, "glTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glTextureImage2DEXT, "glTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage1DEXT, "glTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage2DEXT, "glTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureImage1DEXT, "glCopyTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureImage2DEXT, "glCopyTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage1DEXT, "glCopyTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage2DEXT, "glCopyTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glGetTextureImageEXT, "glGetTextureImageEXT" );
        bindGLFunc( cast( void** )&glGetTextureParameterfvEXT, "glGetTextureParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetTextureParameterivEXT, "glGetTextureParameterivEXT" );
        bindGLFunc( cast( void** )&glGetTextureLevelParameterfvEXT, "glGetTextureLevelParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetTextureLevelParameterivEXT, "glGetTextureLevelParameterivEXT" );

        bindGLFunc( cast( void** )&glTextureImage3DEXT, "glTextureImage3DEXT" );
        bindGLFunc( cast( void** )&glTextureSubImage3DEXT, "glTextureSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCopyTextureSubImage3DEXT, "glCopyTextureSubImage3DEXT" );

        bindGLFunc( cast( void** )&glBindMultiTextureEXT, "glBindMultiTextureEXT" );
        bindGLFunc( cast( void** )&glMultiTexCoordPointerEXT, "glMultiTexCoordPointerEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvfEXT, "glMultiTexEnvfEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvfvEXT, "glMultiTexEnvfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnviEXT, "glMultiTexEnviEXT" );
        bindGLFunc( cast( void** )&glMultiTexEnvivEXT, "glMultiTexEnvivEXT" );
        bindGLFunc( cast( void** )&glMultiTexGendEXT, "glMultiTexGendEXT" );
        bindGLFunc( cast( void** )&glMultiTexGendvEXT, "glMultiTexGendvEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenfEXT, "glMultiTexGenfEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenfvEXT, "glMultiTexGenfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexGeniEXT, "glMultiTexGeniEXT" );
        bindGLFunc( cast( void** )&glMultiTexGenivEXT, "glMultiTexGenivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexEnvfvEXT, "glGetMultiTexEnvfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexEnvivEXT, "glGetMultiTexEnvivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGendvEXT, "glGetMultiTexGendvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGenfvEXT, "glGetMultiTexGenfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexGenivEXT, "glGetMultiTexGenivEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameteriEXT, "glMultiTexParameteriEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterivEXT, "glMultiTexParameterivEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterfEXT, "glMultiTexParameterfEXT" );
        bindGLFunc( cast( void** )&glMultiTexParameterfvEXT, "glMultiTexParameterfvEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage1DEXT, "glMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage2DEXT, "glMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage1DEXT, "glMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage2DEXT, "glMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexImage1DEXT, "glCopyMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexImage2DEXT, "glCopyMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage1DEXT, "glCopyMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage2DEXT, "glCopyMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexImageEXT, "glGetMultiTexImageEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexParameterfvEXT, "glGetMultiTexParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexParameterivEXT, "glGetMultiTexParameterivEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexLevelParameterfvEXT, "glGetMultiTexLevelParameterfvEXT" );
        bindGLFunc( cast( void** )&glGetMultiTexLevelParameterivEXT, "glGetMultiTexLevelParameterivEXT" );
        bindGLFunc( cast( void** )&glMultiTexImage3DEXT, "glMultiTexImage3DEXT" );
        bindGLFunc( cast( void** )&glMultiTexSubImage3DEXT, "glMultiTexSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCopyMultiTexSubImage3DEXT, "glCopyMultiTexSubImage3DEXT" );

        bindGLFunc( cast( void** )&glEnableClientStateIndexedEXT, "glEnableClientStateIndexedEXT" );
        bindGLFunc( cast( void** )&glDisableClientStateIndexedEXT, "glDisableClientStateIndexedEXT" );

        bindGLFunc( cast( void** )&glEnableClientStateiEXT, "glEnableClientStateiEXT" );
        bindGLFunc( cast( void** )&glDisableClientStateiEXT, "glDisableClientStateiEXT" );

        bindGLFunc( cast( void** )&glGetFloatIndexedvEXT, "glGetFloatIndexedvEXT" );
        bindGLFunc( cast( void** )&glGetDoubleIndexedvEXT, "glGetDoubleIndexedvEXT" );
        bindGLFunc( cast( void** )&glGetPointerIndexedvEXT, "glGetPointerIndexedvEXT" );

        bindGLFunc( cast( void** )&glGetFloati_vEXT, "glGetFloati_vEXT" );
        bindGLFunc( cast( void** )&glGetDoublei_vEXT, "glGetDoublei_vEXT" );
        bindGLFunc( cast( void** )&glGetPointeri_vEXT, "glGetPointeri_vEXT" );

        if( isExtSupported( glversion, "GL_ARB_vertex_program" )) {
            bindGLFunc( cast( void** )&glNamedProgramStringEXT, "glNamedProgramStringEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4dEXT, "glNamedProgramLocalParameter4dEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4dvEXT, "glNamedProgramLocalParameter4dvEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4fEXT, "glNamedProgramLocalParameter4fEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameter4fvEXT, "glNamedProgramLocalParameter4fvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterdvEXT, "glGetNamedProgramLocalParameterdvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterfvEXT, "glGetNamedProgramLocalParameterfvEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramivEXT, "glGetNamedProgramivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramStringEXT, "glGetNamedProgramStringEXT" );
        }

        bindGLFunc( cast( void** )&glCompressedTextureImage3DEXT, "glCompressedTextureImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureImage2DEXT, "glCompressedTextureImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureImage1DEXT, "glCompressedTextureImage1DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage3DEXT, "glCompressedTextureSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage2DEXT, "glCompressedTextureSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedTextureSubImage1DEXT, "glCompressedTextureSubImage1DEXT" );
        bindGLFunc( cast( void** )&glGetCompressedTextureImageEXT, "glGetCompressedTextureImageEXT" );

        bindGLFunc( cast( void** )&glCompressedMultiTexImage3DEXT, "glCompressedMultiTexImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexImage2DEXT, "glCompressedMultiTexImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexImage1DEXT, "glCompressedMultiTexImage1DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage3DEXT, "glCompressedMultiTexSubImage3DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage2DEXT, "glCompressedMultiTexSubImage2DEXT" );
        bindGLFunc( cast( void** )&glCompressedMultiTexSubImage1DEXT, "glCompressedMultiTexSubImage1DEXT" );
        bindGLFunc( cast( void** )&glGetCompressedMultiTexImageEXT, "glGetCompressedMultiTexImageEXT" );

        bindGLFunc( cast( void** )&glMatrixLoadTransposefEXT, "glMatrixLoadTransposefEXT" );
        bindGLFunc( cast( void** )&glMatrixLoadTransposedEXT, "glMatrixLoadTransposedEXT" );
        bindGLFunc( cast( void** )&glMatrixMultTransposefEXT, "glMatrixMultTransposefEXT" );
        bindGLFunc( cast( void** )&glMatrixMultTransposedEXT, "glMatrixMultTransposedEXT" );

        bindGLFunc( cast( void** )&glNamedBufferDataEXT, "glNamedBufferDataEXT" );
        bindGLFunc( cast( void** )&glNamedBufferSubDataEXT, "glNamedBufferSubDataEXT" );
        bindGLFunc( cast( void** )&glMapNamedBufferEXT, "glMapNamedBufferEXT" );
        bindGLFunc( cast( void** )&glUnmapNamedBufferEXT, "glUnmapNamedBufferEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferParameterivEXT, "glGetNamedBufferParameterivEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferPointervEXT, "glGetNamedBufferPointervEXT" );
        bindGLFunc( cast( void** )&glGetNamedBufferSubDataEXT, "glGetNamedBufferSubDataEXT" );

        bindGLFunc( cast( void** )&glProgramUniform1fEXT, "glProgramUniform1fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2fEXT, "glProgramUniform2fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3fEXT, "glProgramUniform3fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4fEXT, "glProgramUniform4fEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1iEXT, "glProgramUniform1iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2iEXT, "glProgramUniform2iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3iEXT, "glProgramUniform3iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4iEXT, "glProgramUniform4iEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1fvEXT, "glProgramUniform1fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2fvEXT, "glProgramUniform2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3fvEXT, "glProgramUniform3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4fvEXT, "glProgramUniform4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniform1ivEXT, "glProgramUniform1ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform2ivEXT, "glProgramUniform2ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform3ivEXT, "glProgramUniform3ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniform4ivEXT, "glProgramUniform4ivEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix2fvEXT, "glProgramUniformMatrix2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3fvEXT, "glProgramUniformMatrix3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4fvEXT, "glProgramUniformMatrix4fvEXT" );

        bindGLFunc( cast( void** )&glProgramUniformMatrix2x3fvEXT, "glProgramUniformMatrix2x3fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3x2fvEXT, "glProgramUniformMatrix3x2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix2x4fvEXT, "glProgramUniformMatrix2x4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4x2fvEXT, "glProgramUniformMatrix4x2fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix3x4fvEXT, "glProgramUniformMatrix3x4fvEXT" );
        bindGLFunc( cast( void** )&glProgramUniformMatrix4x3fvEXT, "glProgramUniformMatrix4x3fvEXT" );

        if( EXT_texture_buffer_object ) {
            bindGLFunc( cast( void** )&glTextureBufferEXT, "glTextureBufferEXT" );
            bindGLFunc( cast( void** )&glMultiTexBufferEXT, "glMultiTexBufferEXT" );
        }

        if( EXT_texture_integer ) {
            bindGLFunc( cast( void** )&glTextureParameterIivEXT, "glTextureParameterIivEXT" );
            bindGLFunc( cast( void** )&glTextureParameterIuivEXT, "glTextureParameterIuivEXT" );
            bindGLFunc( cast( void** )&glGetTextureParameterIivEXT, "glGetTextureParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetTextureParameterIuivEXT, "glGetTextureParameterIuivEXT" );
            bindGLFunc( cast( void** )&glMultiTexParameterIivEXT, "glMultiTexParameterIivEXT" );
            bindGLFunc( cast( void** )&glMultiTexParameterIuivEXT, "glMultiTexParameterIuivEXT" );
            bindGLFunc( cast( void** )&glGetMultiTexParameterIivEXT, "glGetMultiTexParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetMultiTexParameterIuivEXT, "glGetMultiTexParameterIuivEXT" );
        }

        if( EXT_gpu_shader4 ) {
            bindGLFunc( cast( void** )&glProgramUniform1uiEXT, "glProgramUniform1uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform2uiEXT, "glProgramUniform2uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform3uiEXT, "glProgramUniform3uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform4uiEXT, "glProgramUniform4uiEXT" );
            bindGLFunc( cast( void** )&glProgramUniform1uivEXT, "glProgramUniform1uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform2uivEXT, "glProgramUniform2uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform3uivEXT, "glProgramUniform3uivEXT" );
            bindGLFunc( cast( void** )&glProgramUniform4uivEXT, "glProgramUniform4uivEXT" );
        }

        if( EXT_gpu_program_parameters ) {
            bindGLFunc( cast( void** )&glNamedProgramLocalParameters4fvEXT, "glNamedProgramLocalParameters4fvEXT" );
        }

        if( NV_gpu_program4 ) {
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4iEXT, "glNamedProgramLocalParameterI4iEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4ivEXT, "glNamedProgramLocalParameterI4ivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParametersI4ivEXT, "glNamedProgramLocalParametersI4ivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4uiEXT, "glNamedProgramLocalParameterI4uiEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParameterI4uivEXT, "glNamedProgramLocalParameterI4uivEXT" );
            bindGLFunc( cast( void** )&glNamedProgramLocalParametersI4uivEXT, "glNamedProgramLocalParametersI4uivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterIivEXT, "glGetNamedProgramLocalParameterIivEXT" );
            bindGLFunc( cast( void** )&glGetNamedProgramLocalParameterIuivEXT, "glGetNamedProgramLocalParameterIuivEXT" );
        }

        bindGLFunc( cast( void** )&glNamedRenderbufferStorageEXT, "glNamedRenderbufferStorageEXT" );
        bindGLFunc( cast( void** )&glGetNamedRenderbufferParameterivEXT, "glGetNamedRenderbufferParameterivEXT" );

        bindGLFunc( cast( void** )&glNamedRenderbufferStorageMultisampleEXT, "glNamedRenderbufferStorageMultisampleEXT" );

        if( NV_framebuffer_multisample_coverage ) {
            bindGLFunc( cast( void** )&glNamedRenderbufferStorageMultisampleCoverageEXT, "glNamedRenderbufferStorageMultisampleCoverageEXT" );
        }

        bindGLFunc( cast( void** )&glCheckNamedFramebufferStatusEXT, "glCheckNamedFramebufferStatusEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture1DEXT, "glNamedFramebufferTexture1DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture2DEXT, "glNamedFramebufferTexture2DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferTexture3DEXT, "glNamedFramebufferTexture3DEXT" );
        bindGLFunc( cast( void** )&glNamedFramebufferRenderbufferEXT, "glNamedFramebufferRenderbufferEXT" );
        bindGLFunc( cast( void** )&glGetNamedFramebufferAttachmentParameterivEXT, "glGetNamedFramebufferAttachmentParameterivEXT" );

        bindGLFunc( cast( void** )&glGenerateTextureMipmapEXT, "glGenerateTextureMipmapEXT" );

        bindGLFunc( cast( void** )&glGenerateMultiTexMipmapEXT, "glGenerateMultiTexMipmapEXT" );

        bindGLFunc( cast( void** )&glFramebufferDrawBufferEXT, "glFramebufferDrawBufferEXT" );
        bindGLFunc( cast( void** )&glFramebufferDrawBuffersEXT, "glFramebufferDrawBuffersEXT" );
        bindGLFunc( cast( void** )&glFramebufferReadBufferEXT, "glFramebufferReadBufferEXT" );

        bindGLFunc( cast( void** )&glGetFramebufferParameterivEXT, "glGetFramebufferParameterivEXT" );

        bindGLFunc( cast( void** )&glNamedCopyBufferSubDataEXT, "glNamedCopyBufferSubDataEXT" );

        if( EXT_geometry_shader4 || NV_gpu_program4 ) {
            bindGLFunc( cast( void** )&glNamedFramebufferTextureEXT, "glNamedFramebufferTextureEXT" );
            bindGLFunc( cast( void** )&glNamedFramebufferTextureLayerEXT, "glNamedFramebufferTextureLayerEXT" );
            bindGLFunc( cast( void** )&glNamedFramebufferTextureFaceEXT, "glNamedFramebufferTextureFaceEXT" );
        }

        if( NV_explicit_multisample ) {
            bindGLFunc( cast( void** )&glTextureRenderbufferEXT, "glTextureRenderbufferEXT" );
            bindGLFunc( cast( void** )&glMultiTexRenderbufferEXT, "glMultiTexRenderbufferEXT" );
        }

        bindGLFunc( cast( void** )&glVertexArrayVertexOffsetEXT, "glVertexArrayVertexOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayColorOffsetEXT, "glVertexArrayColorOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayEdgeFlagOffsetEXT, "glVertexArrayEdgeFlagOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayIndexOffsetEXT, "glVertexArrayIndexOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayNormalOffsetEXT, "glVertexArrayNormalOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayTexCoordOffsetEXT, "glVertexArrayTexCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayMultiTexCoordOffsetEXT, "glVertexArrayMultiTexCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayFogCoordOffsetEXT, "glVertexArrayFogCoordOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArraySecondaryColorOffsetEXT, "glVertexArraySecondaryColorOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayVertexAttribOffsetEXT, "glVertexArrayVertexAttribOffsetEXT" );
        bindGLFunc( cast( void** )&glVertexArrayVertexAttribIOffsetEXT, "glVertexArrayVertexAttribIOffsetEXT" );

        bindGLFunc( cast( void** )&glEnableVertexArrayEXT, "glEnableVertexArrayEXT" );
        bindGLFunc( cast( void** )&glDisableVertexArrayEXT, "glDisableVertexArrayEXT" );

        bindGLFunc( cast( void** )&glEnableVertexArrayAttribEXT, "glEnableVertexArrayAttribEXT" );
        bindGLFunc( cast( void** )&glDisableVertexArrayAttribEXT, "glDisableVertexArrayAttribEXT" );

        bindGLFunc( cast( void** )&glGetVertexArrayIntegervEXT, "glGetVertexArrayIntegervEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayPointervEXT, "glGetVertexArrayPointervEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayIntegeri_vEXT, "glGetVertexArrayIntegeri_vEXT" );
        bindGLFunc( cast( void** )&glGetVertexArrayPointeri_vEXT, "glGetVertexArrayPointeri_vEXT" );

        bindGLFunc( cast( void** )&glMapNamedBufferRangeEXT, "glMapNamedBufferRangeEXT" );
        bindGLFunc( cast( void** )&glFlushMappedNamedBufferRangeEXT, "glFlushMappedNamedBufferRangeEXT" );
        _EXT_direct_state_access = true;
    } catch( Exception e ) {
        _EXT_direct_state_access = false;
    }
}

// GL_EXT_texture_compression_s3tc
private __gshared bool _EXT_texture_compression_s3tc;
@nogc bool EXT_texture_compression_s3tc() nothrow @property { return _EXT_texture_compression_s3tc; }

// GL_EXT_texture_compression_rgtc
private __gshared bool _EXT_texture_compression_rgtc;
@nogc bool EXT_texture_compression_rgtc() nothrow @property { return _EXT_texture_compression_rgtc; }

// GL_NV_texture_barrier
extern( System ) @nogc nothrow {
    alias da_glTextureBarrierNV = void function ();
}

__gshared {
    da_glTextureBarrierNV glTextureBarrierNV;
}

private __gshared bool _NV_texture_barrier;
@nogc bool NV_texture_barrier() nothrow @property { return _NV_texture_barrier; }
private void load_NV_texture_barrier() {
    try {
        bindGLFunc( cast( void** )&glTextureBarrierNV, "glTextureBarrierNV" );
        _NV_texture_barrier = true;
    } catch ( Exception e ) {
        _NV_texture_barrier = false;
    }
}

// GL_APPLE_vertex_array_object
extern( System ) @nogc nothrow {
    alias da_glBindVertexArrayAPPLE = void function( GLuint );
    alias da_glDeleteVertexArraysAPPLE = void function( GLsizei,const( GLuint )* );
    alias da_glGenVertexArraysAPPLE = void function( GLsizei,GLuint* );
    alias da_glIsVertexArrayAPPLE = GLboolean function( GLuint );
}

__gshared {
    da_glBindVertexArrayAPPLE glBindVertexArrayAPPLE;
    da_glDeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE;
    da_glGenVertexArraysAPPLE glGenVertexArraysAPPLE;
    da_glIsVertexArrayAPPLE glIsVertexArrayAPPLE;
}

private __gshared bool _APPLE_vertex_array_object;
@nogc bool APPLE_vertex_array_object() nothrow @property { return _APPLE_vertex_array_object; }
private void load_APPLE_vertex_array_object() {
    try {
        bindGLFunc( cast( void** )&glBindVertexArrayAPPLE, "glBindVertexArrayAPPLE" );
        bindGLFunc( cast( void** )&glDeleteVertexArraysAPPLE, "glDeleteVertexArraysAPPLE" );
        bindGLFunc( cast( void** )&glGenVertexArraysAPPLE, "glGenVertexArraysAPPLE" );
        bindGLFunc( cast( void** )&glIsVertexArrayAPPLE, "glIsVertexArrayAPPLE" );
        _APPLE_vertex_array_object = true;
    } catch ( Exception e ) {
        _APPLE_vertex_array_object = false;
    }
}

package void loadEXT( GLVersion glversion ) {
    _EXT_texture_filter_anisotropic = isExtSupported( glversion, "GL_EXT_texture_filter_anisotropic" );

    if( isExtSupported( glversion, "GL_EXT_framebuffer_object" )) load_EXT_framebuffer_object();
    if( isExtSupported( glversion, "GL_EXT_texture_buffer_object" )) load_EXT_texture_buffer_object();
    if( isExtSupported( glversion, "GL_EXT_texture_integer" )) load_EXT_texture_integer();
    if( isExtSupported( glversion, "GL_EXT_gpu_shader4" )) load_EXT_gpu_shader4();
    if( isExtSupported( glversion, "GL_EXT_gpu_program_parameters" )) load_EXT_gpu_program_parameters();
    if( isExtSupported( glversion, "GL_NV_gpu_program4" )) load_NV_gpu_program4();
    if( isExtSupported( glversion, "GL_NV_framebuffer_multisample_coverage" )) load_NV_framebuffer_multisample_coverage();
    if( isExtSupported( glversion, "GL_EXT_geometry_shader4" )) load_EXT_geometry_shader4();
    if( isExtSupported( glversion, "GL_NV_explicit_multisample" )) load_NV_explicit_multisample();
    if( isExtSupported( glversion, "GL_EXT_draw_buffers2" )) load_EXT_draw_buffers2();

    _EXT_texture_compression_s3tc = isExtSupported( glversion, "GL_EXT_texture_compression_s3tc" );
    _EXT_texture_compression_rgtc = isExtSupported( glversion, "GL_EXT_texture_compression_rgtc" );

    if( isExtSupported( glversion, "GL_NV_texture_barrier" )) load_NV_texture_barrier();
    if( isExtSupported( glversion, "GL_APPLE_vertex_array_object" )) load_APPLE_vertex_array_object();

    // TODO Why does this need to be loaded last?? Who implemented it?
    // Direct state access extension should be ALWAYS loaded in the last place
    if( isExtSupported( glversion, "GL_EXT_direct_state_access" )) load_EXT_direct_state_access( glversion );
}
