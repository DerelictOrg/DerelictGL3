/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.functions;

private {
    import derelict.opengl3.types;
    import derelict.util.system;
}

extern( System ) @nogc nothrow {




    // OpenGL 3.0
    alias da_glColorMaski = void function( GLuint,GLboolean,GLboolean,GLboolean,GLboolean );
    alias da_glGetBooleani_v = void function( GLenum,GLuint,GLboolean* );
    alias da_glGetIntegeri_v = void function( GLenum,GLuint,GLint* );
    alias da_glEnablei = void function( GLenum,GLuint );
    alias da_glDisablei = void function( GLenum,GLuint );
    alias da_glIsEnabledi = GLboolean function( GLenum,GLuint );
    alias da_glBeginTransformFeedback = void function( GLenum );
    alias da_glEndTransformFeedback = void function();
    alias da_glBindBufferRange = void function( GLenum,GLuint,GLuint,GLintptr,GLsizeiptr );
    alias da_glBindBufferBase = void function( GLenum,GLuint,GLuint );
    alias da_glTransformFeedbackVaryings = void function( GLuint,GLsizei,const( GLchar* )*,GLenum );
    alias da_glGetTransformFeedbackVarying = void function( GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar* );
    alias da_glClampColor = void function( GLenum,GLenum );
    alias da_glBeginConditionalRender = void function( GLuint,GLenum );
    alias da_glEndConditionalRender = void function();
    alias da_glVertexAttribIPointer = void function( GLuint,GLint,GLenum,GLsizei,const( GLvoid )* );
    alias da_glGetVertexAttribIiv = void function( GLuint,GLenum,GLint* );
    alias da_glGetVertexAttribIuiv = void function( GLuint,GLenum,GLuint* );
    alias da_glVertexAttribI1i = void function( GLuint,GLint );
    alias da_glVertexAttribI2i = void function( GLuint,GLint,GLint );
    alias da_glVertexAttribI3i = void function( GLuint,GLint,GLint,GLint );
    alias da_glVertexAttribI4i = void function( GLuint,GLint,GLint,GLint,GLint );
    alias da_glVertexAttribI1ui = void function( GLuint,GLuint );
    alias da_glVertexAttribI2ui = void function( GLuint,GLuint,GLuint );
    alias da_glVertexAttribI3ui = void function( GLuint,GLuint,GLuint,GLuint );
    alias da_glVertexAttribI4ui = void function( GLuint,GLuint,GLuint,GLuint,GLuint );
    alias da_glVertexAttribI1iv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttribI2iv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttribI3iv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttribI4iv = void function( GLuint,const( GLint )* );
    alias da_glVertexAttribI1uiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttribI2uiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttribI3uiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttribI4uiv = void function( GLuint,const( GLuint )* );
    alias da_glVertexAttribI4bv = void function( GLuint,const( GLbyte )* );
    alias da_glVertexAttribI4sv = void function( GLuint,const( GLshort )* );
    alias da_glVertexAttribI4ubv = void function( GLuint,const( GLubyte )* );
    alias da_glVertexAttribI4usv = void function( GLuint,const( GLushort )* );
    alias da_glGetUniformuiv = void function( GLuint,GLint,GLuint* );
    alias da_glBindFragDataLocation = void function( GLuint,GLuint,const( GLchar )* );
    alias da_glGetFragDataLocation = GLint function( GLuint,const( GLchar )* );
    alias da_glUniform1ui = void function( GLint,GLuint );
    alias da_glUniform2ui = void function( GLint,GLuint,GLuint );
    alias da_glUniform3ui = void function( GLint,GLuint,GLuint,GLuint );
    alias da_glUniform4ui = void function( GLint,GLuint,GLuint,GLuint,GLuint );
    alias da_glUniform1uiv = void function( GLint,GLsizei,const( GLuint )* );
    alias da_glUniform2uiv = void function( GLint,GLsizei,const( GLuint )* );
    alias da_glUniform3uiv = void function( GLint,GLsizei,const( GLuint )* );
    alias da_glUniform4uiv = void function( GLint,GLsizei,const( GLuint )* );
    alias da_glTexParameterIiv = void function( GLenum,GLenum,const( GLint )* );
    alias da_glTexParameterIuiv = void function( GLenum,GLenum,const( GLuint )* );
    alias da_glGetTexParameterIiv = void function( GLenum,GLenum,GLint* );
    alias da_glGetTexParameterIuiv = void function( GLenum,GLenum,GLuint* );
    alias da_glClearBufferiv = void function( GLenum,GLint,const( GLint )* );
    alias da_glClearBufferuiv = void function( GLenum,GLint,const( GLuint )* );
    alias da_glClearBufferfv = void function( GLenum,GLint,const( GLfloat )* );
    alias da_glClearBufferfi = void function( GLenum,GLint,GLfloat,GLint );
    alias da_glGetStringi = const( char )* function( GLenum,GLuint );

    // OpenGL 3.1
    alias da_glDrawArraysInstanced = void function( GLenum,GLint,GLsizei,GLsizei );
    alias da_glDrawElementsInstanced = void function( GLenum,GLsizei,GLenum,const( GLvoid )*,GLsizei );
    alias da_glTexBuffer = void function( GLenum,GLenum,GLuint );
    alias da_glPrimitiveRestartIndex = void function( GLuint );

    // OpenGL 3.2
    alias da_glGetInteger64i_v = void function( GLenum,GLuint,GLint64* );
    alias da_glGetBufferParameteri64v = void function( GLenum,GLenum,GLint64* );
    alias da_glFramebufferTexture = void function( GLenum,GLenum,GLuint,GLint );

    // OpenGL 3.3
    alias da_glVertexAttribDivisor = void function( GLuint,GLuint );

    // OpenGL 4.0
    alias da_glMinSampleShading = void function( GLclampf );
    alias da_glBlendEquationi = void function( GLuint,GLenum );
    alias da_glBlendEquationSeparatei = void function( GLuint,GLenum,GLenum );
    alias da_glBlendFunci = void function( GLuint,GLenum,GLenum );
    alias da_glBlendFuncSeparatei = void function( GLuint,GLenum,GLenum,GLenum,GLenum );

    // OpenGL 4.5
    alias da_glGetnCompressedTexImage = void function( GLenum,GLint,GLsizei,void* );
    alias da_glGetnTexImage = void function( GLenum,GLint,GLenum,GLenum,GLsizei,void* );
    alias da_glGetnUniformdv = void function( GLuint,GLint,GLsizei,GLdouble* );
}

__gshared {



    da_glColorMaski glColorMaski;
    da_glGetBooleani_v glGetBooleani_v;
    da_glGetIntegeri_v glGetIntegeri_v;
    da_glEnablei glEnablei;
    da_glDisablei glDisablei;
    da_glIsEnabledi glIsEnabledi;
    da_glBeginTransformFeedback glBeginTransformFeedback;
    da_glEndTransformFeedback glEndTransformFeedback;
    da_glBindBufferRange glBindBufferRange;
    da_glBindBufferBase glBindBufferBase;
    da_glTransformFeedbackVaryings glTransformFeedbackVaryings;
    da_glGetTransformFeedbackVarying glGetTransformFeedbackVarying;
    da_glClampColor glClampColor;
    da_glBeginConditionalRender glBeginConditionalRender;
    da_glEndConditionalRender glEndConditionalRender;
    da_glVertexAttribIPointer glVertexAttribIPointer;
    da_glGetVertexAttribIiv glGetVertexAttribIiv;
    da_glGetVertexAttribIuiv glGetVertexAttribIuiv;
    da_glVertexAttribI1i glVertexAttribI1i;
    da_glVertexAttribI2i glVertexAttribI2i;
    da_glVertexAttribI3i glVertexAttribI3i;
    da_glVertexAttribI4i glVertexAttribI4i;
    da_glVertexAttribI1ui glVertexAttribI1ui;
    da_glVertexAttribI2ui glVertexAttribI2ui;
    da_glVertexAttribI3ui glVertexAttribI3ui;
    da_glVertexAttribI4ui glVertexAttribI4ui;
    da_glVertexAttribI1iv glVertexAttribI1iv;
    da_glVertexAttribI2iv glVertexAttribI2iv;
    da_glVertexAttribI3iv glVertexAttribI3iv;
    da_glVertexAttribI4iv glVertexAttribI4iv;
    da_glVertexAttribI1uiv glVertexAttribI1uiv;
    da_glVertexAttribI2uiv glVertexAttribI2uiv;
    da_glVertexAttribI3uiv glVertexAttribI3uiv;
    da_glVertexAttribI4uiv glVertexAttribI4uiv;
    da_glVertexAttribI4bv glVertexAttribI4bv;
    da_glVertexAttribI4sv glVertexAttribI4sv;
    da_glVertexAttribI4ubv glVertexAttribI4ubv;
    da_glVertexAttribI4usv glVertexAttribI4usv;
    da_glGetUniformuiv glGetUniformuiv;
    da_glBindFragDataLocation glBindFragDataLocation;
    da_glGetFragDataLocation glGetFragDataLocation;
    da_glUniform1ui glUniform1ui;
    da_glUniform2ui glUniform2ui;
    da_glUniform3ui glUniform3ui;
    da_glUniform4ui glUniform4ui;
    da_glUniform1uiv glUniform1uiv;
    da_glUniform2uiv glUniform2uiv;
    da_glUniform3uiv glUniform3uiv;
    da_glUniform4uiv glUniform4uiv;
    da_glTexParameterIiv glTexParameterIiv;
    da_glTexParameterIuiv glTexParameterIuiv;
    da_glGetTexParameterIiv glGetTexParameterIiv;
    da_glGetTexParameterIuiv glGetTexParameterIuiv;
    da_glClearBufferiv glClearBufferiv;
    da_glClearBufferuiv glClearBufferuiv;
    da_glClearBufferfv glClearBufferfv;
    da_glClearBufferfi glClearBufferfi;
    da_glGetStringi glGetStringi;
    da_glDrawArraysInstanced glDrawArraysInstanced;
    da_glDrawElementsInstanced glDrawElementsInstanced;
    da_glTexBuffer glTexBuffer;
    da_glPrimitiveRestartIndex glPrimitiveRestartIndex;
    da_glGetInteger64i_v glGetInteger64i_v;
    da_glGetBufferParameteri64v glGetBufferParameteri64v;
    da_glFramebufferTexture glFramebufferTexture;
    da_glVertexAttribDivisor glVertexAttribDivisor;
    da_glMinSampleShading glMinSampleShading;
    da_glBlendEquationi glBlendEquationi;
    da_glBlendEquationSeparatei glBlendEquationSeparatei;
    da_glBlendFunci glBlendFunci;
    da_glBlendFuncSeparatei glBlendFuncSeparatei;
    da_glGetnTexImage glGetnTexImage;
    da_glGetnCompressedTexImage glGetnCompressedTexImage;
    da_glGetnUniformdv glGetnUniformdv;
}
