/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.internal;


import std.array;

import derelict.util.loader,
       derelict.util.system;
import derelict.opengl3.constants,
       derelict.opengl3.types;

package:
        // Assumes that symName is null-terminated, i.e. a string literal
        void bindGLFunc(void** ptr, string symName)
        {
            import derelict.util.exception : SymbolLoadException;

            auto sym = loadGLFunc(symName.ptr);
            if(!sym)
                throw new SymbolLoadException("Failed to load OpenGL symbol [" ~ symName ~ "]");
            *ptr = sym;
        }

        /*
        This is called from DerelictGL3.reload to reset the extension name cache,
        since supported extensions can potentially vary from context to context.
        */
        /*
        void initExtensionCache(T)(T loader, GLVersion glversion)
        {
            static if(is(T : SharedLibLoader)) {
                import derelict.opengl3.versions.base : glGetIntegerv, GL_EXTENSIONS;
                import derelict.opengl3.functions : glGetStringi;
                import derelict.opengl3.constants : GL_NUM_EXTENSIONS;
            }

            // There's no need to cache extension names using the pre-3.0 glString
            // technique, but the modern style of using glStringi results in a high
            // number of calls when testing for every extension Derelict supports.
            // This causes extreme slowdowns when using GLSL-Debugger. The cache
            // solves that problem. Can't hurt load time, either.
            if(glversion >= GLVersion.GL30)
            {
                int count;
                static if(is(T: SharedLibLoader))
                    glGetIntegerv(GL_NUM_EXTENSIONS, &count);
                else
                    loader.glGetIntegerv(GL_NUM_EXTENSIONS, &count);

                _extCache.shrinkTo(0);
                _extCache.reserve(count);

                for(int i=0; i<count; ++i) {
                    static if(is(T : SharedLibLoader))
                        _extCache.put(glGetStringi(GL_EXTENSIONS, i));
                    else
                        _extCache.put(loader.glGetStringi(GL_EXTENSIONS, i));
                }
            }
        }

        // Assumes that name is null-terminated, i.e. a string literal
        bool isExtSupported(GLVersion glversion, string name)
        {
            import core.stdc.string : strcmp;
            import derelict.opengl3.versions.base : glGetString, GL_EXTENSIONS;

            // If OpenGL 3+ is loaded, use the cache.
            if(glversion >= GLVersion.GL30) {
                foreach(extname; _extCache.data) {
                    if(strcmp(extname, name.ptr) == 0)
                        return true;
                }
                return false;
            }
            // Otherwise use the classic approach.
            else {
                return findEXT(glGetString(GL_EXTENSIONS), name);
            }
        }

        // Assumes that extname is null-terminated, i.e. a string literal
        bool findEXT(const(char)* extstr, string extname)
        {
            import core.stdc.string : strstr;

            auto res = strstr(extstr, extname.ptr);
            while(res) {
                // It's possible that the extension name is actually a
                // substring of another extension. If not, then the
                // character following the name in the extension string
                // should be a space (or possibly the null character).
                if(res[ extname.length ] == ' ' || res[ extname.length ] == '\0')
                    return true;
                res = strstr(res + extname.length, extname.ptr);
            }

            return false;
        }
        */
        void initGLLoader(SharedLibLoader loader)
        {
            static if(Derelict_OS_Mac) _loader = loader;
            else loader.bindFunc(cast(void**)&getProcAddress, getProcAddressName);
            loader.bindFunc(cast(void**)&getCurrentContext, getCurrentContextName);
        }

        bool hasValidContext() { return getCurrentContext() != null; }
        void *currentContext() { return getCurrentContext(); }

        @property @nogc nothrow
        GLVersion getContextVersion(T)(T loader)
        {
            import derelict.opengl3.versions.base : GL_VERSION;
            static if(is(T : SharedLibLoader)) {
                import derelict.opengl3.versions.base : glGetString;
                const(char)* verstr = glGetString(GL_VERSION);
            }
            else const(char)* verstr = loader.glGetString(GL_VERSION);

            /* glGetString(GL_VERSION) is guaranteed to return a constant string
             of the format "[major].[minor].[build] xxxx", where xxxx is vendor-specific
             information. Here, I'm pulling two characters out of the string, the major
             and minor version numbers. */
            char major = *verstr;
            char minor = *(verstr + 2);

            switch(major) {
                case '4':
                    if(minor == '5') return GLVersion.GL45;
                    else if(minor == '4') return GLVersion.GL44;
                    else if(minor == '3') return GLVersion.GL43;
                    else if(minor == '2') return GLVersion.GL42;
                    else if(minor == '1') return GLVersion.GL41;
                    else if(minor == '0') return GLVersion.GL40;

                    /* No default condition here, since it's possible for new
                     minor versions of the 4.x series to be released before
                     support is added to Derelict. That case is handled outside
                     of the switch. When no more 4.x versions are released, this
                     should be changed to return GL40 by default. */
                    break;

                case '3':
                    if(minor == '3') return GLVersion.GL33;
                    else if(minor == '2') return GLVersion.GL32;
                    else if(minor == '1') return GLVersion.GL31;
                    else return GLVersion.GL30;

                case '2':
                    if(minor == '1') return GLVersion.GL21;
                    else return GLVersion.GL20;

                case '1':
                    if(minor == '5') return GLVersion.GL15;
                    else if(minor == '4') return GLVersion.GL14;
                    else if(minor == '3') return GLVersion.GL13;
                    else if(minor == '2') return GLVersion.GL12;
                    else return GLVersion.GL11;

                default:
                    /* glGetString(GL_VERSION) is guaranteed to return a result
                     of a specific format, so if this point is reached it is
                     going to be because a major version higher than what Derelict
                     supports was encountered. That case is handled outside the
                     switch. */
                    break;
            }

            /* It's highly likely at this point that the version is higher than
             what Derelict supports, so return the highest supported version. */
            return GLVersion.HighestSupported;
        }

private:
    Appender!(const(char)*[]) _extCache;

    static if(Derelict_OS_Mac) SharedLibLoader _loader;
    else {
        extern(C) @nogc nothrow alias da_getProcAddress = void* function(const(char)*);
        __gshared da_getProcAddress getProcAddress;
    }

    extern(System) @nogc nothrow alias da_getCurrentContext = void* function();
    __gshared da_getCurrentContext getCurrentContext;

    static if(Derelict_OS_Windows) {
        enum getProcAddressName = "wglGetProcAddress";
        enum getCurrentContextName = "wglGetCurrentContext";
    }
    else static if(Derelict_OS_Mac) {
        enum getCurrentContextName = "CGLGetCurrentContext";
    }
    else static if(Derelict_OS_Posix) {
        enum getProcAddressName = "glXGetProcAddress";
        enum getCurrentContextName = "glXGetCurrentContext";
    }

    void* loadGLFunc(const(char)* name)
    {
        static if(Derelict_OS_Mac) {
            void *ptr;
            _loader.bindFunc(&ptr, name);
            return ptr;
        }
        else return getProcAddress(name);
    }

