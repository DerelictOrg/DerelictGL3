/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.opengl3.platform.wgl;

version(Windows):

mixin template DerelictGL3_PlatformBind() {
    extern(Windows) @nogc nothrow {
        alias da_wglCopyContext = BOOL function(HGLRC,HGLRC,UINT);
        alias da_wglCreateContext = HGLRC function(HDC);
        alias da_wglCreateLayerContext = HGLRC function(HDC,int);
        alias da_wglDeleteContext = BOOL function(void*);
        alias da_wglDescribeLayerPlane = BOOL function(HDC,int,int,UINT,LAYERPLANEDESCRIPTOR*);
        alias da_wglGetCurrentContext = HGLRC function();
        alias da_wglGetCurrentDC = HDC function();
        alias da_wglGetLayerPaletteEntries = int function(HDC,int,int,int,COLORREF*);
        alias da_wglGetProcAddress = void* function(const(char)*);
        alias da_wglMakeCurrent = BOOL function(HDC,HGLRC);
        alias da_wglRealizeLayerPalette = BOOL function(HDC,int,BOOL);
        alias da_wglSetLayerPaletteEntries = int function(HDC,int,int,int,COLORREF*);
        alias da_wglShareLists = BOOL function(HGLRC,HGLRC);
        alias da_wglSwapLayerBuffers = BOOL function(HDC,UINT);
        alias da_wglUseFontBitmapsW = BOOL function(HDC,DWORD,DWORD,DWORD);
        alias da_wglUseFontOutlinesW = BOOL function(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,int,GLYPHMETRICSFLOAT*);
    }

    __gshared {
        da_wglCopyContext dwglCopyContext;
        da_wglCreateContext dwglCreateContext;
        da_wglCreateLayerContext dwglCreateLayerContext;
        da_wglDeleteContext dwglDeleteContext;
        da_wglDescribeLayerPlane dwglDescribeLayerPlane;
        da_wglGetCurrentContext dwglGetCurrentContext;
        da_wglGetCurrentDC dwglGetCurrentDC;
        da_wglGetLayerPaletteEntries dwglGetLayerPaletteEntries;
        da_wglGetProcAddress dwglGetProcAddress;
        da_wglMakeCurrent dwglMakeCurrent;
        da_wglRealizeLayerPalette dwglRealizeLayerPalette;
        da_wglSetLayerPaletteEntries dwglSetLayerPaletteEntries;
        da_wglShareLists dwglShareLists;
        da_wglSwapLayerBuffers dwglSwapLayerBuffers;
        da_wglUseFontBitmapsW dwglUseFontBitmapsW;
        da_wglUseFontOutlinesW dwglUseFontOutlinesW;
    }

    void DerelictGL3_loadPlatform() {
        import derelict.util.exception : DerelictException;
        import derelict.opengl3.gl3 : DerelictGL3;

        if(!DerelictGL3.isLoaded) {
            throw new DerelictException("DerelictGL3 mustbe loaded before calling DerelictGL3_loadPlatform.");
        }

        with(DerelictGL3) {
            bindMixedFunc(cast(void**)&dwglCopyContext, "wglCopyContext");
            bindMixedFunc(cast(void**)&dwglCreateContext, "wglCreateContext");
            bindMixedFunc(cast(void**)&dwglCreateLayerContext, "wglCreateLayerContext");
            bindMixedFunc(cast(void**)&dwglDeleteContext, "wglDeleteContext");
            bindMixedFunc(cast(void**)&dwglDescribeLayerPlane, "wglDescribeLayerPlane");
            bindMixedFunc(cast(void**)&dwglGetCurrentContext, "wglGetCurrentContext");
            bindMixedFunc(cast(void**)&dwglGetCurrentDC, "wglGetCurrentDC");
            bindMixedFunc(cast(void**)&dwglGetLayerPaletteEntries, "wglGetLayerPaletteEntries");
            bindMixedFunc(cast(void**)&dwglGetProcAddress, "wglGetProcAddress");
            bindMixedFunc(cast(void**)&dwglMakeCurrent, "wglMakeCurrent");
            bindMixedFunc(cast(void**)&dwglRealizeLayerPalette, "wglRealizeLayerPalette");
            bindMixedFunc(cast(void**)&dwglSetLayerPaletteEntries, "wglSetLayerPaletteEntries");
            bindMixedFunc(cast(void**)&dwglShareLists, "wglShareLists");
            bindMixedFunc(cast(void**)&dwglSwapLayerBuffers, "wglSwapLayerBuffers");
            bindMixedFunc(cast(void**)&dwglUseFontBitmapsW, "wglUseFontBitmapsW");
            bindMixedFunc(cast(void**)&dwglUseFontOutlinesW, "wglUseFontOutlinesW");
        }
    }
}